
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ccss;

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoCCSS extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoCCSS() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoCCSS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoCCSS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\006\000\002\005\004" +
    "\000\002\005\003\000\002\015\010\000\002\015\010\000" +
    "\002\015\007\000\002\015\007\000\002\006\004\000\002" +
    "\006\003\000\002\007\006\000\002\007\006\000\002\007" +
    "\006\000\002\007\006\000\002\007\006\000\002\007\006" +
    "\000\002\007\012\000\002\007\006\000\002\007\014\000" +
    "\002\007\006\000\002\007\006\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\011" +
    "\005\000\002\011\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\013\003\000\002\013\003\000\002\014\003\000\002" +
    "\014\003\000\002\016\003\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\003\000\002\017\003\000\002\017\004\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\004\040\007\001\002\000\006\002\000\040" +
    "\007\001\002\000\006\002\ufffe\040\ufffe\001\002\000\004" +
    "\002\165\001\002\000\004\041\010\001\002\000\006\032" +
    "\012\033\014\001\002\000\010\032\012\033\014\042\163" +
    "\001\002\000\004\060\156\001\002\000\010\032\ufffb\033" +
    "\ufffb\042\ufffb\001\002\000\004\060\015\001\002\000\004" +
    "\040\016\001\002\000\004\061\017\001\002\000\004\051" +
    "\020\001\002\000\036\004\026\005\032\012\033\020\030" +
    "\021\027\022\024\023\035\024\022\027\021\030\025\031" +
    "\023\032\ufff7\033\ufff7\042\ufff7\001\002\000\004\037\145" +
    "\001\002\000\004\037\142\001\002\000\004\037\137\001" +
    "\002\000\004\037\134\001\002\000\004\037\131\001\002" +
    "\000\004\037\126\001\002\000\004\037\123\001\002\000" +
    "\004\037\074\001\002\000\036\004\ufff5\005\ufff5\012\ufff5" +
    "\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\027\ufff5\030" +
    "\ufff5\031\ufff5\032\ufff5\033\ufff5\042\ufff5\001\002\000\004" +
    "\037\065\001\002\000\004\037\052\001\002\000\036\004" +
    "\026\005\032\012\033\020\030\021\027\022\024\023\035" +
    "\024\022\027\021\030\025\031\023\032\ufff9\033\ufff9\042" +
    "\ufff9\001\002\000\004\037\036\001\002\000\004\041\037" +
    "\001\002\000\006\045\040\046\042\001\002\000\010\034" +
    "\uffdd\042\uffdd\051\uffdd\001\002\000\004\034\043\001\002" +
    "\000\010\034\uffde\042\uffde\051\uffde\001\002\000\006\025" +
    "\045\026\046\001\002\000\004\042\047\001\002\000\004" +
    "\042\uffdc\001\002\000\004\042\uffdb\001\002\000\004\051" +
    "\050\001\002\000\036\004\uffee\005\uffee\012\uffee\020\uffee" +
    "\021\uffee\022\uffee\023\uffee\024\uffee\027\uffee\030\uffee\031" +
    "\uffee\032\uffee\033\uffee\042\uffee\001\002\000\036\004\ufff6" +
    "\005\ufff6\012\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024" +
    "\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\042\ufff6" +
    "\001\002\000\014\013\054\014\056\015\060\016\057\017" +
    "\061\001\002\000\006\034\062\051\063\001\002\000\006" +
    "\034\uffe3\051\uffe3\001\002\000\006\034\uffe4\051\uffe4\001" +
    "\002\000\006\034\uffe2\051\uffe2\001\002\000\006\034\uffe0" +
    "\051\uffe0\001\002\000\006\034\uffe1\051\uffe1\001\002\000" +
    "\006\034\uffdf\051\uffdf\001\002\000\014\013\054\014\056" +
    "\015\060\016\057\017\061\001\002\000\036\004\ufff2\005" +
    "\ufff2\012\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2" +
    "\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\042\ufff2\001" +
    "\002\000\006\034\uffe5\051\uffe5\001\002\000\012\006\070" +
    "\007\067\010\072\011\071\001\002\000\004\051\073\001" +
    "\002\000\004\051\uffe8\001\002\000\004\051\uffe9\001\002" +
    "\000\004\051\uffe6\001\002\000\004\051\uffe7\001\002\000" +
    "\036\004\ufff4\005\ufff4\012\ufff4\020\ufff4\021\ufff4\022\ufff4" +
    "\023\ufff4\024\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033" +
    "\ufff4\042\ufff4\001\002\000\022\036\103\040\076\045\104" +
    "\046\102\055\100\060\077\062\105\063\101\001\002\000" +
    "\004\051\122\001\002\000\016\035\uffce\036\uffce\043\uffce" +
    "\051\uffce\054\uffce\061\uffce\001\002\000\022\036\103\040" +
    "\076\045\104\046\102\055\100\060\077\062\105\063\101" +
    "\001\002\000\016\035\uffd1\036\uffd1\043\uffd1\051\uffd1\054" +
    "\uffd1\061\uffd1\001\002\000\016\035\uffcf\036\uffcf\043\uffcf" +
    "\051\uffcf\054\uffcf\061\uffcf\001\002\000\016\035\uffd3\036" +
    "\uffd3\043\uffd3\051\uffd3\054\uffd3\061\uffd3\001\002\000\022" +
    "\036\103\040\076\045\104\046\102\055\100\060\077\062" +
    "\105\063\101\001\002\000\016\035\uffd4\036\uffd4\043\uffd4" +
    "\051\uffd4\054\uffd4\061\uffd4\001\002\000\016\035\uffd0\036" +
    "\uffd0\043\uffd0\051\uffd0\054\uffd0\061\uffd0\001\002\000\014" +
    "\035\110\036\111\043\107\051\uffda\054\112\001\002\000" +
    "\022\036\103\040\076\045\104\046\102\055\100\060\077" +
    "\062\105\063\101\001\002\000\022\036\103\040\076\045" +
    "\104\046\102\055\100\060\077\062\105\063\101\001\002" +
    "\000\022\036\103\040\076\045\104\046\102\055\100\060" +
    "\077\062\105\063\101\001\002\000\022\036\103\040\076" +
    "\045\104\046\102\055\100\060\077\062\105\063\101\001" +
    "\002\000\016\035\uffd5\036\uffd5\043\uffd5\051\uffd5\054\uffd5" +
    "\061\uffd5\001\002\000\016\035\uffd7\036\uffd7\043\107\051" +
    "\uffd7\054\112\061\uffd7\001\002\000\016\035\uffd8\036\uffd8" +
    "\043\107\051\uffd8\054\112\061\uffd8\001\002\000\016\035" +
    "\uffd6\036\uffd6\043\uffd6\051\uffd6\054\uffd6\061\uffd6\001\002" +
    "\000\016\035\uffd2\036\uffd2\043\107\051\uffd2\054\112\061" +
    "\uffd2\001\002\000\014\035\110\036\111\043\107\054\112" +
    "\061\121\001\002\000\016\035\uffd9\036\uffd9\043\uffd9\051" +
    "\uffd9\054\uffd9\061\uffd9\001\002\000\036\004\ufff1\005\ufff1" +
    "\012\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\027" +
    "\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\042\ufff1\001\002" +
    "\000\022\036\103\040\076\045\104\046\102\055\100\060" +
    "\077\062\105\063\101\001\002\000\004\051\125\001\002" +
    "\000\036\004\ufff0\005\ufff0\012\ufff0\020\ufff0\021\ufff0\022" +
    "\ufff0\023\ufff0\024\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0" +
    "\033\ufff0\042\ufff0\001\002\000\022\036\103\040\076\045" +
    "\104\046\102\055\100\060\077\062\105\063\101\001\002" +
    "\000\004\051\130\001\002\000\036\004\ufff3\005\ufff3\012" +
    "\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\027\ufff3" +
    "\030\ufff3\031\ufff3\032\ufff3\033\ufff3\042\ufff3\001\002\000" +
    "\006\045\040\046\042\001\002\000\004\051\133\001\002" +
    "\000\036\004\uffeb\005\uffeb\012\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\042\uffeb\001\002\000\022\036\103\040\076\045" +
    "\104\046\102\055\100\060\077\062\105\063\101\001\002" +
    "\000\004\051\136\001\002\000\036\004\uffef\005\uffef\012" +
    "\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\027\uffef" +
    "\030\uffef\031\uffef\032\uffef\033\uffef\042\uffef\001\002\000" +
    "\022\036\103\040\076\045\104\046\102\055\100\060\077" +
    "\062\105\063\101\001\002\000\004\051\141\001\002\000" +
    "\036\004\uffea\005\uffea\012\uffea\020\uffea\021\uffea\022\uffea" +
    "\023\uffea\024\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033" +
    "\uffea\042\uffea\001\002\000\006\045\040\046\042\001\002" +
    "\000\004\051\144\001\002\000\036\004\uffed\005\uffed\012" +
    "\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\027\uffed" +
    "\030\uffed\031\uffed\032\uffed\033\uffed\042\uffed\001\002\000" +
    "\004\041\146\001\002\000\004\053\147\001\002\000\004" +
    "\034\150\001\002\000\004\055\151\001\002\000\004\034" +
    "\152\001\002\000\006\045\040\046\042\001\002\000\004" +
    "\042\154\001\002\000\004\051\155\001\002\000\036\004" +
    "\uffec\005\uffec\012\uffec\020\uffec\021\uffec\022\uffec\023\uffec" +
    "\024\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\042" +
    "\uffec\001\002\000\004\040\157\001\002\000\004\061\160" +
    "\001\002\000\004\051\161\001\002\000\036\004\026\005" +
    "\032\012\033\020\030\021\027\022\024\023\035\024\022" +
    "\027\021\030\025\031\023\032\ufff8\033\ufff8\042\ufff8\001" +
    "\002\000\036\004\026\005\032\012\033\020\030\021\027" +
    "\022\024\023\035\024\022\027\021\030\025\031\023\032" +
    "\ufffa\033\ufffa\042\ufffa\001\002\000\006\002\ufffd\040\ufffd" +
    "\001\002\000\010\032\ufffc\033\ufffc\042\ufffc\001\002\000" +
    "\004\002\001\001\002\000\006\002\uffff\040\uffff\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\010\002\005\003\003\004\004\001\001\000" +
    "\004\004\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\010\015\012\001\001\000" +
    "\004\015\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\033\007\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\052\012\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\074\017\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\115\001\001\000\004\017\114\001" +
    "\001\000\004\017\113\001\001\000\004\017\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\123\017\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\126" +
    "\017\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\134\017\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\137\017\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\161\007\030\001\001" +
    "\000\004\007\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoCCSS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoCCSS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoCCSS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }


// METODOS Y VARIABLES GLOBALES DEL PARSER, PUEDEN SER PUBLICAS O PRIVADAS

public void syntax_error(Symbol s){
/**Metodo al que se llama automaticamente ante algun error sintactico.*/
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
int linea = s.right+1; int columna = s.left; 
String texto = "Identificador " +s.value + " no reconocido.";

}            
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
/**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
        System.out.println("Error Sintactico no recuperable en la Linea " + (s.right+1)+ " Columna "+s.left+". Identificador " + s.value + " no reconocido.");
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoCCSS$actions {



  private final SintacticoCCSS parser;

  /** Constructor */
  CUP$SintacticoCCSS$actions(SintacticoCCSS parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoCCSS$do_action_part00000000(
    int                        CUP$SintacticoCCSS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoCCSS$parser,
    java.util.Stack            CUP$SintacticoCCSS$stack,
    int                        CUP$SintacticoCCSS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoCCSS$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoCCSS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Caracter start_val = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoCCSS$parser.done_parsing();
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCION 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
    ccss.NODO = i.nodo;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCION ::= INSTRUCCION BLOQUE 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoCCSS INSTRUCCION = new NodoCCSS("INSTRUCCION");
    INSTRUCCION.insertar(i.nodo); INSTRUCCION.insertar(n.nodo);
    RESULT.nodo = INSTRUCCION;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCION ::= BLOQUE 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
    NodoCCSS INSTRUCCION = new NodoCCSS("INSTRUCCION");
    RESULT = new Caracter();
    INSTRUCCION.insertar(n.nodo); 
    RESULT.nodo = INSTRUCCION;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLOQUE ::= id corcheteA OPCION corcheteC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
    RESULT = new Caracter();
    NodoCCSS E = new NodoCCSS("BLOQUE");
    E.insertar(new NodoCCSS(i,iright,ileft)); E.insertar(new NodoCCSS("[")); E.insertar(n.nodo); E.insertar(new NodoCCSS("]"));
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("BLOQUE",2, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OPCION ::= OPCION TIPO 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoCCSS E = new NodoCCSS("OPCION");
    E.insertar(i.nodo); E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("OPCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OPCION ::= TIPO 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
    NodoCCSS E = new NodoCCSS("OPCION");
    RESULT = new Caracter();
    E.insertar(n.nodo); 
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("OPCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPO ::= grupo parentesisA id parentesisC puntoComa ESTILOS 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoCCSS E = new NodoCCSS("TIPO");
    E.insertar(new NodoCCSS("grupo")); E.insertar(new NodoCCSS("(")); E.insertar(new NodoCCSS(i,iright,ileft)); E.insertar(new NodoCCSS(")")); 
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPO ::= idd parentesisA id parentesisC puntoComa ESTILOS 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoCCSS E = new NodoCCSS("TIPO");
    E.insertar(new NodoCCSS("id")); E.insertar(new NodoCCSS("(")); E.insertar(new NodoCCSS(i,iright,ileft)); E.insertar(new NodoCCSS(")")); 
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO ::= grupo parentesisA id parentesisC puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).value;
		
    RESULT = new Caracter();
    NodoCCSS E = new NodoCCSS("TIPO");
    E.insertar(new NodoCCSS("grupo")); E.insertar(new NodoCCSS("(")); E.insertar(new NodoCCSS(i,iright,ileft)); E.insertar(new NodoCCSS(")")); 
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO ::= idd parentesisA id parentesisC puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).value;
		
    RESULT = new Caracter();
    NodoCCSS E = new NodoCCSS("TIPO");
    E.insertar(new NodoCCSS("id")); E.insertar(new NodoCCSS("(")); E.insertar(new NodoCCSS(i,iright,ileft)); E.insertar(new NodoCCSS(")")); 
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ESTILOS ::= ESTILOS ESTILO 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoCCSS E = new NodoCCSS("ESTILOS");
    E.insertar(i.nodo); E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ESTILOS",4, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ESTILOS ::= ESTILO 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
    NodoCCSS E = new NodoCCSS("ESTILOS");
    RESULT = new Caracter();
    E.insertar(n.nodo); 
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ESTILOS",4, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ESTILO ::= alineado igual ALINEADO puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCCSS E = new NodoCCSS("ESTILO");
    E.insertar(new NodoCCSS("alineado",iright,ileft));E.insertar(new NodoCCSS("=")); E.insertar(v.nodo); E.insertar(new NodoCCSS(";"));
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ESTILO",5, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ESTILO ::= texto igual OP puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCCSS E = new NodoCCSS("ESTILO");
    E.insertar(new NodoCCSS("texto",iright,ileft));E.insertar(new NodoCCSS("=")); E.insertar(n.nodo); E.insertar(new NodoCCSS(";"));
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ESTILO",5, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ESTILO ::= formato igual FORMATOS puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCCSS E = new NodoCCSS("ESTILO");
    E.insertar(new NodoCCSS("formato",iright,ileft));E.insertar(new NodoCCSS("=")); E.insertar(v.nodo); E.insertar(new NodoCCSS(";"));
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ESTILO",5, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ESTILO ::= letra igual OP puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCCSS E = new NodoCCSS("ESTILO");
    E.insertar(new NodoCCSS("letra",iright,ileft));E.insertar(new NodoCCSS("="));E.insertar(n.nodo);E.insertar(new NodoCCSS(";"));
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ESTILO",5, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ESTILO ::= tamtex igual OP puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCCSS E = new NodoCCSS("ESTILO");
    E.insertar(new NodoCCSS("tamtex",iright,ileft));E.insertar(new NodoCCSS("=")); E.insertar(n.nodo); E.insertar(new NodoCCSS(";"));
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ESTILO",5, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ESTILO ::= fondo igual OP puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCCSS E = new NodoCCSS("ESTILO");
    E.insertar(new NodoCCSS("fondo",iright,ileft));E.insertar(new NodoCCSS("="));E.insertar(n.nodo); E.insertar(new NodoCCSS(";"));
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ESTILO",5, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ESTILO ::= auto igual corcheteA VALOR coma AREA corcheteC puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-7)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-4)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).value;
		 //8
    RESULT = new Caracter();
    NodoCCSS E = new NodoCCSS("ESTILO");
    E.insertar(new NodoCCSS("auto",iright,ileft));E.insertar(new NodoCCSS("=")); E.insertar(new NodoCCSS("[")); E.insertar(v.nodo);E.insertar(new NodoCCSS(","));
    E.insertar(a.nodo);  E.insertar(new NodoCCSS("]")); E.insertar(new NodoCCSS(";"));
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ESTILO",5, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ESTILO ::= visible igual VALOR puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCCSS E = new NodoCCSS("ESTILO");
    E.insertar(new NodoCCSS("visible",iright,ileft));E.insertar(new NodoCCSS("=")); E.insertar(v.nodo); E.insertar(new NodoCCSS(";"));
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ESTILO",5, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ESTILO ::= borde igual corcheteA numero coma cadena coma VALOR corcheteC puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-9)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-6)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).value;
		 //10
    RESULT = new Caracter();
    NodoCCSS E = new NodoCCSS("ESTILO");
    E.insertar(new NodoCCSS("borde",iright,ileft));E.insertar(new NodoCCSS("=")); E.insertar(new NodoCCSS("[")); E.insertar(new NodoCCSS(n,nright,nleft));E.insertar(new NodoCCSS(","));
    E.insertar(new NodoCCSS(c));  E.insertar(new NodoCCSS(","));  E.insertar(v.nodo);  E.insertar(new NodoCCSS("]")); E.insertar(new NodoCCSS(";"));
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ESTILO",5, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ESTILO ::= opaque igual VALOR puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCCSS E = new NodoCCSS("ESTILO");
    E.insertar(new NodoCCSS("opaque",iright,ileft));E.insertar(new NodoCCSS("=")); E.insertar(v.nodo); E.insertar(new NodoCCSS(";"));
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ESTILO",5, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ESTILO ::= colortext igual OP puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCCSS E = new NodoCCSS("ESTILO");
    E.insertar(new NodoCCSS("colortext",iright,ileft));E.insertar(new NodoCCSS("=")); E.insertar(n.nodo); E.insertar(new NodoCCSS(";"));
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ESTILO",5, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ALINEADO ::= izquierda 
            {
              Caracter RESULT =null;
		
    NodoCCSS E = new NodoCCSS("ALINEADO");
    RESULT = new Caracter();
    E.insertar(new NodoCCSS("izquierda"));
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ALINEADO",6, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ALINEADO ::= derecha 
            {
              Caracter RESULT =null;
		
    NodoCCSS E = new NodoCCSS("ALINEADO");
    RESULT = new Caracter();
    E.insertar(new NodoCCSS("derecha"));
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ALINEADO",6, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ALINEADO ::= centrado 
            {
              Caracter RESULT =null;
		
    NodoCCSS E = new NodoCCSS("ALINEADO");
    RESULT = new Caracter();
    E.insertar(new NodoCCSS("centrado"));
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ALINEADO",6, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ALINEADO ::= justificado 
            {
              Caracter RESULT =null;
		
    NodoCCSS E = new NodoCCSS("ALINEADO");
    RESULT = new Caracter();
    E.insertar(new NodoCCSS("justificado"));
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ALINEADO",6, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FORMATOS ::= FORMATOS coma FORMATO 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoCCSS E = new NodoCCSS("FORMATOS");
    E.insertar(i.nodo);E.insertar(new NodoCCSS(",")); E.insertar(n.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("FORMATOS",7, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FORMATOS ::= FORMATO 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
    NodoCCSS E = new NodoCCSS("FORMATOS");
    RESULT = new Caracter();
    E.insertar(n.nodo); 
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("FORMATOS",7, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FORMATO ::= negrilla 
            {
              Caracter RESULT =null;
		
    NodoCCSS E = new NodoCCSS("FORMATO");
    RESULT = new Caracter();
    E.insertar(new NodoCCSS("negrilla"));
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("FORMATO",8, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FORMATO ::= cursiva 
            {
              Caracter RESULT =null;
		
    NodoCCSS E = new NodoCCSS("FORMATO");
    RESULT = new Caracter();
    E.insertar(new NodoCCSS("cursiva"));
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("FORMATO",8, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FORMATO ::= mayuscula 
            {
              Caracter RESULT =null;
		
    NodoCCSS E = new NodoCCSS("FORMATO");
    RESULT = new Caracter();
    E.insertar(new NodoCCSS("mayuscula"));
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("FORMATO",8, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FORMATO ::= minuscula 
            {
              Caracter RESULT =null;
		
    NodoCCSS E = new NodoCCSS("FORMATO");
    RESULT = new Caracter();
    E.insertar(new NodoCCSS("minuscula"));
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("FORMATO",8, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FORMATO ::= capital 
            {
              Caracter RESULT =null;
		
    NodoCCSS E = new NodoCCSS("FORMATO");
    RESULT = new Caracter();
    E.insertar(new NodoCCSS("capital"));
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("FORMATO",8, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VALOR ::= falso 
            {
              Caracter RESULT =null;
		
    NodoCCSS E = new NodoCCSS("VALOR");
    RESULT = new Caracter();
    E.insertar(new NodoCCSS("falso"));
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VALOR ::= verdadero 
            {
              Caracter RESULT =null;
		
    NodoCCSS E = new NodoCCSS("VALOR");
    RESULT = new Caracter();
    E.insertar(new NodoCCSS("verdadero"));
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AREA ::= horizontal 
            {
              Caracter RESULT =null;
		
    NodoCCSS E = new NodoCCSS("AREA");
    RESULT = new Caracter();
    E.insertar(new NodoCCSS("horizontal"));
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("AREA",10, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AREA ::= vertical 
            {
              Caracter RESULT =null;
		
    NodoCCSS E = new NodoCCSS("AREA");
    RESULT = new Caracter();
    E.insertar(new NodoCCSS("vertical"));
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("AREA",10, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OP ::= E 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
    NodoCCSS OP = new NodoCCSS("OP");
    RESULT = new Caracter();
    OP.insertar(e.nodo);
    RESULT.nodo = OP;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("OP",12, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E ::= parentesisA E parentesisC 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
    NodoCCSS E = new NodoCCSS("E");
    RESULT = new Caracter();
    E.insertar(new NodoCCSS("(")); E.insertar(a.nodo); E.insertar(new NodoCCSS(")"));
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E ::= E mas E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		 
    NodoCCSS E = new NodoCCSS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCCSS("+",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E ::= E menos E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
    NodoCCSS E = new NodoCCSS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCCSS("-",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E ::= E por E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		 
    NodoCCSS E = new NodoCCSS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCCSS("*",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E ::= E dividido E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		 
    NodoCCSS E = new NodoCCSS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCCSS("/",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E ::= verdadero 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
    NodoCCSS E = new NodoCCSS("E");
    RESULT = new Caracter();
    E.insertar(new NodoCCSS("verdadero","bool",iright,ileft));
    RESULT.nodo = E;
 
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E ::= falso 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
    NodoCCSS E = new NodoCCSS("E");
    RESULT = new Caracter();
    E.insertar(new NodoCCSS("falso","bool",iright,ileft));
    RESULT.nodo = E;
 
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E ::= menos E 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
    NodoCCSS E = new NodoCCSS("E");
    RESULT = new Caracter();
    E.insertar(new NodoCCSS("-",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E ::= cadena 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
    RESULT = new Caracter();
    n = n.replace("\"","");
    NodoCCSS E = new NodoCCSS("E");
    E.insertar(new NodoCCSS(n,"cadena",nright,nleft));
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E ::= entero 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoCCSS E = new NodoCCSS("E");
    E.insertar(new NodoCCSS(n,"entero",nright,nleft));
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E ::= decimal 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoCCSS E = new NodoCCSS("E");
    E.insertar(new NodoCCSS(n,"decimal",nright,nleft));
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E ::= id 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoCCSS E = new NodoCCSS("E");
    E.insertar(new NodoCCSS(i,"id",iright,ileft));
    RESULT.nodo = E;

              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoCCSS$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoCCSS$do_action(
    int                        CUP$SintacticoCCSS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoCCSS$parser,
    java.util.Stack            CUP$SintacticoCCSS$stack,
    int                        CUP$SintacticoCCSS$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoCCSS$do_action_part00000000(
                               CUP$SintacticoCCSS$act_num,
                               CUP$SintacticoCCSS$parser,
                               CUP$SintacticoCCSS$stack,
                               CUP$SintacticoCCSS$top);
    }
}

}
