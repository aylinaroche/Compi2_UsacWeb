/* The following code was generated by JFlex 1.6.1 */

package chtml;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Aroche/Documents/NetBeansProjects/UsacWeb/src/chtml/LexicoCHTML.jflex</tt>
 */
public class LexicoCHTML implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\23\1\5\1\0\1\0\1\5\22\0\1\23\1\0\1\3"+
    "\4\0\1\0\1\50\1\51\3\0\1\27\1\54\1\7\1\2\11\2"+
    "\1\0\1\52\1\6\1\53\1\10\2\0\1\31\1\32\1\24\1\34"+
    "\1\30\1\11\1\46\1\25\1\13\1\35\1\45\1\17\1\26\1\14"+
    "\1\20\1\41\1\1\1\40\1\37\1\15\1\16\1\47\1\1\1\43"+
    "\1\1\1\33\1\0\1\0\2\0\1\42\1\0\1\31\1\32\1\24"+
    "\1\34\1\30\1\11\1\46\1\25\1\13\1\35\1\45\1\17\1\26"+
    "\1\14\1\20\1\41\1\1\1\40\1\37\1\15\1\16\1\47\1\1"+
    "\1\43\1\1\1\33\1\0\1\4\10\0\1\0\73\0\1\1\7\0"+
    "\1\1\3\0\1\1\5\0\1\1\6\0\1\1\6\0\1\1\7\0"+
    "\1\1\3\0\1\1\5\0\1\1\6\0\1\1\65\0\2\12\115\0"+
    "\1\36\u1e9c\0\1\21\1\22\12\0\1\0\1\0\u0100\0\1\44\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\2\1\1\1\2\1\1\1\4\5\2\1\7\1\10"+
    "\1\11\1\12\5\0\1\13\14\0\1\2\2\14\3\0"+
    "\1\13\7\2\1\0\1\15\1\0\1\13\25\0\1\2"+
    "\3\0\1\2\1\0\2\2\1\0\5\2\16\0\1\16"+
    "\4\0\1\17\1\20\6\0\1\2\4\0\1\2\2\21"+
    "\1\2\1\0\1\2\1\22\1\23\2\2\21\0\1\24"+
    "\10\0\1\25\2\0\2\26\1\27\1\0\1\2\1\30"+
    "\1\31\33\0\1\32\12\0\1\2\2\0\1\33\2\0"+
    "\1\33\23\0\1\34\1\35\1\0\1\36\1\0\1\37"+
    "\1\40\1\41\1\42\3\0\1\43\2\0\1\44\3\0"+
    "\1\2\2\0\1\33\11\0\1\45\4\0\1\46\6\0"+
    "\1\47\2\0\1\50\5\0\2\51\17\0\1\52\5\0"+
    "\1\53\3\0\1\54\16\0\1\55\1\0\1\56\17\0"+
    "\1\57\1\60\2\0\1\61\1\0\1\62\2\0\1\63"+
    "\3\0\1\64\1\0\1\65\2\0\1\66\2\0\2\57"+
    "\2\0\1\67\1\70\1\0\1\71\1\72\1\0\1\73"+
    "\2\0\1\74\1\75\1\0\1\57\2\0\1\76\2\0"+
    "\1\77\1\57\1\0\1\57\2\0\1\57\2\0\1\100"+
    "\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[403];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\341\0\u010e"+
    "\0\55\0\u013b\0\u0168\0\u0195\0\u01c2\0\55\0\u01ef\0\u021c"+
    "\0\u0249\0\u0276\0\u02a3\0\55\0\55\0\55\0\55\0\55"+
    "\0\341\0\u02d0\0\u02fd\0\264\0\341\0\u032a\0\u0357\0\u0384"+
    "\0\u03b1\0\u03de\0\u040b\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec"+
    "\0\u0519\0\u0546\0\55\0\132\0\u01c2\0\u0573\0\u05a0\0\u01c2"+
    "\0\u05cd\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708"+
    "\0\u02fd\0\u0735\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843"+
    "\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e\0\u09ab"+
    "\0\u09d8\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13"+
    "\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b"+
    "\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\u0de3"+
    "\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b"+
    "\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\55\0\u102c\0\u1059\0\u1086"+
    "\0\u10b3\0\55\0\55\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194"+
    "\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u1275\0\u12a2\0\u12cf\0\55"+
    "\0\132\0\u12fc\0\u1329\0\u1356\0\132\0\132\0\u1383\0\u13b0"+
    "\0\u13dd\0\u140a\0\u1437\0\u1464\0\u1491\0\u14be\0\u14eb\0\u1518"+
    "\0\u1545\0\u1572\0\u159f\0\u15cc\0\u15f9\0\u1626\0\u1653\0\u1680"+
    "\0\u16ad\0\55\0\u16da\0\u1707\0\u1734\0\u1761\0\u178e\0\u17bb"+
    "\0\u17e8\0\u1815\0\132\0\u1842\0\u186f\0\55\0\132\0\132"+
    "\0\u189c\0\u18c9\0\132\0\132\0\u18f6\0\u1923\0\u1950\0\u197d"+
    "\0\u19aa\0\u19d7\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5"+
    "\0\u1b12\0\u1b3f\0\u1b6c\0\u1b99\0\u1bc6\0\u1bf3\0\u1c20\0\u1c4d"+
    "\0\u1c7a\0\u1ca7\0\u1cd4\0\u1d01\0\u1d2e\0\u1d5b\0\u1d88\0\55"+
    "\0\u1db5\0\u1de2\0\u1e0f\0\u1e3c\0\u1e69\0\u1e96\0\u1ec3\0\u1ef0"+
    "\0\u1f1d\0\u1f4a\0\u1f77\0\u1fa4\0\u1fd1\0\55\0\u1ffe\0\u202b"+
    "\0\341\0\u2058\0\u2085\0\u20b2\0\u20df\0\u210c\0\u2139\0\u2166"+
    "\0\u2193\0\u21c0\0\u21ed\0\u221a\0\u2247\0\u2274\0\u22a1\0\u22ce"+
    "\0\u22fb\0\u2328\0\u2355\0\u2382\0\55\0\55\0\u23af\0\55"+
    "\0\u23dc\0\55\0\55\0\55\0\55\0\u2409\0\u2436\0\u2463"+
    "\0\55\0\u2490\0\u24bd\0\55\0\u24ea\0\u2517\0\u2544\0\u2571"+
    "\0\u259e\0\u25cb\0\u0762\0\u25f8\0\u2625\0\u2652\0\u267f\0\u26ac"+
    "\0\u26d9\0\u2706\0\u2733\0\u2760\0\55\0\u278d\0\u27ba\0\u27e7"+
    "\0\u2814\0\55\0\u2841\0\u286e\0\u289b\0\u28c8\0\u28f5\0\u2922"+
    "\0\55\0\u294f\0\u297c\0\55\0\u29a9\0\u29d6\0\u2a03\0\u2a30"+
    "\0\u2a5d\0\55\0\132\0\u2a8a\0\u2ab7\0\u2ae4\0\u2b11\0\u2b3e"+
    "\0\u2b6b\0\u2b98\0\u2bc5\0\u2bf2\0\u2c1f\0\u2c4c\0\u2c79\0\u2ca6"+
    "\0\u2cd3\0\u2d00\0\55\0\u2d2d\0\u2d5a\0\u2d87\0\u2db4\0\u2de1"+
    "\0\55\0\u2e0e\0\u2e3b\0\u2e68\0\55\0\u2e95\0\u2ec2\0\u2eef"+
    "\0\u2f1c\0\u2f49\0\u2f76\0\u2fa3\0\u2fd0\0\u2ffd\0\u302a\0\u3057"+
    "\0\u3084\0\u30b1\0\u30de\0\55\0\u310b\0\55\0\u3138\0\u3165"+
    "\0\u3192\0\u31bf\0\u31ec\0\u3219\0\u3246\0\u3273\0\u32a0\0\u32cd"+
    "\0\u32fa\0\u3327\0\u3354\0\u3381\0\u33ae\0\55\0\55\0\u33db"+
    "\0\u3408\0\55\0\u3435\0\55\0\u3462\0\u348f\0\55\0\u34bc"+
    "\0\u34e9\0\u3516\0\55\0\u3543\0\55\0\u3570\0\u359d\0\55"+
    "\0\u35ca\0\u35f7\0\u0735\0\u0762\0\u3624\0\u3651\0\55\0\55"+
    "\0\u367e\0\55\0\55\0\u36ab\0\55\0\u36d8\0\u3705\0\55"+
    "\0\55\0\u3732\0\u01c2\0\u375f\0\u378c\0\55\0\u37b9\0\u37e6"+
    "\0\55\0\u121b\0\u3813\0\u0e3d\0\u3840\0\u386d\0\u197d\0\u389a"+
    "\0\u38c7\0\55\0\55";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[403];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\14\5\3\2\15\1\16\1\17"+
    "\2\3\1\2\1\3\1\20\4\3\1\2\1\3\1\21"+
    "\3\3\1\2\1\3\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\2\3\30\3\31\1\32\47\30\2\3\3\31"+
    "\1\32\2\30\1\3\1\30\6\3\3\30\3\3\1\30"+
    "\6\3\1\30\5\3\1\30\3\3\7\30\1\4\3\31"+
    "\1\32\45\30\1\33\3\34\1\35\2\34\1\36\46\34"+
    "\6\31\1\37\46\31\3\30\3\31\1\32\1\40\1\30"+
    "\1\41\2\42\1\30\1\43\2\30\1\44\3\30\1\45"+
    "\3\30\1\46\1\30\1\47\3\30\2\50\1\30\1\51"+
    "\14\30\2\3\3\31\1\32\2\30\1\3\1\30\5\3"+
    "\1\52\3\30\3\3\1\30\6\3\1\30\5\3\1\30"+
    "\3\3\10\30\3\31\1\32\25\30\1\53\21\30\2\3"+
    "\3\31\1\32\2\30\1\3\1\30\6\3\3\30\3\3"+
    "\1\30\4\3\1\54\1\3\1\30\5\3\1\30\3\3"+
    "\5\30\3\55\3\56\1\57\13\55\1\60\32\55\1\30"+
    "\2\3\3\31\1\32\2\30\1\3\1\30\4\3\1\61"+
    "\1\3\3\30\1\62\2\3\1\30\6\3\1\30\5\3"+
    "\1\30\3\3\6\30\2\3\3\31\1\32\2\30\1\3"+
    "\1\30\1\3\1\63\2\3\1\64\1\3\3\30\3\3"+
    "\1\30\6\3\1\30\5\3\1\30\3\3\6\30\2\3"+
    "\3\31\1\32\2\30\1\3\1\30\3\3\1\65\2\3"+
    "\3\30\3\3\1\30\6\3\1\30\5\3\1\30\3\3"+
    "\6\30\2\3\3\31\1\32\2\30\1\3\1\30\6\3"+
    "\3\30\3\3\1\30\6\3\1\30\1\3\1\66\3\3"+
    "\1\30\3\3\6\30\2\3\3\31\1\32\2\30\1\3"+
    "\1\30\6\3\3\30\3\3\1\30\1\3\1\67\4\3"+
    "\1\30\5\3\1\30\3\3\10\30\3\31\1\32\2\30"+
    "\1\70\45\30\1\71\3\31\1\32\46\30\3\72\1\73"+
    "\5\72\1\74\43\72\11\0\1\75\43\0\3\30\3\31"+
    "\1\32\1\76\50\30\3\31\1\32\3\30\2\77\44\30"+
    "\3\31\1\32\17\30\1\100\31\30\3\31\1\32\3\30"+
    "\2\101\14\30\1\102\1\103\26\30\3\31\1\32\32\30"+
    "\1\104\16\30\3\31\1\32\6\30\1\105\1\106\5\30"+
    "\1\107\1\110\3\30\1\111\1\112\2\30\1\113\22\30"+
    "\3\31\1\32\5\30\1\114\43\30\3\31\1\32\11\30"+
    "\1\115\37\30\3\31\1\32\22\30\1\116\7\30\1\117"+
    "\16\30\3\31\1\32\22\30\1\120\24\30\2\3\3\31"+
    "\1\32\2\30\1\3\1\30\1\3\1\121\4\3\3\30"+
    "\3\3\1\30\6\3\1\30\5\3\1\30\3\3\5\30"+
    "\6\56\1\122\13\56\1\35\32\56\3\55\3\56\1\57"+
    "\2\55\1\123\10\55\1\60\32\55\1\30\2\3\3\31"+
    "\1\32\2\30\1\3\1\124\1\125\5\3\3\30\3\3"+
    "\1\30\6\3\1\30\5\3\1\30\3\3\6\30\2\3"+
    "\3\31\1\32\2\30\1\3\1\30\6\3\3\30\3\3"+
    "\1\30\6\3\1\126\1\127\4\3\1\30\3\3\6\30"+
    "\2\3\3\31\1\32\2\30\1\3\1\30\6\3\3\30"+
    "\1\130\2\3\1\30\6\3\1\30\5\3\1\30\3\3"+
    "\6\30\2\3\3\31\1\32\2\30\1\3\1\131\1\132"+
    "\1\3\1\133\3\3\3\30\3\3\1\30\6\3\1\30"+
    "\5\3\1\30\3\3\6\30\2\3\3\31\1\32\2\30"+
    "\1\3\1\30\2\3\1\134\3\3\3\30\3\3\1\30"+
    "\6\3\1\30\5\3\1\30\3\3\6\30\2\3\3\31"+
    "\1\32\2\30\1\3\1\30\3\3\1\135\2\3\3\30"+
    "\3\3\1\30\6\3\1\30\5\3\1\30\3\3\6\30"+
    "\2\3\3\31\1\32\2\30\1\3\1\30\4\3\1\136"+
    "\1\3\3\30\3\3\1\30\6\3\1\30\5\3\1\30"+
    "\3\3\10\30\3\31\1\32\3\30\2\137\41\30\3\72"+
    "\1\73\51\72\55\0\3\72\1\73\6\72\2\140\41\72"+
    "\12\0\2\141\41\0\3\142\3\143\1\144\1\145\45\142"+
    "\3\30\3\31\1\32\5\30\1\146\2\30\1\147\40\30"+
    "\3\31\1\32\22\30\1\150\26\30\3\31\1\32\6\30"+
    "\1\151\42\30\3\31\1\32\34\30\1\152\14\30\3\31"+
    "\1\32\23\30\1\153\25\30\3\31\1\32\15\30\1\154"+
    "\33\30\3\31\1\32\1\30\1\155\47\30\3\31\1\32"+
    "\21\30\1\156\27\30\3\31\1\32\27\30\2\157\20\30"+
    "\3\31\1\32\6\30\1\160\42\30\3\31\1\32\26\30"+
    "\1\161\22\30\3\31\1\32\1\30\1\162\47\30\3\31"+
    "\1\32\27\30\2\163\20\30\3\31\1\32\10\30\1\164"+
    "\4\30\1\165\33\30\3\31\1\32\6\30\1\166\42\30"+
    "\3\31\1\32\10\30\1\167\40\30\3\31\1\32\3\30"+
    "\2\170\44\30\3\31\1\32\5\30\1\171\41\30\2\3"+
    "\3\31\1\32\2\30\1\3\1\30\6\3\3\30\3\3"+
    "\1\30\4\3\1\172\1\3\1\30\5\3\1\30\3\3"+
    "\5\30\11\173\1\174\10\173\1\73\32\173\3\55\3\56"+
    "\1\57\3\55\2\175\6\55\1\60\32\55\3\30\3\31"+
    "\1\32\15\30\1\176\31\30\2\3\3\31\1\32\2\30"+
    "\1\3\1\30\6\3\3\30\1\177\2\3\1\30\6\3"+
    "\1\30\5\3\1\30\3\3\10\30\3\31\1\32\27\30"+
    "\2\200\16\30\2\3\3\31\1\32\2\30\1\3\1\30"+
    "\6\3\3\30\3\3\1\30\6\3\1\200\1\201\4\3"+
    "\1\30\3\3\6\30\2\3\3\31\1\32\2\30\1\3"+
    "\1\30\6\3\3\30\1\3\1\202\1\3\1\30\6\3"+
    "\1\30\5\3\1\30\3\3\10\30\3\31\1\32\5\30"+
    "\1\203\41\30\2\3\3\31\1\32\2\30\1\3\1\30"+
    "\1\3\1\204\4\3\3\30\3\3\1\30\6\3\1\30"+
    "\5\3\1\30\3\3\6\30\2\3\3\31\1\32\2\30"+
    "\1\3\1\30\5\3\1\205\3\30\3\3\1\30\6\3"+
    "\1\30\5\3\1\30\3\3\6\30\2\3\3\31\1\32"+
    "\2\30\1\3\1\30\6\3\3\30\3\3\1\30\1\3"+
    "\1\206\4\3\1\30\5\3\1\30\3\3\6\30\2\3"+
    "\3\31\1\32\2\30\1\3\1\30\6\3\3\30\3\3"+
    "\1\30\6\3\1\30\2\3\1\207\2\3\1\30\3\3"+
    "\6\30\2\3\3\31\1\32\2\30\1\3\1\30\5\3"+
    "\1\210\3\30\3\3\1\30\6\3\1\30\5\3\1\30"+
    "\3\3\10\30\3\31\1\32\5\30\1\211\40\30\3\72"+
    "\1\73\10\72\1\212\40\72\14\0\1\213\40\0\3\142"+
    "\3\143\1\144\1\214\45\142\6\143\1\215\1\216\45\143"+
    "\3\142\3\143\1\144\1\214\1\142\1\217\43\142\3\30"+
    "\3\31\1\32\1\220\50\30\3\31\1\32\6\30\1\221"+
    "\11\30\1\222\30\30\3\31\1\32\33\30\1\223\15\30"+
    "\3\31\1\32\37\30\1\224\11\30\3\31\1\32\7\30"+
    "\1\225\41\30\3\31\1\32\6\30\1\226\42\30\3\31"+
    "\1\32\10\30\1\227\40\30\3\31\1\32\3\30\2\230"+
    "\44\30\3\31\1\32\31\30\1\231\17\30\3\31\1\32"+
    "\27\30\2\232\20\30\3\31\1\32\17\30\1\233\31\30"+
    "\3\31\1\32\22\30\1\234\26\30\3\31\1\32\22\30"+
    "\1\235\26\30\3\31\1\32\22\30\1\236\26\30\3\31"+
    "\1\32\11\30\1\237\37\30\3\31\1\32\6\30\1\240"+
    "\42\30\3\31\1\32\5\30\1\241\43\30\3\31\1\32"+
    "\21\30\1\242\25\30\2\3\3\31\1\32\2\30\1\3"+
    "\1\30\5\3\1\243\3\30\3\3\1\30\6\3\1\30"+
    "\5\3\1\30\3\3\5\30\22\173\1\73\44\173\2\244"+
    "\6\173\1\73\32\173\3\55\3\56\1\57\5\55\1\245"+
    "\5\55\1\60\32\55\3\30\3\31\1\32\35\30\2\246"+
    "\10\30\2\3\3\31\1\32\2\30\1\3\1\30\6\3"+
    "\3\30\3\3\1\30\6\3\1\30\5\3\1\246\1\247"+
    "\2\3\6\30\2\3\3\31\1\32\2\30\1\3\1\30"+
    "\5\3\1\250\3\30\3\3\1\30\6\3\1\30\5\3"+
    "\1\30\3\3\10\30\3\31\1\32\21\30\1\251\25\30"+
    "\2\3\3\31\1\32\2\30\1\3\1\30\6\3\3\30"+
    "\3\3\1\30\1\252\5\3\1\30\5\3\1\30\3\3"+
    "\6\30\2\3\3\31\1\32\2\30\1\3\1\30\5\3"+
    "\1\253\3\30\3\3\1\30\6\3\1\30\5\3\1\30"+
    "\3\3\6\30\2\3\3\31\1\32\2\30\1\3\1\30"+
    "\6\3\3\30\3\3\1\30\6\3\1\30\1\3\1\254"+
    "\3\3\1\30\3\3\10\30\3\31\1\32\6\30\1\221"+
    "\37\30\3\72\1\73\11\72\1\255\37\72\15\0\1\256"+
    "\37\0\3\142\3\143\1\144\1\257\45\142\7\260\1\261"+
    "\1\260\1\262\43\260\6\143\1\215\1\263\45\143\3\142"+
    "\3\143\1\144\1\214\2\142\2\264\41\142\3\30\3\31"+
    "\1\32\1\265\50\30\3\31\1\32\3\30\2\266\44\30"+
    "\3\31\1\32\2\30\1\267\2\270\1\30\1\271\2\30"+
    "\1\272\3\30\1\273\3\30\1\274\1\30\1\275\3\30"+
    "\2\276\1\30\1\277\16\30\3\31\1\32\6\30\1\300"+
    "\42\30\3\31\1\32\21\30\1\301\27\30\3\31\1\32"+
    "\10\30\1\302\40\30\3\31\1\32\11\30\1\303\37\30"+
    "\3\31\1\32\22\30\1\304\26\30\3\31\1\32\11\30"+
    "\1\305\37\30\3\31\1\32\32\30\1\306\16\30\3\31"+
    "\1\32\10\30\1\307\40\30\3\31\1\32\1\30\1\310"+
    "\31\30\1\311\15\30\3\31\1\32\15\30\1\312\33\30"+
    "\3\31\1\32\23\30\1\313\25\30\3\31\1\32\5\30"+
    "\1\314\43\30\3\31\1\32\11\30\1\315\37\30\3\31"+
    "\1\32\5\30\1\316\43\30\3\31\1\32\10\30\1\317"+
    "\35\30\14\173\1\320\5\173\1\73\32\173\3\55\3\56"+
    "\1\57\6\55\1\321\4\55\1\60\32\55\3\30\3\31"+
    "\1\32\22\30\1\322\24\30\2\3\3\31\1\32\2\30"+
    "\1\3\1\30\6\3\3\30\3\3\1\30\1\3\1\323"+
    "\4\3\1\30\5\3\1\30\3\3\5\30\3\72\1\73"+
    "\6\72\2\324\41\72\12\0\2\325\41\0\3\142\3\143"+
    "\1\144\1\257\1\326\44\142\7\260\1\261\54\260\1\327"+
    "\54\260\1\261\2\260\2\330\41\260\6\143\1\215\1\263"+
    "\1\331\44\143\3\142\3\143\1\144\1\214\4\142\1\332"+
    "\40\142\3\30\3\31\1\32\1\265\1\326\47\30\3\31"+
    "\1\32\6\30\1\333\42\30\3\31\1\32\3\30\2\334"+
    "\44\30\3\31\1\32\17\30\1\335\31\30\3\31\1\32"+
    "\3\30\2\336\14\30\1\337\1\340\26\30\3\31\1\32"+
    "\32\30\1\341\16\30\3\31\1\32\6\30\1\342\1\343"+
    "\5\30\1\344\1\345\3\30\1\346\1\347\2\30\1\350"+
    "\22\30\3\31\1\32\5\30\1\351\43\30\3\31\1\32"+
    "\11\30\1\352\37\30\3\31\1\32\32\30\1\353\16\30"+
    "\3\31\1\32\22\30\1\354\26\30\3\31\1\32\1\30"+
    "\1\355\47\30\3\31\1\32\5\30\1\356\43\30\3\31"+
    "\1\32\11\30\1\357\37\30\3\31\1\32\1\30\1\360"+
    "\31\30\1\361\15\30\3\31\1\32\1\30\1\362\47\30"+
    "\3\31\1\32\5\30\1\363\43\30\3\31\1\32\11\30"+
    "\1\364\37\30\3\31\1\32\1\30\1\365\47\30\3\31"+
    "\1\32\6\30\1\366\42\30\3\31\1\32\21\30\1\367"+
    "\27\30\3\31\1\32\21\30\1\370\27\30\3\31\1\32"+
    "\1\30\1\371\47\30\3\31\1\32\20\30\1\372\30\30"+
    "\3\31\1\32\21\30\1\373\27\30\3\31\1\32\1\30"+
    "\1\374\44\30\15\173\1\375\4\173\1\73\32\173\3\55"+
    "\3\56\1\57\3\55\2\376\6\55\1\60\32\55\3\30"+
    "\3\31\1\32\25\30\1\377\21\30\2\3\3\31\1\32"+
    "\2\30\1\3\1\30\6\3\3\30\3\3\1\30\4\3"+
    "\1\u0100\1\3\1\30\5\3\1\30\3\3\5\30\3\72"+
    "\1\73\11\72\1\u0101\37\72\15\0\1\u0102\37\0\7\260"+
    "\1\327\1\u0103\53\260\1\261\4\260\1\u0104\40\260\3\142"+
    "\3\143\1\144\1\214\5\142\1\u0105\37\142\3\30\3\31"+
    "\1\32\7\30\1\u0106\41\30\3\31\1\32\10\30\1\u0107"+
    "\40\30\3\31\1\32\22\30\1\u0108\26\30\3\31\1\32"+
    "\6\30\1\u0109\42\30\3\31\1\32\34\30\1\u010a\14\30"+
    "\3\31\1\32\23\30\1\u010b\25\30\3\31\1\32\15\30"+
    "\1\u010c\33\30\3\31\1\32\1\30\1\u010d\47\30\3\31"+
    "\1\32\21\30\1\u010e\27\30\3\31\1\32\27\30\2\u010f"+
    "\20\30\3\31\1\32\6\30\1\u0110\42\30\3\31\1\32"+
    "\26\30\1\u0111\22\30\3\31\1\32\1\30\1\u0112\47\30"+
    "\3\31\1\32\27\30\2\u0113\20\30\3\31\1\32\10\30"+
    "\1\u0114\4\30\1\u0115\33\30\3\31\1\32\6\30\1\u0116"+
    "\42\30\3\31\1\32\3\30\2\u0117\44\30\3\31\1\32"+
    "\5\30\1\u0118\43\30\3\31\1\32\1\30\1\u0119\47\30"+
    "\3\31\1\32\22\30\1\u011a\26\30\3\31\1\32\21\30"+
    "\1\u011b\27\30\3\31\1\32\1\30\1\u011c\47\30\3\31"+
    "\1\32\24\30\1\u011d\24\30\3\31\1\32\2\30\1\u011e"+
    "\46\30\3\31\1\32\31\30\1\u011f\14\30\12\173\2\u0120"+
    "\6\173\1\73\32\173\3\55\3\56\1\57\6\55\1\u0121"+
    "\4\55\1\60\32\55\3\30\3\31\1\32\11\30\1\u0122"+
    "\35\30\2\3\3\31\1\32\2\30\1\3\1\30\5\3"+
    "\1\u0123\3\30\3\3\1\30\6\3\1\30\5\3\1\30"+
    "\3\3\5\30\3\72\1\73\12\72\1\u0124\36\72\16\0"+
    "\1\u0125\36\0\7\260\1\261\5\260\1\u0126\37\260\3\142"+
    "\3\143\1\144\1\214\2\142\2\u0127\41\142\3\30\3\31"+
    "\1\32\10\30\1\u0128\40\30\3\31\1\32\33\30\1\u0129"+
    "\15\30\3\31\1\32\37\30\1\u012a\11\30\3\31\1\32"+
    "\7\30\1\u012b\41\30\3\31\1\32\6\30\1\u012c\42\30"+
    "\3\31\1\32\10\30\1\u012d\40\30\3\31\1\32\3\30"+
    "\2\u012e\44\30\3\31\1\32\31\30\1\u012f\17\30\3\31"+
    "\1\32\27\30\2\u0130\20\30\3\31\1\32\17\30\1\u0131"+
    "\31\30\3\31\1\32\22\30\1\u0132\26\30\3\31\1\32"+
    "\1\30\1\u0133\47\30\3\31\1\32\22\30\1\u0134\26\30"+
    "\3\31\1\32\22\30\1\u0135\26\30\3\31\1\32\11\30"+
    "\1\u0136\37\30\3\31\1\32\5\30\1\u0137\43\30\3\31"+
    "\1\32\21\30\1\u0138\27\30\3\31\1\32\1\30\1\u0139"+
    "\47\30\3\31\1\32\34\30\1\u013a\14\30\3\31\1\32"+
    "\22\30\1\u013b\26\30\3\31\1\32\3\30\2\u013c\44\30"+
    "\3\31\1\32\1\30\1\u013d\44\30\15\173\1\u013e\4\173"+
    "\1\73\32\173\3\55\3\56\1\57\7\55\1\u013f\3\55"+
    "\1\60\32\55\3\72\1\73\13\72\1\u0140\35\72\17\0"+
    "\1\u0141\35\0\7\260\1\261\2\260\2\u0142\41\260\3\142"+
    "\3\143\1\144\1\214\5\142\1\u0143\37\142\3\30\3\31"+
    "\1\32\11\30\1\u0144\37\30\3\31\1\32\6\30\1\u0145"+
    "\42\30\3\31\1\32\21\30\1\u0146\27\30\3\31\1\32"+
    "\10\30\1\u0147\40\30\3\31\1\32\11\30\1\u0148\37\30"+
    "\3\31\1\32\22\30\1\u0149\26\30\3\31\1\32\11\30"+
    "\1\u014a\37\30\3\31\1\32\32\30\1\u014b\16\30\3\31"+
    "\1\32\1\30\1\u014c\47\30\3\31\1\32\10\30\1\u014d"+
    "\40\30\3\31\1\32\1\30\1\u014e\31\30\1\u014f\15\30"+
    "\3\31\1\32\15\30\1\u0150\33\30\3\31\1\32\23\30"+
    "\1\u0151\25\30\3\31\1\32\5\30\1\u0152\43\30\3\31"+
    "\1\32\5\30\1\u0153\43\30\3\31\1\32\10\30\1\u0154"+
    "\40\30\3\31\1\32\6\30\1\u0155\42\30\3\31\1\32"+
    "\25\30\1\u0156\23\30\3\31\1\32\5\30\1\u0157\40\30"+
    "\16\173\1\u0158\3\173\1\73\32\173\3\55\3\56\1\57"+
    "\10\55\1\u0159\2\55\1\60\32\55\3\72\1\73\14\72"+
    "\1\u015a\34\72\20\0\1\u015b\34\0\7\260\1\261\5\260"+
    "\1\u015c\37\260\3\142\3\143\1\144\1\214\6\142\1\u015d"+
    "\36\142\3\30\3\31\1\32\1\30\1\u015e\47\30\3\31"+
    "\1\32\1\30\1\u015f\47\30\3\31\1\32\5\30\1\u0160"+
    "\43\30\3\31\1\32\11\30\1\u0161\37\30\3\31\1\32"+
    "\1\30\1\u0162\31\30\1\u0163\15\30\3\31\1\32\1\30"+
    "\1\u0164\47\30\3\31\1\32\5\30\1\u0165\43\30\3\31"+
    "\1\32\11\30\1\u0166\37\30\3\31\1\32\1\30\1\u0167"+
    "\47\30\3\31\1\32\6\30\1\u0168\42\30\3\31\1\32"+
    "\21\30\1\u0169\27\30\3\31\1\32\21\30\1\u016a\27\30"+
    "\3\31\1\32\1\30\1\u016b\47\30\3\31\1\32\21\30"+
    "\1\u016c\27\30\3\31\1\32\1\30\1\u016d\47\30\3\31"+
    "\1\32\11\30\1\u016e\37\30\3\31\1\32\11\30\1\u016f"+
    "\37\30\3\31\1\32\1\30\1\u0170\44\30\17\173\1\u0171"+
    "\2\173\1\73\32\173\3\55\3\56\1\57\11\55\1\u0172"+
    "\1\55\1\60\32\55\3\72\1\73\4\72\1\u0173\44\72"+
    "\10\0\1\u0174\44\0\7\260\1\261\6\260\1\u0175\36\260"+
    "\3\142\3\143\1\144\1\214\7\142\1\u0176\35\142\3\30"+
    "\3\31\1\32\1\30\1\u0177\47\30\3\31\1\32\1\30"+
    "\1\u0178\47\30\3\31\1\32\22\30\1\u0179\26\30\3\31"+
    "\1\32\1\30\1\u017a\47\30\3\31\1\32\1\30\1\u017b"+
    "\47\30\3\31\1\32\21\30\1\u017c\27\30\3\31\1\32"+
    "\1\30\1\u017d\47\30\3\31\1\32\24\30\1\u017e\24\30"+
    "\3\31\1\32\31\30\1\u017f\17\30\3\31\1\32\1\30"+
    "\1\u0180\47\30\3\31\1\32\1\30\1\u0181\44\30\20\173"+
    "\1\u0182\1\173\1\73\32\173\3\55\3\56\1\57\1\55"+
    "\1\u0183\11\55\1\60\32\55\7\260\1\261\7\260\1\u0184"+
    "\35\260\3\142\3\143\1\144\1\214\10\142\1\u0185\34\142"+
    "\3\30\3\31\1\32\1\30\1\u0186\47\30\3\31\1\32"+
    "\34\30\1\u0187\14\30\3\31\1\32\22\30\1\u0188\26\30"+
    "\3\31\1\32\1\30\1\u0189\44\30\10\173\1\u018a\11\173"+
    "\1\73\32\173\7\260\1\261\10\260\1\u018b\34\260\3\142"+
    "\3\143\1\144\1\214\1\u018c\44\142\3\30\3\31\1\32"+
    "\6\30\1\u018d\42\30\3\31\1\32\25\30\1\u018e\20\30"+
    "\7\260\1\261\1\u018f\44\260\3\30\3\31\1\32\11\30"+
    "\1\u0190\37\30\3\31\1\32\11\30\1\u0191\37\30\3\31"+
    "\1\32\1\30\1\u0192\47\30\3\31\1\32\1\30\1\u0193"+
    "\44\30";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14580];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\26\1\5\0\1\1\14\0\3\1\3\0\10\1"+
    "\1\0\1\1\1\0\1\11\25\0\1\1\3\0\1\1"+
    "\1\0\2\1\1\0\5\1\16\0\1\1\4\0\2\1"+
    "\6\0\1\1\4\0\4\1\1\0\5\1\21\0\1\1"+
    "\10\0\1\1\2\0\3\1\1\0\3\1\33\0\1\1"+
    "\12\0\1\1\2\0\1\1\2\0\1\1\23\0\2\1"+
    "\1\0\1\1\1\0\4\1\3\0\1\1\2\0\1\1"+
    "\3\0\1\1\2\0\1\11\11\0\1\1\4\0\1\1"+
    "\6\0\1\1\2\0\1\1\5\0\2\1\17\0\1\1"+
    "\5\0\1\1\3\0\1\1\16\0\1\1\1\0\1\1"+
    "\17\0\2\1\2\0\1\1\1\0\1\1\2\0\1\1"+
    "\3\0\1\1\1\0\1\1\2\0\1\1\2\0\1\1"+
    "\1\11\2\0\2\1\1\0\2\1\1\0\1\1\2\0"+
    "\2\1\1\0\1\1\2\0\1\1\2\0\2\1\1\0"+
    "\1\1\2\0\1\1\2\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[403];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicoCHTML(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 272) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); return new Symbol(sym.cadenasalto ,yycolumn, yyline,new String(yytext()));
            }
          case 66: break;
          case 2: 
            { lexeme=yytext(); return new Symbol(sym.id, yycolumn, yyline,new String(yytext()));
            }
          case 67: break;
          case 3: 
            { lexeme=yytext(); return new Symbol(sym.entero, yycolumn, yyline,new String(yytext()));
            }
          case 68: break;
          case 4: 
            { /*Ignore*/
            }
          case 69: break;
          case 5: 
            { return new Symbol(sym.menor, yycolumn, yyline,new String(yytext()));
            }
          case 70: break;
          case 6: 
            { return new Symbol(sym.mayor, yycolumn, yyline,new String(yytext()));
            }
          case 71: break;
          case 7: 
            { return new Symbol(sym.parentesisA, yycolumn, yyline,new String(yytext()));
            }
          case 72: break;
          case 8: 
            { return new Symbol(sym.parentesisC, yycolumn, yyline,new String(yytext()));
            }
          case 73: break;
          case 9: 
            { return new Symbol(sym.puntoComa, yycolumn, yyline,new String(yytext()));
            }
          case 74: break;
          case 10: 
            { return new Symbol(sym.igual, yycolumn, yyline,new String(yytext()));
            }
          case 75: break;
          case 11: 
            { lexeme=yytext(); return new Symbol(sym.cadena ,yycolumn, yyline,new String(yytext()));
            }
          case 76: break;
          case 12: 
            { return new Symbol(sym.idd, yycolumn, yyline,new String(yytext()));
            }
          case 77: break;
          case 13: 
            { lexeme=yytext(); return new Symbol(sym.decimal, yycolumn, yyline,new String(yytext()));
            }
          case 78: break;
          case 14: 
            { return new Symbol(sym.ct, yycolumn, yyline,new String(yytext()));
            }
          case 79: break;
          case 15: 
            { return new Symbol(sym.cb, yycolumn, yyline,new String(yytext()));
            }
          case 80: break;
          case 16: 
            { return new Symbol(sym.cjs, yycolumn, yyline, new String(yytext()));
            }
          case 81: break;
          case 17: 
            { return new Symbol(sym.css, yycolumn, yyline, new String(yytext()));
            }
          case 82: break;
          case 18: 
            { return new Symbol(sym.alto, yycolumn, yyline,new String(yytext()));
            }
          case 83: break;
          case 19: 
            { return new Symbol(sym.ruta, yycolumn, yyline, new String(yytext()));
            }
          case 84: break;
          case 20: 
            { return new Symbol(sym.ccss, yycolumn, yyline, new String(yytext()));
            }
          case 85: break;
          case 21: 
            { return new Symbol(sym.fondo, yycolumn, yyline, new String(yytext()));
            }
          case 86: break;
          case 22: 
            { return new Symbol(sym.click, yycolumn, yyline, new String(yytext()));
            }
          case 87: break;
          case 23: 
            { return new Symbol(sym.ancho, yycolumn, yyline,new String(yytext()));
            }
          case 88: break;
          case 24: 
            { return new Symbol(sym.grupo, yycolumn, yyline,new String(yytext()));
            }
          case 89: break;
          case 25: 
            { return new Symbol(sym.valor, yycolumn, yyline,new String(yytext()));
            }
          case 90: break;
          case 26: 
            { return new Symbol(sym.caja, yycolumn, yyline,new String(yytext()));
            }
          case 91: break;
          case 27: 
            { 
            }
          case 92: break;
          case 28: 
            { return new Symbol(sym.filt, yycolumn, yyline,new String(yytext()));
            }
          case 93: break;
          case 29: 
            { return new Symbol(sym.imagen, yycolumn, yyline, new String(yytext()));
            }
          case 94: break;
          case 30: 
            { return new Symbol(sym.texto, yycolumn, yyline,new String(yytext()));
            }
          case 95: break;
          case 31: 
            { return new Symbol(sym.tabla, yycolumn, yyline,new String(yytext()));
            }
          case 96: break;
          case 32: 
            { return new Symbol(sym.opcion, yycolumn, yyline,new String(yytext()));
            }
          case 97: break;
          case 33: 
            { return new Symbol(sym.cuerpo, yycolumn, yyline, new String(yytext()));
            }
          case 98: break;
          case 34: 
            { return new Symbol(sym.chtml, yycolumn, yyline, new String(yytext()));
            }
          case 99: break;
          case 35: 
            { return new Symbol(sym.boton, yycolumn, yyline, new String(yytext()));
            }
          case 100: break;
          case 36: 
            { return new Symbol(sym.panel, yycolumn, yyline,new String(yytext()));
            }
          case 101: break;
          case 37: 
            { return new Symbol(sym.finct, yycolumn, yyline,new String(yytext()));
            }
          case 102: break;
          case 38: 
            { return new Symbol(sym.fincb, yycolumn, yyline,new String(yytext()));
            }
          case 103: break;
          case 39: 
            { return new Symbol(sym.titulo, yycolumn, yyline,new String(yytext()));
            }
          case 104: break;
          case 40: 
            { return new Symbol(sym.enlace, yycolumn, yyline,new String(yytext()));
            }
          case 105: break;
          case 41: 
            { return new Symbol(sym.alineado, yycolumn, yyline,new String(yytext()));
            }
          case 106: break;
          case 42: 
            { return new Symbol(sym.fincjs, yycolumn, yyline, new String(yytext()));
            }
          case 107: break;
          case 43: 
            { return new Symbol(sym.textoa, yycolumn, yyline,new String(yytext()));
            }
          case 108: break;
          case 44: 
            { return new Symbol(sym.spinner, yycolumn, yyline,new String(yytext()));
            }
          case 109: break;
          case 45: 
            { return new Symbol(sym.finccss, yycolumn, yyline, new String(yytext()));
            }
          case 110: break;
          case 46: 
            { return new Symbol(sym.fincaja, yycolumn, yyline,new String(yytext()));
            }
          case 111: break;
          case 47: 
            { lexeme=yytext(); return new Symbol(sym.cadenasin ,yycolumn, yyline,new String(yytext()));
            }
          case 112: break;
          case 48: 
            { return new Symbol(sym.finfilt, yycolumn, yyline,new String(yytext()));
            }
          case 113: break;
          case 49: 
            { return new Symbol(sym.fintexto, yycolumn, yyline,new String(yytext()));
            }
          case 114: break;
          case 50: 
            { return new Symbol(sym.fintabla, yycolumn, yyline,new String(yytext()));
            }
          case 115: break;
          case 51: 
            { return new Symbol(sym.finchtml, yycolumn, yyline, new String(yytext()));
            }
          case 116: break;
          case 52: 
            { return new Symbol(sym.finboton, yycolumn, yyline, new String(yytext()));
            }
          case 117: break;
          case 53: 
            { return new Symbol(sym.finpanel, yycolumn, yyline,new String(yytext()));
            }
          case 118: break;
          case 54: 
            { return new Symbol(sym.saltofin, yycolumn, yyline,new String(yytext()));
            }
          case 119: break;
          case 55: 
            { return new Symbol(sym.finimagen, yycolumn, yyline, new String(yytext()));
            }
          case 120: break;
          case 56: 
            { return new Symbol(sym.fintitulo, yycolumn, yyline,new String(yytext()));
            }
          case 121: break;
          case 57: 
            { return new Symbol(sym.finopcion, yycolumn, yyline,new String(yytext()));
            }
          case 122: break;
          case 58: 
            { return new Symbol(sym.fincuerpo, yycolumn, yyline, new String(yytext()));
            }
          case 123: break;
          case 59: 
            { return new Symbol(sym.finenlace, yycolumn, yyline,new String(yytext()));
            }
          case 124: break;
          case 60: 
            { return new Symbol(sym.cajatexto, yycolumn, yyline,new String(yytext()));
            }
          case 125: break;
          case 61: 
            { return new Symbol(sym.encabezado, yycolumn, yyline, new String(yytext()));
            }
          case 126: break;
          case 62: 
            { return new Symbol(sym.fintextoa, yycolumn, yyline,new String(yytext()));
            }
          case 127: break;
          case 63: 
            { return new Symbol(sym.finspinner, yycolumn, yyline,new String(yytext()));
            }
          case 128: break;
          case 64: 
            { return new Symbol(sym.fincajatexto, yycolumn, yyline,new String(yytext()));
            }
          case 129: break;
          case 65: 
            { return new Symbol(sym.finencabezado, yycolumn, yyline, new String(yytext()));
            }
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
