/* The following code was generated by JFlex 1.6.1 */

package chtml;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Aroche/Documents/NetBeansProjects/UsacWeb/src/chtml/LexicoCHTML.jflex</tt>
 */
public class LexicoCHTML implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\54\1\41\1\62\1\2\1\44\22\0\1\54\1\0\1\40"+
    "\4\0\1\42\1\60\1\61\1\42\1\42\1\42\1\14\1\52\1\46"+
    "\1\37\11\37\1\42\1\53\1\1\1\51\1\10\1\0\1\42\1\16"+
    "\1\17\1\3\1\21\1\15\1\11\1\31\1\4\1\34\1\26\1\56"+
    "\1\7\1\6\1\13\1\22\1\25\1\33\1\24\1\35\1\5\1\23"+
    "\1\57\1\33\1\30\1\33\1\20\1\0\1\45\2\0\1\32\1\0"+
    "\1\16\1\17\1\3\1\21\1\15\1\11\1\31\1\4\1\34\1\26"+
    "\1\56\1\7\1\6\1\13\1\22\1\25\1\33\1\24\1\35\1\5"+
    "\1\23\1\57\1\33\1\30\1\33\1\20\1\42\1\43\1\42\7\0"+
    "\1\62\73\0\1\36\7\0\1\36\3\0\1\36\5\0\1\36\6\0"+
    "\1\36\6\0\1\36\7\0\1\36\3\0\1\36\5\0\1\36\6\0"+
    "\1\36\65\0\2\12\115\0\1\27\u1e9c\0\1\47\1\50\12\0\1\62"+
    "\1\62\u0100\0\1\55\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\3\1\1\4\3"+
    "\1\5\1\1\1\6\1\1\1\7\1\10\1\3\1\11"+
    "\1\12\13\0\1\3\4\0\2\3\1\13\4\3\1\13"+
    "\2\0\1\14\2\0\1\14\1\3\2\0\1\15\1\0"+
    "\1\16\17\0\1\3\1\0\1\17\6\0\3\3\1\0"+
    "\4\3\1\20\1\3\4\0\1\21\20\0\1\3\10\0"+
    "\1\17\3\0\1\3\1\22\1\0\2\3\1\23\2\3"+
    "\1\24\1\0\1\25\20\0\2\26\1\0\1\27\16\0"+
    "\1\30\1\0\1\3\1\31\1\32\1\33\4\0\1\34"+
    "\1\35\11\0\1\36\1\0\1\37\4\0\1\40\16\0"+
    "\1\3\1\41\1\0\1\42\1\43\1\0\1\44\11\0"+
    "\1\45\1\0\1\46\1\47\2\0\1\50\1\40\1\0"+
    "\1\51\1\0\1\52\10\0\1\3\1\0\1\53\13\0"+
    "\1\54\10\0\2\55\5\0\1\56\17\0\1\57\1\0"+
    "\1\60\12\0\1\61\3\0\1\62\2\0\1\63\1\64"+
    "\1\0\1\65\1\66\1\0\1\67\1\0\1\70\1\0"+
    "\1\71\1\0\1\72\1\73\1\74\1\0\1\75\1\0"+
    "\1\76\1\0\1\77\1\100\5\0\1\101\1\102";

  private static int [] zzUnpackAction() {
    int [] result = new int[344];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\63\0\u02ca"+
    "\0\63\0\63\0\u02fd\0\63\0\63\0\u0330\0\u0363\0\u0396"+
    "\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e"+
    "\0\u0561\0\u0594\0\u05c7\0\u05fa\0\u062d\0\u0660\0\u0693\0\63"+
    "\0\u06c6\0\u06f9\0\u072c\0\u075f\0\314\0\u0792\0\u0297\0\63"+
    "\0\u02ca\0\u07c5\0\u02ca\0\u07f8\0\u082b\0\u085e\0\63\0\u0891"+
    "\0\63\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6"+
    "\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e"+
    "\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26"+
    "\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe"+
    "\0\u0ef1\0\u0792\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\63"+
    "\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188"+
    "\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320"+
    "\0\u1353\0\u1386\0\u0c27\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u1485"+
    "\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u1584\0\u15b7\0\314\0\u15ea"+
    "\0\u161d\0\u1650\0\314\0\u1683\0\u16b6\0\63\0\u16e9\0\u171c"+
    "\0\u174f\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881\0\u18b4"+
    "\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u1a19\0\u1a4c"+
    "\0\63\0\314\0\u1a7f\0\u0cc0\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b"+
    "\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3"+
    "\0\u1d16\0\u1d49\0\314\0\u1d7c\0\u1daf\0\314\0\314\0\314"+
    "\0\u1de2\0\u1e15\0\u1e48\0\u1e7b\0\u1eae\0\63\0\u1ee1\0\u1f14"+
    "\0\u1f47\0\u1f7a\0\u1fad\0\u1fe0\0\u2013\0\u2046\0\u2079\0\63"+
    "\0\u20ac\0\63\0\u20df\0\u2112\0\u2145\0\u2178\0\63\0\u21ab"+
    "\0\u21de\0\u2211\0\u2244\0\u2277\0\u22aa\0\u22dd\0\u2310\0\u2343"+
    "\0\u2376\0\u23a9\0\u23dc\0\u240f\0\u2442\0\u2475\0\63\0\u24a8"+
    "\0\63\0\63\0\u24db\0\63\0\u250e\0\u2541\0\u2574\0\u25a7"+
    "\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6\0\63\0\u26d9\0\63"+
    "\0\63\0\u270c\0\u273f\0\63\0\u0cc0\0\u2772\0\63\0\u27a5"+
    "\0\63\0\u27d8\0\u280b\0\u283e\0\u2871\0\u28a4\0\u28d7\0\u290a"+
    "\0\u293d\0\u2970\0\u29a3\0\63\0\u29d6\0\u2a09\0\u2a3c\0\u2a6f"+
    "\0\u2aa2\0\u2ad5\0\u2b08\0\u2b3b\0\u2b6e\0\u2ba1\0\u2bd4\0\63"+
    "\0\u2c07\0\u2c3a\0\u2c6d\0\u2ca0\0\u2cd3\0\u2d06\0\u2d39\0\u2d6c"+
    "\0\63\0\314\0\u2d9f\0\u2dd2\0\u2e05\0\u2e38\0\u2e6b\0\63"+
    "\0\u2e9e\0\u2ed1\0\u2f04\0\u2f37\0\u2f6a\0\u2f9d\0\u2fd0\0\u3003"+
    "\0\u3036\0\u3069\0\u309c\0\u30cf\0\u3102\0\u3135\0\u3168\0\63"+
    "\0\u319b\0\63\0\u31ce\0\u3201\0\u3234\0\u3267\0\u329a\0\u32cd"+
    "\0\u3300\0\u3333\0\u3366\0\u3399\0\63\0\u33cc\0\u33ff\0\u3432"+
    "\0\63\0\u3465\0\u3498\0\63\0\63\0\u34cb\0\63\0\63"+
    "\0\u34fe\0\63\0\u3531\0\63\0\u3564\0\63\0\u3597\0\63"+
    "\0\63\0\63\0\u35ca\0\63\0\u35fd\0\63\0\u3630\0\63"+
    "\0\63\0\u3663\0\u3696\0\u36c9\0\u36fc\0\u372f\0\63\0\63";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[344];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\0\1\4\4\5\1\6\1\7\1\10"+
    "\1\5\1\2\1\5\1\11\5\5\1\12\2\5\1\2"+
    "\1\5\1\13\2\5\1\14\2\5\1\15\1\16\1\17"+
    "\2\2\1\17\2\2\2\20\1\21\1\2\1\22\1\17"+
    "\1\2\1\5\1\23\1\24\1\25\66\0\1\26\1\27"+
    "\1\0\1\30\3\0\1\31\1\32\2\0\1\33\1\0"+
    "\1\34\2\0\1\35\2\0\1\36\1\0\1\37\4\0"+
    "\1\32\1\37\3\0\1\26\2\0\1\26\1\0\1\40"+
    "\5\0\1\26\11\0\4\5\1\41\1\0\1\5\1\0"+
    "\1\5\1\0\12\5\1\0\10\5\16\0\2\5\6\0"+
    "\5\5\1\0\1\5\1\0\1\5\1\0\12\5\1\0"+
    "\10\5\16\0\2\5\5\0\1\42\5\43\1\0\1\43"+
    "\1\0\14\43\1\0\2\43\1\0\3\43\1\0\1\43"+
    "\1\0\1\44\1\43\1\0\1\44\2\43\2\0\3\43"+
    "\1\42\1\0\2\43\6\0\5\5\1\0\1\5\1\45"+
    "\1\5\1\0\5\5\1\46\4\5\1\0\4\5\1\47"+
    "\3\5\16\0\2\5\24\0\1\50\44\0\4\5\1\51"+
    "\1\0\1\5\1\0\1\52\1\0\12\5\1\0\10\5"+
    "\16\0\2\5\6\0\5\5\1\0\1\5\1\0\1\5"+
    "\1\0\6\5\1\53\3\5\1\0\10\5\16\0\2\5"+
    "\6\0\5\5\1\0\1\5\1\0\1\5\1\0\7\5"+
    "\1\54\2\5\1\0\10\5\16\0\2\5\6\0\5\5"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\1\55\5\5"+
    "\1\0\10\5\16\0\2\5\42\0\1\15\12\0\1\56"+
    "\10\0\40\57\1\60\22\57\40\61\2\62\1\61\2\62"+
    "\3\61\1\63\12\61\3\0\5\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\64\10\5\1\0\10\5\16\0"+
    "\2\5\5\0\1\26\1\27\1\0\1\30\3\0\1\31"+
    "\1\32\2\0\1\33\1\0\1\34\2\0\1\35\2\0"+
    "\1\36\1\0\1\37\4\0\1\32\1\37\3\0\1\26"+
    "\2\0\1\26\7\0\1\26\11\0\1\65\1\66\1\67"+
    "\10\0\1\70\1\71\3\0\1\72\2\0\1\73\46\0"+
    "\1\74\2\0\1\75\1\76\15\0\1\74\40\0\1\77"+
    "\21\0\1\77\34\0\1\100\67\0\1\101\71\0\1\102"+
    "\65\0\1\103\53\0\1\104\62\0\1\105\6\0\1\106"+
    "\103\0\1\107\17\0\5\5\1\0\1\5\1\110\1\5"+
    "\1\0\12\5\1\0\4\5\1\111\3\5\16\0\2\5"+
    "\5\0\1\42\5\43\1\0\1\43\1\0\14\43\1\0"+
    "\2\43\1\0\3\43\1\0\1\43\1\0\1\42\1\43"+
    "\1\0\1\42\2\43\2\0\3\43\1\42\1\0\2\43"+
    "\3\0\1\112\1\113\37\112\1\114\21\112\1\115\1\116"+
    "\1\117\5\120\1\115\1\120\1\115\14\120\1\115\2\120"+
    "\1\115\3\120\1\115\1\120\1\115\1\117\1\120\1\115"+
    "\1\117\2\120\2\115\3\120\1\117\1\115\2\120\3\115"+
    "\13\0\1\121\52\0\5\5\1\0\1\5\1\0\1\122"+
    "\1\0\12\5\1\0\10\5\16\0\2\5\6\0\5\5"+
    "\1\0\1\5\1\0\1\123\1\0\12\5\1\0\10\5"+
    "\16\0\2\5\6\0\2\5\1\124\2\5\1\0\1\5"+
    "\1\125\1\5\1\0\12\5\1\0\4\5\1\126\3\5"+
    "\16\0\2\5\6\0\1\127\4\5\1\0\1\5\1\0"+
    "\1\5\1\0\12\5\1\0\10\5\16\0\2\5\6\0"+
    "\2\5\1\130\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\12\5\1\0\10\5\16\0\2\5\6\0\5\5\1\0"+
    "\1\5\1\0\1\5\1\0\6\5\1\131\3\5\1\0"+
    "\10\5\16\0\2\5\42\0\1\132\23\0\50\62\1\60"+
    "\12\62\3\0\4\5\1\133\1\0\1\5\1\0\1\5"+
    "\1\0\12\5\1\0\10\5\16\0\2\5\32\0\1\134"+
    "\5\0\1\134\32\0\1\135\103\0\1\136\51\0\1\137"+
    "\74\0\1\140\5\0\1\140\32\0\1\141\105\0\1\142"+
    "\51\0\1\143\52\0\1\144\3\0\1\145\65\0\1\146"+
    "\47\0\1\147\3\0\1\150\60\0\1\151\60\0\1\152"+
    "\72\0\1\153\56\0\1\154\65\0\1\155\21\0\1\155"+
    "\26\0\46\156\1\157\14\156\3\0\1\160\62\0\1\161"+
    "\4\5\1\0\1\5\1\0\1\5\1\0\12\5\1\0"+
    "\10\5\16\0\2\5\3\0\1\112\1\113\37\112\1\162"+
    "\21\112\1\163\1\113\37\163\1\0\21\163\1\114\1\0"+
    "\37\114\1\162\21\114\1\115\1\116\37\115\1\164\2\115"+
    "\1\165\16\115\41\0\1\166\2\0\1\167\16\0\1\115"+
    "\1\116\1\117\5\120\1\115\1\120\1\115\14\120\1\115"+
    "\2\120\1\115\3\120\1\115\1\120\1\115\1\170\1\120"+
    "\1\115\1\170\2\120\2\115\3\120\1\117\1\115\2\120"+
    "\3\115\1\171\1\172\37\171\1\173\2\171\1\174\16\171"+
    "\14\0\1\175\51\0\5\5\1\0\1\5\1\0\1\5"+
    "\1\0\4\5\1\176\5\5\1\0\10\5\16\0\2\5"+
    "\6\0\5\5\1\0\1\5\1\0\1\5\1\175\12\5"+
    "\1\0\10\5\16\0\2\5\6\0\5\5\1\0\1\5"+
    "\1\0\1\5\1\0\5\5\1\177\4\5\1\0\10\5"+
    "\16\0\2\5\16\0\1\200\52\0\5\5\1\0\1\5"+
    "\1\0\1\201\1\0\12\5\1\0\10\5\16\0\2\5"+
    "\6\0\1\5\1\202\3\5\1\0\1\5\1\0\1\5"+
    "\1\0\12\5\1\0\10\5\16\0\2\5\6\0\5\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\203\10\5"+
    "\1\0\10\5\16\0\2\5\6\0\5\5\1\0\1\5"+
    "\1\0\1\5\1\0\10\5\1\204\1\5\1\0\10\5"+
    "\16\0\2\5\6\0\5\5\1\0\1\5\1\0\1\5"+
    "\1\0\5\5\1\205\4\5\1\0\10\5\16\0\2\5"+
    "\32\0\1\206\5\0\1\206\33\0\1\207\72\0\1\210"+
    "\70\0\1\211\61\0\1\212\44\0\1\213\64\0\1\214"+
    "\105\0\1\215\44\0\1\216\77\0\1\217\47\0\1\220"+
    "\62\0\1\221\66\0\1\222\52\0\1\223\21\0\1\223"+
    "\43\0\1\224\52\0\1\225\70\0\1\226\47\0\46\156"+
    "\1\227\14\156\46\0\1\230\71\0\2\231\7\0\5\5"+
    "\1\0\1\5\1\0\1\5\1\0\12\5\1\0\10\5"+
    "\15\0\1\231\1\232\1\5\3\0\1\233\1\0\61\233"+
    "\1\115\1\234\37\115\1\164\2\115\1\165\17\115\1\234"+
    "\37\115\1\235\2\115\1\165\16\115\46\0\1\115\55\0"+
    "\1\236\4\0\1\115\14\0\1\115\1\234\1\117\5\120"+
    "\1\115\1\120\1\115\14\120\1\115\2\120\1\115\3\120"+
    "\1\115\1\120\1\115\1\170\1\120\1\115\1\170\2\120"+
    "\2\115\3\120\1\117\1\115\2\120\3\115\1\171\1\172"+
    "\37\171\1\237\2\171\1\174\16\171\1\163\1\113\37\163"+
    "\1\166\2\163\1\240\16\163\1\241\1\234\37\241\1\237"+
    "\2\241\1\242\16\241\1\171\1\172\37\171\1\243\2\171"+
    "\1\174\16\171\3\0\1\244\1\0\1\245\4\0\1\246"+
    "\2\0\1\247\1\0\1\250\2\0\1\251\4\0\1\252"+
    "\4\0\1\246\1\252\30\0\5\5\1\0\1\5\1\0"+
    "\1\5\1\0\5\5\1\253\4\5\1\0\10\5\16\0"+
    "\2\5\20\0\1\254\50\0\5\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\255\11\5\1\0\10\5\16\0\2\5"+
    "\6\0\5\5\1\0\1\5\1\0\1\5\1\0\5\5"+
    "\1\256\4\5\1\0\10\5\16\0\2\5\6\0\5\5"+
    "\1\0\1\5\1\0\1\5\1\0\5\5\1\257\4\5"+
    "\1\0\10\5\16\0\2\5\6\0\5\5\1\0\1\5"+
    "\1\0\1\5\1\0\7\5\1\260\2\5\1\0\10\5"+
    "\16\0\2\5\12\0\1\261\105\0\1\262\55\0\1\263"+
    "\44\0\1\264\75\0\1\265\56\0\1\266\51\0\1\267"+
    "\60\0\1\270\1\0\1\271\3\0\1\272\3\0\1\273"+
    "\7\0\1\274\52\0\1\275\64\0\1\276\46\0\1\277"+
    "\72\0\1\300\71\0\1\301\47\0\1\302\75\0\1\303"+
    "\53\0\1\304\47\0\46\156\1\305\14\156\46\0\1\306"+
    "\14\0\1\233\1\307\61\233\1\115\1\234\37\115\1\164"+
    "\2\115\1\165\1\164\15\115\45\0\1\166\15\0\1\310"+
    "\1\234\37\310\1\237\2\310\1\311\16\310\1\163\1\113"+
    "\37\163\1\236\4\163\1\312\14\163\1\241\1\116\37\241"+
    "\1\237\2\241\1\242\17\241\1\234\37\241\1\243\2\241"+
    "\1\242\16\241\1\310\1\234\37\310\1\237\2\310\1\311"+
    "\1\237\15\310\5\0\1\313\10\0\1\314\1\315\55\0"+
    "\1\316\2\0\1\317\16\0\1\316\34\0\1\320\67\0"+
    "\1\321\71\0\1\322\65\0\1\323\62\0\1\324\53\0"+
    "\1\325\47\0\5\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\326\10\5\1\0\10\5\16\0\2\5\5\0"+
    "\1\261\5\0\1\327\30\0\1\261\2\0\1\261\7\0"+
    "\1\261\13\0\1\330\77\0\1\331\62\0\1\332\72\0"+
    "\1\333\32\0\1\267\5\0\1\334\30\0\1\267\2\0"+
    "\1\267\7\0\1\267\11\0\1\335\1\336\11\0\1\337"+
    "\4\0\1\340\2\0\1\341\52\0\1\342\56\0\1\343"+
    "\21\0\1\343\41\0\1\344\65\0\1\345\57\0\1\346"+
    "\64\0\1\347\62\0\1\350\60\0\1\351\63\0\1\352"+
    "\63\0\1\353\45\0\10\156\1\354\35\156\1\305\14\156"+
    "\10\0\1\354\35\0\1\306\14\0\1\310\1\355\37\310"+
    "\1\237\2\310\1\311\17\310\1\234\37\310\1\243\2\310"+
    "\1\311\16\310\1\312\1\172\37\312\1\164\2\312\1\356"+
    "\16\312\2\0\1\313\5\0\1\357\30\0\1\313\2\0"+
    "\1\313\7\0\1\313\34\0\1\360\36\0\1\315\5\0"+
    "\1\361\30\0\1\315\2\0\1\315\7\0\1\315\13\0"+
    "\1\362\105\0\1\363\50\0\1\364\53\0\1\365\60\0"+
    "\1\366\60\0\1\367\71\0\1\370\21\0\1\370\47\0"+
    "\1\371\44\0\5\5\1\0\1\5\1\0\1\5\1\0"+
    "\4\5\1\372\5\5\1\0\10\5\16\0\2\5\20\0"+
    "\1\373\63\0\1\374\73\0\1\375\5\0\1\375\32\0"+
    "\1\376\103\0\1\377\51\0\1\u0100\74\0\1\u0101\5\0"+
    "\1\u0101\44\0\1\u0102\52\0\1\u0103\56\0\1\u0104\72\0"+
    "\1\u0105\67\0\1\u0106\53\0\1\u0107\75\0\1\u0108\36\0"+
    "\1\312\1\172\37\312\1\235\2\312\1\356\16\312\16\0"+
    "\1\u0109\67\0\1\u010a\44\0\1\u010b\106\0\1\u010c\47\0"+
    "\1\u010d\66\0\1\u010e\52\0\1\u010f\21\0\1\u010f\41\0"+
    "\1\u0110\71\0\1\u0111\43\0\5\5\1\0\1\5\1\0"+
    "\1\5\1\0\5\5\1\u0112\4\5\1\0\10\5\16\0"+
    "\2\5\33\0\1\u0113\61\0\1\u0114\5\0\1\u0114\33\0"+
    "\1\u0115\72\0\1\u0116\70\0\1\u0117\40\0\1\u0101\5\0"+
    "\1\u0118\30\0\1\u0101\2\0\1\u0101\7\0\1\u0101\15\0"+
    "\1\u0119\105\0\1\u011a\46\0\1\u011b\61\0\1\u011c\63\0"+
    "\1\u011d\56\0\1\u011e\21\0\1\u011e\60\0\1\u011f\37\0"+
    "\1\u0120\75\0\1\u0121\55\0\1\u0122\50\0\1\u0123\72\0"+
    "\1\u0124\71\0\1\u0125\53\0\1\u0126\54\0\1\u0127\57\0"+
    "\1\u0114\5\0\1\u0128\30\0\1\u0114\2\0\1\u0114\7\0"+
    "\1\u0114\15\0\1\u0129\55\0\1\u0116\5\0\1\u012a\30\0"+
    "\1\u0116\2\0\1\u0116\7\0\1\u0116\33\0\1\u012b\53\0"+
    "\1\u012c\51\0\1\u012d\74\0\1\u012e\52\0\1\u012f\74\0"+
    "\1\u0130\54\0\1\u0131\54\0\1\u0132\77\0\1\u0133\42\0"+
    "\1\u0134\5\0\1\u0135\21\0\1\u0136\6\0\1\u0134\2\0"+
    "\1\u0134\7\0\1\u0134\21\0\1\u0137\64\0\1\u0138\47\0"+
    "\1\u0124\5\0\1\u0139\30\0\1\u0124\2\0\1\u0124\7\0"+
    "\1\u0124\21\0\1\u013a\64\0\1\u013b\67\0\1\u013c\42\0"+
    "\1\u0129\5\0\1\u013d\30\0\1\u0129\2\0\1\u0129\7\0"+
    "\1\u0129\30\0\1\u013e\42\0\1\u012c\5\0\1\u013f\30\0"+
    "\1\u012c\2\0\1\u012c\7\0\1\u012c\10\0\1\u012d\5\0"+
    "\1\u0140\30\0\1\u012d\2\0\1\u012d\7\0\1\u012d\23\0"+
    "\1\u0141\47\0\1\u012f\5\0\1\u0142\30\0\1\u012f\2\0"+
    "\1\u012f\7\0\1\u012f\30\0\1\u0143\42\0\1\u0131\5\0"+
    "\1\u0144\30\0\1\u0131\2\0\1\u0131\7\0\1\u0131\23\0"+
    "\1\u0145\47\0\1\u0133\5\0\1\u0146\30\0\1\u0133\2\0"+
    "\1\u0133\7\0\1\u0133\10\0\1\u0134\5\0\1\u0135\30\0"+
    "\1\u0134\2\0\1\u0134\7\0\1\u0134\24\0\1\u0147\46\0"+
    "\1\u0137\5\0\1\u0148\30\0\1\u0137\2\0\1\u0137\7\0"+
    "\1\u0137\10\0\1\u0138\5\0\1\u0149\30\0\1\u0138\2\0"+
    "\1\u0138\7\0\1\u0138\10\0\1\u013a\5\0\1\u014a\30\0"+
    "\1\u013a\2\0\1\u013a\7\0\1\u013a\32\0\1\u014b\40\0"+
    "\1\u013e\5\0\1\u014c\30\0\1\u013e\2\0\1\u013e\7\0"+
    "\1\u013e\26\0\1\u014d\44\0\1\u0143\5\0\1\u014e\30\0"+
    "\1\u0143\2\0\1\u0143\7\0\1\u0143\36\0\1\u014f\34\0"+
    "\1\u0147\5\0\1\u0150\30\0\1\u0147\2\0\1\u0147\7\0"+
    "\1\u0147\10\0\1\u014b\5\0\1\u0151\30\0\1\u014b\2\0"+
    "\1\u014b\7\0\1\u014b\24\0\1\u0152\51\0\1\u0153\76\0"+
    "\1\u0154\63\0\1\u0155\62\0\1\u0156\42\0\1\u0155\5\0"+
    "\1\u0157\30\0\1\u0155\2\0\1\u0155\7\0\1\u0155\10\0"+
    "\1\u0156\5\0\1\u0158\30\0\1\u0156\2\0\1\u0156\7\0"+
    "\1\u0156\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14178];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\14\1\1\11\1\1\2\11\1\1\2\11"+
    "\13\0\1\1\4\0\2\1\1\11\5\1\2\0\1\11"+
    "\2\0\2\1\2\0\1\11\1\0\1\11\17\0\1\1"+
    "\1\0\1\1\6\0\3\1\1\0\6\1\4\0\1\11"+
    "\20\0\1\1\10\0\1\1\3\0\2\1\1\0\5\1"+
    "\1\11\1\0\1\1\20\0\1\11\1\1\1\0\1\1"+
    "\16\0\1\1\1\0\4\1\4\0\1\1\1\11\11\0"+
    "\1\11\1\0\1\11\4\0\1\11\16\0\1\1\1\11"+
    "\1\0\2\11\1\0\1\11\11\0\1\11\1\0\2\11"+
    "\2\0\1\11\1\1\1\0\1\11\1\0\1\11\10\0"+
    "\1\1\1\0\1\11\13\0\1\11\10\0\1\11\1\1"+
    "\5\0\1\11\17\0\1\11\1\0\1\11\12\0\1\11"+
    "\3\0\1\11\2\0\2\11\1\0\2\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\3\11\1\0\1\11"+
    "\1\0\1\11\1\0\2\11\5\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[344];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicoCHTML(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 280) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { //return new Symbol(sym.ERROR, yycolumn, yyline,new String(yytext()));
//ejecutar.Errores.agregarError(yytext(), "Error Lexico", "No pertenece al lenguaje",0,0);
            }
          case 67: break;
          case 2: 
            { return new Symbol(sym.menor, yycolumn, yyline,new String(yytext()));
            }
          case 68: break;
          case 3: 
            { lexeme=yytext(); return new Symbol(sym.id, yycolumn, yyline,new String(yytext()));
            }
          case 69: break;
          case 4: 
            { return new Symbol(sym.mayor, yycolumn, yyline,new String(yytext()));
            }
          case 70: break;
          case 5: 
            { lexeme=yytext(); return new Symbol(sym.entero, yycolumn, yyline,new String(yytext()));
            }
          case 71: break;
          case 6: 
            { /*Ignore*/
            }
          case 72: break;
          case 7: 
            { return new Symbol(sym.igual, yycolumn, yyline,new String(yytext()));
            }
          case 73: break;
          case 8: 
            { return new Symbol(sym.puntoComa, yycolumn, yyline,new String(yytext()));
            }
          case 74: break;
          case 9: 
            { return new Symbol(sym.parentesisA, yycolumn, yyline,new String(yytext()));
            }
          case 75: break;
          case 10: 
            { return new Symbol(sym.parentesisC, yycolumn, yyline,new String(yytext()));
            }
          case 76: break;
          case 11: 
            { return new Symbol(sym.idd, yycolumn, yyline,new String(yytext()));
            }
          case 77: break;
          case 12: 
            { lexeme=yytext(); return new Symbol(sym.cadena ,yycolumn, yyline,new String(yytext()));
            }
          case 78: break;
          case 13: 
            { return new Symbol(sym.ct, yychar, yyline, yytext());
            }
          case 79: break;
          case 14: 
            { return new Symbol(sym.cb, yychar, yyline, yytext());
            }
          case 80: break;
          case 15: 
            { lexeme=yytext(); return new Symbol(sym.cadenasin ,yycolumn, yyline,new String(yytext()));
            }
          case 81: break;
          case 16: 
            { lexeme=yytext(); return new Symbol(sym.decimal, yycolumn, yyline,new String(yytext()));
            }
          case 82: break;
          case 17: 
            { return new Symbol(sym.cjs, yychar, yyline, yytext());
            }
          case 83: break;
          case 18: 
            { return new Symbol(sym.alto, yycolumn, yyline,new String(yytext()));
            }
          case 84: break;
          case 19: 
            { return new Symbol(sym.ruta, yycolumn, yyline, new String(yytext()));
            }
          case 85: break;
          case 20: 
            { return new Symbol(sym.ccss, yychar, yyline, yytext());
            }
          case 86: break;
          case 21: 
            { return new Symbol(sym.caja, yychar, yyline, yytext());
            }
          case 87: break;
          case 22: 
            { return new Symbol(sym.click, yycolumn, yyline, new String(yytext()));
            }
          case 88: break;
          case 23: 
            { lexeme=yytext(); return new Symbol(sym.cadenaSaltos ,yycolumn, yyline,new String(yytext()));
            }
          case 89: break;
          case 24: 
            { return new Symbol(sym.fondo, yycolumn, yyline, new String(yytext()));
            }
          case 90: break;
          case 25: 
            { return new Symbol(sym.ancho, yycolumn, yyline,new String(yytext()));
            }
          case 91: break;
          case 26: 
            { return new Symbol(sym.grupo, yycolumn, yyline,new String(yytext()));
            }
          case 92: break;
          case 27: 
            { return new Symbol(sym.valor, yycolumn, yyline,new String(yytext()));
            }
          case 93: break;
          case 28: 
            { return new Symbol(sym.texto, yychar, yyline, yytext());
            }
          case 94: break;
          case 29: 
            { return new Symbol(sym.tabla, yychar, yyline, yytext());
            }
          case 95: break;
          case 30: 
            { return new Symbol(sym.boton, yychar, yyline, yytext());
            }
          case 96: break;
          case 31: 
            { return new Symbol(sym.panel, yychar, yyline, yytext());
            }
          case 97: break;
          case 32: 
            { lexeme=yytext(); return new Symbol(sym.cadenacon, yychar, yyline, yytext());
            }
          case 98: break;
          case 33: 
            { return new Symbol(sym.chtml, yychar, yyline, yytext());
            }
          case 99: break;
          case 34: 
            { return new Symbol(sym.cuerpo, yychar, yyline, yytext());
            }
          case 100: break;
          case 35: 
            { return new Symbol(sym.titulo, yychar, yyline, yytext());
            }
          case 101: break;
          case 36: 
            { return new Symbol(sym.filt, yychar, yyline, yytext());
            }
          case 102: break;
          case 37: 
            { return new Symbol(sym.imagen, yychar, yyline, yytext());
            }
          case 103: break;
          case 38: 
            { return new Symbol(sym.enlace, yychar, yyline, yytext());
            }
          case 104: break;
          case 39: 
            { return new Symbol(sym.opcion, yychar, yyline, yytext());
            }
          case 105: break;
          case 40: 
            { 
            }
          case 106: break;
          case 41: 
            { return new Symbol(sym.finct, yychar, yyline, yytext());
            }
          case 107: break;
          case 42: 
            { return new Symbol(sym.fincb, yychar, yyline, yytext());
            }
          case 108: break;
          case 43: 
            { return new Symbol(sym.textoa, yychar, yyline, yytext());
            }
          case 109: break;
          case 44: 
            { return new Symbol(sym.spinner, yychar, yyline, yytext());
            }
          case 110: break;
          case 45: 
            { return new Symbol(sym.alineado, yycolumn, yyline,new String(yytext()));
            }
          case 111: break;
          case 46: 
            { return new Symbol(sym.fincjs, yychar, yyline, yytext());
            }
          case 112: break;
          case 47: 
            { return new Symbol(sym.finccss, yychar, yyline, yytext());
            }
          case 113: break;
          case 48: 
            { return new Symbol(sym.fincaja, yychar, yyline, yytext());
            }
          case 114: break;
          case 49: 
            { return new Symbol(sym.fintexto, yychar, yyline, yytext());
            }
          case 115: break;
          case 50: 
            { return new Symbol(sym.finboton, yychar, yyline, yytext());
            }
          case 116: break;
          case 51: 
            { return new Symbol(sym.cajatexto, yychar, yyline, yytext());
            }
          case 117: break;
          case 52: 
            { return new Symbol(sym.finchtml, yychar, yyline, yytext());
            }
          case 118: break;
          case 53: 
            { return new Symbol(sym.fintabla, yychar, yyline, yytext());
            }
          case 119: break;
          case 54: 
            { return new Symbol(sym.finfilt, yychar, yyline, yytext());
            }
          case 120: break;
          case 55: 
            { return new Symbol(sym.finpanel, yychar, yyline, yytext());
            }
          case 121: break;
          case 56: 
            { return new Symbol(sym.saltofin, yychar, yyline, yytext());
            }
          case 122: break;
          case 57: 
            { return new Symbol(sym.fintitulo, yychar, yyline, yytext());
            }
          case 123: break;
          case 58: 
            { return new Symbol(sym.finimagen, yychar, yyline, yytext());
            }
          case 124: break;
          case 59: 
            { return new Symbol(sym.finenlace, yychar, yyline, yytext());
            }
          case 125: break;
          case 60: 
            { return new Symbol(sym.finopcion, yychar, yyline, yytext());
            }
          case 126: break;
          case 61: 
            { return new Symbol(sym.fincuerpo, yychar, yyline, yytext());
            }
          case 127: break;
          case 62: 
            { return new Symbol(sym.encabezado, yychar, yyline, yytext());
            }
          case 128: break;
          case 63: 
            { return new Symbol(sym.fintextoa, yychar, yyline, yytext());
            }
          case 129: break;
          case 64: 
            { return new Symbol(sym.finspinner, yychar, yyline, yytext());
            }
          case 130: break;
          case 65: 
            { return new Symbol(sym.fincajatexto, yychar, yyline, yytext());
            }
          case 131: break;
          case 66: 
            { return new Symbol(sym.finencabezado, yychar, yyline, yytext());
            }
          case 132: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
