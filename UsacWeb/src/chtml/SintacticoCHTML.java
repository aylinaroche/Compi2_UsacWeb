
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package chtml;

import java_cup.runtime.*;
import usacweb.Errores;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoCHTML extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoCHTML() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoCHTML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoCHTML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\011\004\000\002\011\003\000\002\004\005" +
    "\000\002\004\004\000\002\004\004\000\002\006\004\000" +
    "\002\006\003\000\002\007\011\000\002\007\011\000\002" +
    "\007\005\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\005\007\000\002\005\006\000\002\005\006" +
    "\000\002\005\005\000\002\005\004\000\002\012\004\000" +
    "\002\012\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\015\007\000\002\015\006\000\002\015\006\000\002" +
    "\015\005\000\002\015\004\000\002\016\005\000\002\016" +
    "\006\000\002\016\004\000\002\017\006\000\002\017\007" +
    "\000\002\017\005\000\002\017\006\000\002\017\004\000" +
    "\002\025\004\000\002\025\003\000\002\026\006\000\002" +
    "\026\006\000\002\026\006\000\002\026\006\000\002\026" +
    "\006\000\002\026\006\000\002\026\006\000\002\026\006" +
    "\000\002\026\006\000\002\026\004\000\002\020\006\000" +
    "\002\020\007\000\002\020\005\000\002\020\006\000\002" +
    "\020\004\000\002\021\006\000\002\021\007\000\002\021" +
    "\005\000\002\021\006\000\002\021\004\000\002\022\007" +
    "\000\002\022\006\000\002\022\006\000\002\022\005\000" +
    "\002\022\004\000\002\014\004\000\002\014\003\000\002" +
    "\032\005\000\002\032\004\000\002\032\004\000\002\033" +
    "\004\000\002\033\003\000\002\034\005\000\002\034\006" +
    "\000\002\034\005\000\002\034\006\000\002\034\004\000" +
    "\002\034\004\000\002\010\003\000\002\010\005\000\002" +
    "\010\005\000\002\027\005\000\002\027\006\000\002\027" +
    "\004\000\002\023\006\000\002\023\007\000\002\023\005" +
    "\000\002\023\006\000\002\023\004\000\002\024\007\000" +
    "\002\024\006\000\002\024\006\000\002\024\005\000\002" +
    "\024\004\000\002\035\004\000\002\035\003\000\002\030" +
    "\006\000\002\030\007\000\002\030\005\000\002\030\006" +
    "\000\002\030\004\000\002\031\006\000\002\031\006\000" +
    "\002\031\005\000\002\031\005\000\002\031\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0106\000\004\004\005\001\002\000\004\002\000\001" +
    "\002\000\006\003\010\006\013\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\007\u0108\001" +
    "\002\000\010\003\050\005\ufffd\016\047\001\002\000\004" +
    "\005\046\001\002\000\014\003\017\007\014\010\021\013" +
    "\020\020\016\001\002\000\010\003\ufffb\005\ufffb\016\ufffb" +
    "\001\002\000\014\003\ufff8\007\ufff8\010\ufff8\013\ufff8\020" +
    "\ufff8\001\002\000\004\076\044\001\002\000\010\011\043" +
    "\014\041\021\042\001\002\000\004\012\033\001\002\000" +
    "\004\012\025\001\002\000\014\003\017\007\023\010\021" +
    "\013\020\020\016\001\002\000\010\003\ufffc\005\ufffc\016" +
    "\ufffc\001\002\000\014\003\ufff9\007\ufff9\010\ufff9\013\ufff9" +
    "\020\ufff9\001\002\000\004\077\026\001\002\000\004\075" +
    "\027\001\002\000\004\071\030\001\002\000\004\100\031" +
    "\001\002\000\004\011\032\001\002\000\014\003\ufff7\007" +
    "\ufff7\010\ufff7\013\ufff7\020\ufff7\001\002\000\004\077\034" +
    "\001\002\000\004\075\035\001\002\000\004\071\036\001" +
    "\002\000\004\100\037\001\002\000\004\014\040\001\002" +
    "\000\014\003\ufff6\007\ufff6\010\ufff6\013\ufff6\020\ufff6\001" +
    "\002\000\014\003\ufff3\007\ufff3\010\ufff3\013\ufff3\020\ufff3" +
    "\001\002\000\014\003\ufff2\007\ufff2\010\ufff2\013\ufff2\020" +
    "\ufff2\001\002\000\014\003\ufff4\007\ufff4\010\ufff4\013\ufff4" +
    "\020\ufff4\001\002\000\004\021\045\001\002\000\014\003" +
    "\ufff5\007\ufff5\010\ufff5\013\ufff5\020\ufff5\001\002\000\004" +
    "\002\uffff\001\002\000\030\003\062\012\053\015\057\030" +
    "\066\055\055\061\065\062\067\063\056\064\063\065\061" +
    "\100\064\001\002\000\004\017\052\001\002\000\004\005" +
    "\ufffe\001\002\000\004\005\uffed\001\002\000\004\077\u0105" +
    "\001\002\000\030\003\062\012\053\015\057\030\066\055" +
    "\055\061\065\062\067\063\056\064\063\065\061\100\u0101" +
    "\001\002\000\004\077\376\001\002\000\004\077\373\001" +
    "\002\000\004\077\370\001\002\000\034\003\uffd0\012\uffd0" +
    "\015\uffd0\030\uffd0\055\uffd0\061\uffd0\062\uffd0\063\uffd0\064" +
    "\uffd0\065\uffd0\074\uffd0\076\uffd0\100\uffd0\001\002\000\004" +
    "\077\365\001\002\000\004\071\364\001\002\000\004\077" +
    "\361\001\002\000\036\003\126\017\120\022\115\024\124" +
    "\026\103\031\122\033\123\035\117\037\132\047\107\051" +
    "\113\053\133\056\106\060\111\001\002\000\004\077\076" +
    "\001\002\000\004\077\073\001\002\000\004\077\070\001" +
    "\002\000\004\075\071\001\002\000\004\071\072\001\002" +
    "\000\034\003\uffcb\012\uffcb\015\uffcb\030\uffcb\055\uffcb\061" +
    "\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\074\uffcb\076\uffcb" +
    "\100\uffcb\001\002\000\004\075\074\001\002\000\004\071" +
    "\075\001\002\000\034\003\uffce\012\uffce\015\uffce\030\uffce" +
    "\055\uffce\061\uffce\062\uffce\063\uffce\064\uffce\065\uffce\074" +
    "\uffce\076\uffce\100\uffce\001\002\000\004\075\077\001\002" +
    "\000\004\071\100\001\002\000\034\003\uffcc\012\uffcc\015" +
    "\uffcc\030\uffcc\055\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc" +
    "\065\uffcc\074\uffcc\076\uffcc\100\uffcc\001\002\000\040\003" +
    "\uffe8\017\uffe8\022\uffe8\023\uffe8\024\uffe8\026\uffe8\031\uffe8" +
    "\033\uffe8\035\uffe8\037\uffe8\047\uffe8\051\uffe8\053\uffe8\056" +
    "\uffe8\060\uffe8\001\002\000\040\003\uffea\017\uffea\022\uffea" +
    "\023\uffea\024\uffea\026\uffea\031\uffea\033\uffea\035\uffea\037" +
    "\uffea\047\uffea\051\uffea\053\uffea\056\uffea\060\uffea\001\002" +
    "\000\006\076\354\100\355\001\002\000\040\003\uffe7\017" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\026\uffe7\031\uffe7\033\uffe7" +
    "\035\uffe7\037\uffe7\047\uffe7\051\uffe7\053\uffe7\056\uffe7\060" +
    "\uffe7\001\002\000\036\003\126\017\353\022\115\024\124" +
    "\026\103\031\122\033\123\035\117\037\132\047\107\051" +
    "\113\053\133\056\106\060\111\001\002\000\032\003\062" +
    "\012\053\015\057\030\066\055\055\061\065\062\067\063" +
    "\056\064\063\065\061\076\343\100\344\001\002\000\006" +
    "\076\335\100\336\001\002\000\040\003\uffeb\017\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\026\uffeb\031\uffeb\033\uffeb\035\uffeb" +
    "\037\uffeb\047\uffeb\051\uffeb\053\uffeb\056\uffeb\060\uffeb\001" +
    "\002\000\040\003\uffdf\017\uffdf\022\uffdf\023\uffdf\024\uffdf" +
    "\026\uffdf\031\uffdf\033\uffdf\035\uffdf\037\uffdf\047\uffdf\051" +
    "\uffdf\053\uffdf\056\uffdf\060\uffdf\001\002\000\040\003\uffe3" +
    "\017\uffe3\022\uffe3\023\uffe3\024\uffe3\026\uffe3\031\uffe3\033" +
    "\uffe3\035\uffe3\037\uffe3\047\uffe3\051\uffe3\053\uffe3\056\uffe3" +
    "\060\uffe3\001\002\000\030\003\062\012\053\015\057\030" +
    "\066\055\055\061\065\062\067\063\056\064\063\065\061" +
    "\100\322\001\002\000\040\003\uffe1\017\uffe1\022\uffe1\023" +
    "\uffe1\024\uffe1\026\uffe1\031\uffe1\033\uffe1\035\uffe1\037\uffe1" +
    "\047\uffe1\051\uffe1\053\uffe1\056\uffe1\060\uffe1\001\002\000" +
    "\030\003\062\012\053\015\057\030\066\055\055\061\065" +
    "\062\067\063\056\064\063\065\061\100\310\001\002\000" +
    "\040\003\uffe5\017\uffe5\022\uffe5\023\uffe5\024\uffe5\026\uffe5" +
    "\031\uffe5\033\uffe5\035\uffe5\037\uffe5\047\uffe5\051\uffe5\053" +
    "\uffe5\056\uffe5\060\uffe5\001\002\000\032\003\062\012\053" +
    "\015\057\030\066\055\055\061\065\062\067\063\056\064" +
    "\063\065\061\074\276\100\275\001\002\000\004\005\uffee" +
    "\001\002\000\040\003\uffe6\017\uffe6\022\uffe6\023\uffe6\024" +
    "\uffe6\026\uffe6\031\uffe6\033\uffe6\035\uffe6\037\uffe6\047\uffe6" +
    "\051\uffe6\053\uffe6\056\uffe6\060\uffe6\001\002\000\032\003" +
    "\062\012\053\015\057\030\066\055\055\061\065\062\067" +
    "\063\056\064\063\065\061\076\262\100\263\001\002\000" +
    "\032\003\062\012\053\015\057\030\066\055\055\061\065" +
    "\062\067\063\056\064\063\065\061\076\247\100\250\001" +
    "\002\000\032\003\062\012\053\015\057\030\066\055\055" +
    "\061\065\062\067\063\056\064\063\065\061\076\234\100" +
    "\235\001\002\000\040\003\uffe9\017\uffe9\022\uffe9\023\uffe9" +
    "\024\uffe9\026\uffe9\031\uffe9\033\uffe9\035\uffe9\037\uffe9\047" +
    "\uffe9\051\uffe9\053\uffe9\056\uffe9\060\uffe9\001\002\000\030" +
    "\023\225\025\222\027\230\032\202\034\201\036\227\040" +
    "\226\050\231\052\223\054\232\057\224\001\002\000\040" +
    "\003\uffe2\017\uffe2\022\uffe2\023\uffe2\024\uffe2\026\uffe2\031" +
    "\uffe2\033\uffe2\035\uffe2\037\uffe2\047\uffe2\051\uffe2\053\uffe2" +
    "\056\uffe2\060\uffe2\001\002\000\040\003\uffe4\017\uffe4\022" +
    "\uffe4\023\uffe4\024\uffe4\026\uffe4\031\uffe4\033\uffe4\035\uffe4" +
    "\037\uffe4\047\uffe4\051\uffe4\053\uffe4\056\uffe4\060\uffe4\001" +
    "\002\000\040\003\uffe0\017\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\026\uffe0\031\uffe0\033\uffe0\035\uffe0\037\uffe0\047\uffe0\051" +
    "\uffe0\053\uffe0\056\uffe0\060\uffe0\001\002\000\030\003\062" +
    "\012\053\015\057\030\066\055\055\061\065\062\067\063" +
    "\056\064\063\065\061\100\151\001\002\000\032\003\062" +
    "\012\053\015\057\030\066\055\055\061\065\062\067\063" +
    "\056\064\063\065\061\076\135\100\136\001\002\000\032" +
    "\003\062\012\053\015\057\030\066\055\055\061\065\062" +
    "\067\063\056\064\063\065\061\076\142\100\144\001\002" +
    "\000\004\054\141\001\002\000\004\101\137\001\002\000" +
    "\004\054\140\001\002\000\042\003\uff94\017\uff94\022\uff94" +
    "\023\uff94\024\uff94\026\uff94\031\uff94\033\uff94\035\uff94\037" +
    "\uff94\047\uff94\051\uff94\052\uff94\053\uff94\056\uff94\060\uff94" +
    "\001\002\000\042\003\uff95\017\uff95\022\uff95\023\uff95\024" +
    "\uff95\026\uff95\031\uff95\033\uff95\035\uff95\037\uff95\047\uff95" +
    "\051\uff95\052\uff95\053\uff95\056\uff95\060\uff95\001\002\000" +
    "\004\054\147\001\002\000\034\003\uffd1\012\uffd1\015\uffd1" +
    "\030\uffd1\055\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065" +
    "\uffd1\074\uffd1\076\uffd1\100\uffd1\001\002\000\004\101\145" +
    "\001\002\000\004\054\146\001\002\000\042\003\uff96\017" +
    "\uff96\022\uff96\023\uff96\024\uff96\026\uff96\031\uff96\033\uff96" +
    "\035\uff96\037\uff96\047\uff96\051\uff96\052\uff96\053\uff96\056" +
    "\uff96\060\uff96\001\002\000\042\003\uff97\017\uff97\022\uff97" +
    "\023\uff97\024\uff97\026\uff97\031\uff97\033\uff97\035\uff97\037" +
    "\uff97\047\uff97\051\uff97\052\uff97\053\uff97\056\uff97\060\uff97" +
    "\001\002\000\030\003\062\012\053\015\057\030\066\055" +
    "\055\061\065\062\067\063\056\064\063\065\061\100\216" +
    "\001\002\000\010\003\155\040\156\041\152\001\002\000" +
    "\012\003\164\042\167\043\162\045\165\001\002\000\010" +
    "\003\155\040\161\041\152\001\002\000\010\003\uffb5\040" +
    "\uffb5\041\uffb5\001\002\000\004\042\157\001\002\000\040" +
    "\003\uffb8\017\uffb8\022\uffb8\023\uffb8\024\uffb8\026\uffb8\031" +
    "\uffb8\033\uffb8\035\uffb8\037\uffb8\047\uffb8\051\uffb8\053\uffb8" +
    "\056\uffb8\060\uffb8\001\002\000\010\003\uffb2\040\uffb2\041" +
    "\uffb2\001\002\000\010\003\uffb6\040\uffb6\041\uffb6\001\002" +
    "\000\040\003\uffb9\017\uffb9\022\uffb9\023\uffb9\024\uffb9\026" +
    "\uffb9\031\uffb9\033\uffb9\035\uffb9\037\uffb9\047\uffb9\051\uffb9" +
    "\053\uffb9\056\uffb9\060\uffb9\001\002\000\006\076\211\100" +
    "\212\001\002\000\012\003\164\042\210\043\162\045\165" +
    "\001\002\000\006\044\205\046\206\001\002\000\006\076" +
    "\170\100\172\001\002\000\012\003\uffb0\042\uffb0\043\uffb0" +
    "\045\uffb0\001\002\000\010\003\uffb3\040\uffb3\041\uffb3\001" +
    "\002\000\004\046\uffa9\001\002\000\004\046\204\001\002" +
    "\000\012\003\174\031\122\033\123\101\176\001\002\000" +
    "\004\101\203\001\002\000\006\032\202\034\201\001\002" +
    "\000\004\101\200\001\002\000\004\046\177\001\002\000" +
    "\012\003\uffac\042\uffac\043\uffac\045\uffac\001\002\000\004" +
    "\046\uffa8\001\002\000\042\003\uffc1\017\uffc1\022\uffc1\023" +
    "\uffc1\024\uffc1\026\uffc1\031\uffc1\033\uffc1\035\uffc1\037\uffc1" +
    "\047\uffc1\051\uffc1\053\uffc1\056\uffc1\060\uffc1\101\uffc1\001" +
    "\002\000\042\003\uffd2\017\uffd2\022\uffd2\023\uffd2\024\uffd2" +
    "\026\uffd2\031\uffd2\033\uffd2\035\uffd2\037\uffd2\047\uffd2\051" +
    "\uffd2\053\uffd2\056\uffd2\060\uffd2\101\uffd2\001\002\000\004" +
    "\046\uffa7\001\002\000\012\003\uffad\042\uffad\043\uffad\045" +
    "\uffad\001\002\000\012\003\uffab\042\uffab\043\uffab\045\uffab" +
    "\001\002\000\012\003\uffaa\042\uffaa\043\uffaa\045\uffaa\001" +
    "\002\000\012\003\uffb1\042\uffb1\043\uffb1\045\uffb1\001\002" +
    "\000\010\003\uffb4\040\uffb4\041\uffb4\001\002\000\004\044" +
    "\215\001\002\000\004\101\213\001\002\000\004\044\214" +
    "\001\002\000\012\003\uffae\042\uffae\043\uffae\045\uffae\001" +
    "\002\000\012\003\uffaf\042\uffaf\043\uffaf\045\uffaf\001\002" +
    "\000\010\003\155\040\220\041\152\001\002\000\010\003" +
    "\155\040\221\041\152\001\002\000\040\003\uffba\017\uffba" +
    "\022\uffba\023\uffba\024\uffba\026\uffba\031\uffba\033\uffba\035" +
    "\uffba\037\uffba\047\uffba\051\uffba\053\uffba\056\uffba\060\uffba" +
    "\001\002\000\040\003\uffbb\017\uffbb\022\uffbb\023\uffbb\024" +
    "\uffbb\026\uffbb\031\uffbb\033\uffbb\035\uffbb\037\uffbb\047\uffbb" +
    "\051\uffbb\053\uffbb\056\uffbb\060\uffbb\001\002\000\040\003" +
    "\uff9f\017\uff9f\022\uff9f\023\uff9f\024\uff9f\026\uff9f\031\uff9f" +
    "\033\uff9f\035\uff9f\037\uff9f\047\uff9f\051\uff9f\053\uff9f\056" +
    "\uff9f\060\uff9f\001\002\000\040\003\uff9a\017\uff9a\022\uff9a" +
    "\023\uff9a\024\uff9a\026\uff9a\031\uff9a\033\uff9a\035\uff9a\037" +
    "\uff9a\047\uff9a\051\uff9a\053\uff9a\056\uff9a\060\uff9a\001\002" +
    "\000\040\003\uff8e\017\uff8e\022\uff8e\023\uff8e\024\uff8e\026" +
    "\uff8e\031\uff8e\033\uff8e\035\uff8e\037\uff8e\047\uff8e\051\uff8e" +
    "\053\uff8e\056\uff8e\060\uff8e\001\002\000\040\003\uffda\017" +
    "\uffda\022\uffda\023\uffda\024\uffda\026\uffda\031\uffda\033\uffda" +
    "\035\uffda\037\uffda\047\uffda\051\uffda\053\uffda\056\uffda\060" +
    "\uffda\001\002\000\040\003\uffb7\017\uffb7\022\uffb7\023\uffb7" +
    "\024\uffb7\026\uffb7\031\uffb7\033\uffb7\035\uffb7\037\uffb7\047" +
    "\uffb7\051\uffb7\053\uffb7\056\uffb7\060\uffb7\001\002\000\040" +
    "\003\uffbc\017\uffbc\022\uffbc\023\uffbc\024\uffbc\026\uffbc\031" +
    "\uffbc\033\uffbc\035\uffbc\037\uffbc\047\uffbc\051\uffbc\053\uffbc" +
    "\056\uffbc\060\uffbc\001\002\000\040\003\uffd7\017\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\026\uffd7\031\uffd7\033\uffd7\035\uffd7" +
    "\037\uffd7\047\uffd7\051\uffd7\053\uffd7\056\uffd7\060\uffd7\001" +
    "\002\000\040\003\uffa4\017\uffa4\022\uffa4\023\uffa4\024\uffa4" +
    "\026\uffa4\031\uffa4\033\uffa4\035\uffa4\037\uffa4\047\uffa4\051" +
    "\uffa4\053\uffa4\056\uffa4\060\uffa4\001\002\000\042\003\uff93" +
    "\017\uff93\022\uff93\023\uff93\024\uff93\026\uff93\031\uff93\033" +
    "\uff93\035\uff93\037\uff93\047\uff93\051\uff93\052\uff93\053\uff93" +
    "\056\uff93\060\uff93\001\002\000\032\003\062\012\053\015" +
    "\057\030\066\055\055\061\065\062\067\063\056\064\063" +
    "\065\061\076\241\100\242\001\002\000\004\025\240\001" +
    "\002\000\004\101\236\001\002\000\004\025\237\001\002" +
    "\000\040\003\uffa0\017\uffa0\022\uffa0\023\uffa0\024\uffa0\026" +
    "\uffa0\031\uffa0\033\uffa0\035\uffa0\037\uffa0\047\uffa0\051\uffa0" +
    "\053\uffa0\056\uffa0\060\uffa0\001\002\000\040\003\uffa1\017" +
    "\uffa1\022\uffa1\023\uffa1\024\uffa1\026\uffa1\031\uffa1\033\uffa1" +
    "\035\uffa1\037\uffa1\047\uffa1\051\uffa1\053\uffa1\056\uffa1\060" +
    "\uffa1\001\002\000\004\025\245\001\002\000\004\101\243" +
    "\001\002\000\004\025\244\001\002\000\040\003\uffa2\017" +
    "\uffa2\022\uffa2\023\uffa2\024\uffa2\026\uffa2\031\uffa2\033\uffa2" +
    "\035\uffa2\037\uffa2\047\uffa2\051\uffa2\053\uffa2\056\uffa2\060" +
    "\uffa2\001\002\000\040\003\uffa3\017\uffa3\022\uffa3\023\uffa3" +
    "\024\uffa3\026\uffa3\031\uffa3\033\uffa3\035\uffa3\037\uffa3\047" +
    "\uffa3\051\uffa3\053\uffa3\056\uffa3\060\uffa3\001\002\000\032" +
    "\003\062\012\053\015\057\030\066\055\055\061\065\062" +
    "\067\063\056\064\063\065\061\076\254\100\255\001\002" +
    "\000\004\034\253\001\002\000\004\101\251\001\002\000" +
    "\004\034\252\001\002\000\042\003\uffc2\017\uffc2\022\uffc2" +
    "\023\uffc2\024\uffc2\026\uffc2\031\uffc2\033\uffc2\035\uffc2\037" +
    "\uffc2\047\uffc2\051\uffc2\053\uffc2\056\uffc2\060\uffc2\101\uffc2" +
    "\001\002\000\042\003\uffc3\017\uffc3\022\uffc3\023\uffc3\024" +
    "\uffc3\026\uffc3\031\uffc3\033\uffc3\035\uffc3\037\uffc3\047\uffc3" +
    "\051\uffc3\053\uffc3\056\uffc3\060\uffc3\101\uffc3\001\002\000" +
    "\004\034\260\001\002\000\004\101\256\001\002\000\004" +
    "\034\257\001\002\000\042\003\uffc4\017\uffc4\022\uffc4\023" +
    "\uffc4\024\uffc4\026\uffc4\031\uffc4\033\uffc4\035\uffc4\037\uffc4" +
    "\047\uffc4\051\uffc4\053\uffc4\056\uffc4\060\uffc4\101\uffc4\001" +
    "\002\000\042\003\uffc5\017\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\026\uffc5\031\uffc5\033\uffc5\035\uffc5\037\uffc5\047\uffc5\051" +
    "\uffc5\053\uffc5\056\uffc5\060\uffc5\101\uffc5\001\002\000\032" +
    "\003\062\012\053\015\057\030\066\055\055\061\065\062" +
    "\067\063\056\064\063\065\061\076\267\100\270\001\002" +
    "\000\004\032\266\001\002\000\004\101\264\001\002\000" +
    "\004\032\265\001\002\000\042\003\uffd3\017\uffd3\022\uffd3" +
    "\023\uffd3\024\uffd3\026\uffd3\031\uffd3\033\uffd3\035\uffd3\037" +
    "\uffd3\047\uffd3\051\uffd3\053\uffd3\056\uffd3\060\uffd3\101\uffd3" +
    "\001\002\000\042\003\uffd4\017\uffd4\022\uffd4\023\uffd4\024" +
    "\uffd4\026\uffd4\031\uffd4\033\uffd4\035\uffd4\037\uffd4\047\uffd4" +
    "\051\uffd4\053\uffd4\056\uffd4\060\uffd4\101\uffd4\001\002\000" +
    "\004\032\273\001\002\000\004\101\271\001\002\000\004" +
    "\032\272\001\002\000\042\003\uffd5\017\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\026\uffd5\031\uffd5\033\uffd5\035\uffd5\037\uffd5" +
    "\047\uffd5\051\uffd5\053\uffd5\056\uffd5\060\uffd5\101\uffd5\001" +
    "\002\000\042\003\uffd6\017\uffd6\022\uffd6\023\uffd6\024\uffd6" +
    "\026\uffd6\031\uffd6\033\uffd6\035\uffd6\037\uffd6\047\uffd6\051" +
    "\uffd6\053\uffd6\056\uffd6\060\uffd6\101\uffd6\001\002\000\032" +
    "\003\062\012\053\015\057\030\066\055\055\061\065\062" +
    "\067\063\056\064\063\065\061\074\303\100\302\001\002" +
    "\000\004\101\300\001\002\000\004\036\277\001\002\000" +
    "\040\003\uffbe\017\uffbe\022\uffbe\023\uffbe\024\uffbe\026\uffbe" +
    "\031\uffbe\033\uffbe\035\uffbe\037\uffbe\047\uffbe\051\uffbe\053" +
    "\uffbe\056\uffbe\060\uffbe\001\002\000\004\036\301\001\002" +
    "\000\040\003\uffbd\017\uffbd\022\uffbd\023\uffbd\024\uffbd\026" +
    "\uffbd\031\uffbd\033\uffbd\035\uffbd\037\uffbd\047\uffbd\051\uffbd" +
    "\053\uffbd\056\uffbd\060\uffbd\001\002\000\004\101\305\001" +
    "\002\000\004\036\304\001\002\000\040\003\uffc0\017\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\026\uffc0\031\uffc0\033\uffc0\035" +
    "\uffc0\037\uffc0\047\uffc0\051\uffc0\053\uffc0\056\uffc0\060\uffc0" +
    "\001\002\000\004\036\306\001\002\000\040\003\uffbf\017" +
    "\uffbf\022\uffbf\023\uffbf\024\uffbf\026\uffbf\031\uffbf\033\uffbf" +
    "\035\uffbf\037\uffbf\047\uffbf\051\uffbf\053\uffbf\056\uffbf\060" +
    "\uffbf\001\002\000\030\003\062\012\053\015\057\030\066" +
    "\055\055\061\065\062\067\063\056\064\063\065\061\100" +
    "\315\001\002\000\036\003\126\022\115\023\311\024\124" +
    "\026\103\031\122\033\123\035\117\037\132\047\107\051" +
    "\113\053\133\056\106\060\111\001\002\000\040\003\uffdb" +
    "\017\uffdb\022\uffdb\023\uffdb\024\uffdb\026\uffdb\031\uffdb\033" +
    "\uffdb\035\uffdb\037\uffdb\047\uffdb\051\uffdb\053\uffdb\056\uffdb" +
    "\060\uffdb\001\002\000\036\003\126\022\115\023\313\024" +
    "\124\026\103\031\122\033\123\035\117\037\132\047\107" +
    "\051\113\053\133\056\106\060\111\001\002\000\040\003" +
    "\uffdc\017\uffdc\022\uffdc\023\uffdc\024\uffdc\026\uffdc\031\uffdc" +
    "\033\uffdc\035\uffdc\037\uffdc\047\uffdc\051\uffdc\053\uffdc\056" +
    "\uffdc\060\uffdc\001\002\000\040\003\uffec\017\uffec\022\uffec" +
    "\023\uffec\024\uffec\026\uffec\031\uffec\033\uffec\035\uffec\037" +
    "\uffec\047\uffec\051\uffec\053\uffec\056\uffec\060\uffec\001\002" +
    "\000\036\003\126\022\115\023\316\024\124\026\103\031" +
    "\122\033\123\035\117\037\132\047\107\051\113\053\133" +
    "\056\106\060\111\001\002\000\040\003\uffdd\017\uffdd\022" +
    "\uffdd\023\uffdd\024\uffdd\026\uffdd\031\uffdd\033\uffdd\035\uffdd" +
    "\037\uffdd\047\uffdd\051\uffdd\053\uffdd\056\uffdd\060\uffdd\001" +
    "\002\000\036\003\126\022\115\023\320\024\124\026\103" +
    "\031\122\033\123\035\117\037\132\047\107\051\113\053" +
    "\133\056\106\060\111\001\002\000\040\003\uffde\017\uffde" +
    "\022\uffde\023\uffde\024\uffde\026\uffde\031\uffde\033\uffde\035" +
    "\uffde\037\uffde\047\uffde\051\uffde\053\uffde\056\uffde\060\uffde" +
    "\001\002\000\030\003\062\012\053\015\057\030\066\055" +
    "\055\061\065\062\067\063\056\064\063\065\061\100\331" +
    "\001\002\000\010\003\324\052\326\053\133\001\002\000" +
    "\010\003\uff98\052\uff98\053\uff98\001\002\000\004\054\232" +
    "\001\002\000\010\003\324\052\330\053\133\001\002\000" +
    "\040\003\uff9b\017\uff9b\022\uff9b\023\uff9b\024\uff9b\026\uff9b" +
    "\031\uff9b\033\uff9b\035\uff9b\037\uff9b\047\uff9b\051\uff9b\053" +
    "\uff9b\056\uff9b\060\uff9b\001\002\000\010\003\uff99\052\uff99" +
    "\053\uff99\001\002\000\040\003\uff9c\017\uff9c\022\uff9c\023" +
    "\uff9c\024\uff9c\026\uff9c\031\uff9c\033\uff9c\035\uff9c\037\uff9c" +
    "\047\uff9c\051\uff9c\053\uff9c\056\uff9c\060\uff9c\001\002\000" +
    "\010\003\324\052\333\053\133\001\002\000\010\003\324" +
    "\052\334\053\133\001\002\000\040\003\uff9d\017\uff9d\022" +
    "\uff9d\023\uff9d\024\uff9d\026\uff9d\031\uff9d\033\uff9d\035\uff9d" +
    "\037\uff9d\047\uff9d\051\uff9d\053\uff9d\056\uff9d\060\uff9d\001" +
    "\002\000\040\003\uff9e\017\uff9e\022\uff9e\023\uff9e\024\uff9e" +
    "\026\uff9e\031\uff9e\033\uff9e\035\uff9e\037\uff9e\047\uff9e\051" +
    "\uff9e\053\uff9e\056\uff9e\060\uff9e\001\002\000\004\050\341" +
    "\001\002\000\004\101\337\001\002\000\004\050\340\001" +
    "\002\000\040\003\uffa5\017\uffa5\022\uffa5\023\uffa5\024\uffa5" +
    "\026\uffa5\031\uffa5\033\uffa5\035\uffa5\037\uffa5\047\uffa5\051" +
    "\uffa5\053\uffa5\056\uffa5\060\uffa5\001\002\000\040\003\uffa6" +
    "\017\uffa6\022\uffa6\023\uffa6\024\uffa6\026\uffa6\031\uffa6\033" +
    "\uffa6\035\uffa6\037\uffa6\047\uffa6\051\uffa6\053\uffa6\056\uffa6" +
    "\060\uffa6\001\002\000\032\003\062\012\053\015\057\030" +
    "\066\055\055\061\065\062\067\063\056\064\063\065\061" +
    "\076\347\100\350\001\002\000\004\057\346\001\002\000" +
    "\004\057\345\001\002\000\040\003\uff8f\017\uff8f\022\uff8f" +
    "\023\uff8f\024\uff8f\026\uff8f\031\uff8f\033\uff8f\035\uff8f\037" +
    "\uff8f\047\uff8f\051\uff8f\053\uff8f\056\uff8f\060\uff8f\001\002" +
    "\000\040\003\uff90\017\uff90\022\uff90\023\uff90\024\uff90\026" +
    "\uff90\031\uff90\033\uff90\035\uff90\037\uff90\047\uff90\051\uff90" +
    "\053\uff90\056\uff90\060\uff90\001\002\000\004\057\352\001" +
    "\002\000\004\057\351\001\002\000\040\003\uff91\017\uff91" +
    "\022\uff91\023\uff91\024\uff91\026\uff91\031\uff91\033\uff91\035" +
    "\uff91\037\uff91\047\uff91\051\uff91\053\uff91\056\uff91\060\uff91" +
    "\001\002\000\040\003\uff92\017\uff92\022\uff92\023\uff92\024" +
    "\uff92\026\uff92\031\uff92\033\uff92\035\uff92\037\uff92\047\uff92" +
    "\051\uff92\053\uff92\056\uff92\060\uff92\001\002\000\004\005" +
    "\uffef\001\002\000\004\027\360\001\002\000\004\101\356" +
    "\001\002\000\004\027\357\001\002\000\040\003\uffd8\017" +
    "\uffd8\022\uffd8\023\uffd8\024\uffd8\026\uffd8\031\uffd8\033\uffd8" +
    "\035\uffd8\037\uffd8\047\uffd8\051\uffd8\053\uffd8\056\uffd8\060" +
    "\uffd8\001\002\000\040\003\uffd9\017\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\026\uffd9\031\uffd9\033\uffd9\035\uffd9\037\uffd9\047" +
    "\uffd9\051\uffd9\053\uffd9\056\uffd9\060\uffd9\001\002\000\004" +
    "\075\362\001\002\000\004\071\363\001\002\000\034\003" +
    "\uffc9\012\uffc9\015\uffc9\030\uffc9\055\uffc9\061\uffc9\062\uffc9" +
    "\063\uffc9\064\uffc9\065\uffc9\074\uffc9\076\uffc9\100\uffc9\001" +
    "\002\000\034\003\uffc6\012\uffc6\015\uffc6\030\uffc6\055\uffc6" +
    "\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\074\uffc6\076" +
    "\uffc6\100\uffc6\001\002\000\004\075\366\001\002\000\004" +
    "\071\367\001\002\000\034\003\uffcd\012\uffcd\015\uffcd\030" +
    "\uffcd\055\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd" +
    "\074\uffcd\076\uffcd\100\uffcd\001\002\000\004\075\371\001" +
    "\002\000\004\071\372\001\002\000\034\003\uffc7\012\uffc7" +
    "\015\uffc7\030\uffc7\055\uffc7\061\uffc7\062\uffc7\063\uffc7\064" +
    "\uffc7\065\uffc7\074\uffc7\076\uffc7\100\uffc7\001\002\000\004" +
    "\075\374\001\002\000\004\071\375\001\002\000\034\003" +
    "\uffca\012\uffca\015\uffca\030\uffca\055\uffca\061\uffca\062\uffca" +
    "\063\uffca\064\uffca\065\uffca\074\uffca\076\uffca\100\uffca\001" +
    "\002\000\004\075\377\001\002\000\004\071\u0100\001\002" +
    "\000\034\003\uffc8\012\uffc8\015\uffc8\030\uffc8\055\uffc8\061" +
    "\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\074\uffc8\076\uffc8" +
    "\100\uffc8\001\002\000\036\003\126\017\u0103\022\115\024" +
    "\124\026\103\031\122\033\123\035\117\037\132\047\107" +
    "\051\113\053\133\056\106\060\111\001\002\000\036\003" +
    "\126\017\u0104\022\115\024\124\026\103\031\122\033\123" +
    "\035\117\037\132\047\107\051\113\053\133\056\106\060" +
    "\111\001\002\000\004\005\ufff0\001\002\000\004\005\ufff1" +
    "\001\002\000\004\075\u0106\001\002\000\004\071\u0107\001" +
    "\002\000\034\003\uffcf\012\uffcf\015\uffcf\030\uffcf\055\uffcf" +
    "\061\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\074\uffcf\076" +
    "\uffcf\100\uffcf\001\002\000\010\003\ufffa\005\ufffa\016\ufffa" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0106\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\006\004\010\011\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\050\001" +
    "\001\000\002\001\001\000\006\006\021\007\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\053\026\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\012\104\013\107\015\101\016\124\017\100\020\103" +
    "\021\120\022\115\023\111\024\126\027\127\030\113\031" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\013\313\015\101\016\124\017\100\020" +
    "\103\021\120\022\115\023\111\024\126\027\127\030\113" +
    "\031\130\001\001\000\006\025\341\026\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\025\320\026\057\001\001\000\002\001" +
    "\001\000\006\025\306\026\057\001\001\000\002\001\001" +
    "\000\006\025\273\026\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\025\260\026\057\001\001\000\006" +
    "\025\245\026\057\001\001\000\006\025\232\026\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\025\147\026" +
    "\057\001\001\000\006\025\133\026\057\001\001\000\004" +
    "\026\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\142" +
    "\001\001\000\006\014\152\032\153\001\001\000\006\033" +
    "\162\034\165\001\001\000\004\032\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\206\001\001\000\002\001\001\000\004\010" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\174\020\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\216\032\153\001\001\000\004\032\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\142\001\001" +
    "\000\034\012\311\013\107\015\101\016\124\017\100\020" +
    "\103\021\120\022\115\023\111\024\126\027\127\030\113" +
    "\031\130\001\001\000\002\001\001\000\032\013\313\015" +
    "\101\016\124\017\100\020\103\021\120\022\115\023\111" +
    "\024\126\027\127\030\113\031\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\012\316\013\107\015\101" +
    "\016\124\017\100\020\103\021\120\022\115\023\111\024" +
    "\126\027\127\030\113\031\130\001\001\000\002\001\001" +
    "\000\032\013\313\015\101\016\124\017\100\020\103\021" +
    "\120\022\115\023\111\024\126\027\127\030\113\031\130" +
    "\001\001\000\002\001\001\000\004\026\142\001\001\000" +
    "\006\030\322\035\324\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\326\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\030\322\035\331" +
    "\001\001\000\004\030\326\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\012\u0101\013\107\015" +
    "\101\016\124\017\100\020\103\021\120\022\115\023\111" +
    "\024\126\027\127\030\113\031\130\001\001\000\032\013" +
    "\313\015\101\016\124\017\100\020\103\021\120\022\115" +
    "\023\111\024\126\027\127\030\113\031\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoCHTML$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoCHTML$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoCHTML$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }


// METODOS Y VARIABLES GLOBALES DEL PARSER, PUEDEN SER PUBLICAS O PRIVADAS

 
public void syntax_error(Symbol s){
/**Metodo al que se llama automaticamente ante algun error sintactico.*/
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
        int linea = s.right+1; int columna = s.left; 
        String texto = "Identificador " +s.value + " no reconocido.";
        Errores.agregarError("Error Sintactico",texto, linea,columna);

}            
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
/**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
        System.out.println("Error Sintactico no recuperable en la Linea " + (s.right+1)+ " Columna "+s.left+". Identificador " + s.value + " no reconocido.");
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoCHTML$actions {



  private final SintacticoCHTML parser;

  /** Constructor */
  CUP$SintacticoCHTML$actions(SintacticoCHTML parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoCHTML$do_action_part00000000(
    int                        CUP$SintacticoCHTML$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoCHTML$parser,
    java.util.Stack            CUP$SintacticoCHTML$stack,
    int                        CUP$SintacticoCHTML$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoCHTML$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoCHTML$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter start_val = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoCHTML$parser.done_parsing();
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= RAIZ 
            {
              Caracter RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter r = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
     chtml.NODO = r.nodo;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // RAIZ ::= chtml HTML finchtml 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("RAIZ");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo); E.insertar(new NodoCHTML("finhtml"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("RAIZ",1, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // HTML ::= ENCABEZADO CUERPO 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter c = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("HTML");
    RESULT = new Caracter();
    E.insertar(e.nodo); E.insertar(c.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("HTML",7, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // HTML ::= ENCABEZADO 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("HTML");
    RESULT = new Caracter();
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("HTML",7, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ENCABEZADO ::= encabezado INFORMACION finencabezado 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		//3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ENCABEZADO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo); E.insertar(new NodoCHTML("finencabezado"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",2, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ENCABEZADO ::= encabezado finencabezado 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		//2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ENCABEZADO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("finencabezado"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",2, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ENCABEZADO ::= error finencabezado 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		//3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ERROR");
    E.insertar(new NodoCHTML((String)i)); 
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",2, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INFORMACION ::= INFORMACION INFO 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter c = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("INFORMACION");
    RESULT = new Caracter();
    E.insertar(e.nodo); E.insertar(c.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("INFORMACION",4, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INFORMACION ::= INFO 
            {
              Caracter RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter c = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("INFORMACION");
    RESULT = new Caracter();
    E.insertar(c.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("INFORMACION",4, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INFO ::= cjs ruta igual cadena puntoComa mayor fincjs 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		//4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("INFO");
    E.insertar(new NodoCHTML(i)); E.insertar(new NodoCHTML("ruta=")); E.insertar(new NodoCHTML(n)); E.insertar(new NodoCHTML(";>fincjs"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("INFO",5, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INFO ::= ccss ruta igual cadena puntoComa mayor finccss 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		//4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("INFO");
    E.insertar(new NodoCHTML(i)); E.insertar(new NodoCHTML("ruta=")); E.insertar(new NodoCHTML(n)); E.insertar(new NodoCHTML(";>finccss"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("INFO",5, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INFO ::= titulo cadenasin fintitulo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		//3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("INFO");
    E.insertar(new NodoCHTML(i));  E.insertar(new NodoCHTML(n)); E.insertar(new NodoCHTML("fintitulo"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("INFO",5, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INFO ::= error fincjs 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		//3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ERROR");
    E.insertar(new NodoCHTML((String)i)); 
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("INFO",5, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INFO ::= error finccss 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		//3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ERROR");
    E.insertar(new NodoCHTML((String)i)); 
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("INFO",5, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INFO ::= error fintitulo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		//3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ERROR");
    E.insertar(new NodoCHTML((String)i)); 
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("INFO",5, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPO ::= cuerpo ELEMENTOS mayor ETIQUETAS fincuerpo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //5
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CUERPO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo);  E.insertar(new NodoCHTML(">")); E.insertar(e.nodo);E.insertar(new NodoCHTML("<fincuerpo>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUERPO ::= cuerpo ELEMENTOS mayor fincuerpo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CUERPO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo); 
    E.insertar(new NodoCHTML(">")); E.insertar(new NodoCHTML("<fincuerpo>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO ::= cuerpo mayor ETIQUETAS fincuerpo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CUERPO");
    E.insertar(new NodoCHTML(i,iright,ileft));  E.insertar(new NodoCHTML(">")); E.insertar(e.nodo);E.insertar(new NodoCHTML("<fincuerpo>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPO ::= cuerpo mayor fincuerpo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CUERPO");
    E.insertar(new NodoCHTML(i,iright,ileft));E.insertar(new NodoCHTML("><fincuerpo>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPO ::= error fincuerpo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		//3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ERROR");
    E.insertar(new NodoCHTML((String)i)); 
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ETIQUETAS ::= ETIQUETAS ETIQUETA 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter t = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ETIQUETAS");
    RESULT = new Caracter();
    E.insertar(t.nodo); E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETAS",8, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ETIQUETAS ::= ETIQUETA 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ETIQUETAS");
    RESULT = new Caracter();
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETAS",8, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ETIQUETA ::= PANEL 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ETIQUETA");
    RESULT = new Caracter();
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ETIQUETA ::= TEXTO 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ETIQUETA");
    RESULT = new Caracter();
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ETIQUETA ::= IMAGEN 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ETIQUETA");
    RESULT = new Caracter();
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ETIQUETA ::= BOTON 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ETIQUETA");
    RESULT = new Caracter();
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ETIQUETA ::= ENLACE 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ETIQUETA");
    RESULT = new Caracter();
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ETIQUETA ::= TABLA 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ETIQUETA");
    RESULT = new Caracter();
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ETIQUETA ::= TEXTOA 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ETIQUETA");
    RESULT = new Caracter();
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ETIQUETA ::= CAJATEXTO 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ETIQUETA");
    RESULT = new Caracter();
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ETIQUETA ::= CAJA 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ETIQUETA");
    RESULT = new Caracter();
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ETIQUETA ::= OPCION 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ETIQUETA");
    RESULT = new Caracter();
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ETIQUETA ::= SPINNER 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ETIQUETA");
    RESULT = new Caracter();
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ETIQUETA ::= saltofin 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ETIQUETA");
    RESULT = new Caracter();
    E.insertar(new NodoCHTML("saltofin"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PANEL ::= panel ELEMENTOS mayor ETIQUETAS finpanel 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //5
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("PANEL");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo);  E.insertar(new NodoCHTML(">")); E.insertar(e.nodo);E.insertar(new NodoCHTML("<finpanel>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("PANEL",11, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PANEL ::= panel ELEMENTOS mayor finpanel 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("PANEL");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo);  E.insertar(new NodoCHTML(">"));E.insertar(new NodoCHTML("<finpanel>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("PANEL",11, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PANEL ::= panel mayor ETIQUETAS finpanel 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("PANEL");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML(">")); E.insertar(e.nodo);E.insertar(new NodoCHTML("<finpanel>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("PANEL",11, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PANEL ::= panel mayor finpanel 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("PANEL");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("><finpanel>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("PANEL",11, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PANEL ::= error finpanel 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		//3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ERROR");
    E.insertar(new NodoCHTML((String)i)); 
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("PANEL",11, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TEXTO ::= texto cadenasin fintexto 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("TEXTO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML(n)); E.insertar(new NodoCHTML("finpanel>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("TEXTO",12, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TEXTO ::= texto mayor menor fintexto 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("TEXTO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML(">")); E.insertar(new NodoCHTML("<")); E.insertar(new NodoCHTML("finpanel>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("TEXTO",12, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TEXTO ::= error fintexto 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		//3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ERROR");
    E.insertar(new NodoCHTML((String)i)); 
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("TEXTO",12, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IMAGEN ::= imagen ELEMENTOS cadenasin finimagen 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("IMAGEN");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo);  E.insertar(new NodoCHTML(s)); E.insertar(new NodoCHTML("finimagen>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("IMAGEN",13, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IMAGEN ::= imagen ELEMENTOS mayor menor finimagen 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("IMAGEN");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo); E.insertar(new NodoCHTML("><finimagen>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("IMAGEN",13, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IMAGEN ::= imagen cadenasin finimagen 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("IMAGEN");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML(s)); E.insertar(new NodoCHTML("finimagen>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("IMAGEN",13, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IMAGEN ::= imagen mayor menor finimagen 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("IMAGEN");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("><finimagen>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("IMAGEN",13, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IMAGEN ::= error finimagen 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		//3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ERROR");
    E.insertar(new NodoCHTML((String)i)); 
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("IMAGEN",13, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELEMENTOS ::= ELEMENTOS ELEMENTO 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter t = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ELEMENTOS");
    RESULT = new Caracter();
    E.insertar(t.nodo); E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",19, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELEMENTOS ::= ELEMENTO 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ELEMENTOS");
    RESULT = new Caracter();
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",19, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELEMENTO ::= ruta igual cadena puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ELEMENTO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("=")); E.insertar(new NodoCHTML(n,nright,nleft)); E.insertar(new NodoCHTML(";"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELEMENTO ::= click igual cadena puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ELEMENTO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("=")); E.insertar(new NodoCHTML(n,nright,nleft)); E.insertar(new NodoCHTML(";"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ELEMENTO ::= idd igual cadena puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ELEMENTO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("=")); E.insertar(new NodoCHTML(n,nright,nleft)); E.insertar(new NodoCHTML(";"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELEMENTO ::= grupo igual cadena puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ELEMENTO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("=")); E.insertar(new NodoCHTML(n,nright,nleft)); E.insertar(new NodoCHTML(";"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ELEMENTO ::= alto igual cadena puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ELEMENTO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("=")); E.insertar(new NodoCHTML(n,nright,nleft)); E.insertar(new NodoCHTML(";"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ELEMENTO ::= ancho igual cadena puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ELEMENTO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("=")); E.insertar(new NodoCHTML(n,nright,nleft)); E.insertar(new NodoCHTML(";"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ELEMENTO ::= alineado igual cadena puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ELEMENTO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("=")); E.insertar(new NodoCHTML(n,nright,nleft)); E.insertar(new NodoCHTML(";"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ELEMENTO ::= valor igual cadena puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ELEMENTO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("=")); E.insertar(new NodoCHTML(n,nright,nleft)); E.insertar(new NodoCHTML(";"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ELEMENTO ::= fondo igual cadena puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ELEMENTO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("=")); E.insertar(new NodoCHTML(n,nright,nleft)); E.insertar(new NodoCHTML(";"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ELEMENTO ::= error puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		//3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ERROR");
    E.insertar(new NodoCHTML((String)i)); 
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BOTON ::= boton ELEMENTOS cadenasin finboton 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("BOTON");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo);  E.insertar(new NodoCHTML(s)); E.insertar(new NodoCHTML("finboton>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("BOTON",14, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BOTON ::= boton ELEMENTOS mayor menor finboton 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("BOTON");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo); E.insertar(new NodoCHTML("><finboton>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("BOTON",14, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BOTON ::= boton cadenasin finboton 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("BOTON");
    E.insertar(new NodoCHTML(i,iright,ileft));  E.insertar(new NodoCHTML(s)); E.insertar(new NodoCHTML("finboton>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("BOTON",14, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BOTON ::= boton mayor menor finboton 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("BOTON");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("><finboton>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("BOTON",14, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BOTON ::= error finboton 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		//3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ERROR");
    E.insertar(new NodoCHTML((String)i)); 
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("BOTON",14, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ENLACE ::= enlace ELEMENTOS cadenacon finenlace 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ENLACE");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo);  E.insertar(new NodoCHTML(s)); E.insertar(new NodoCHTML("finenlace>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ENLACE",15, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ENLACE ::= enlace ELEMENTOS mayor menor finenlace 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ENLACE");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo);  E.insertar(new NodoCHTML("><finenlace>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ENLACE",15, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ENLACE ::= enlace cadenacon finenlace 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ENLACE");
    E.insertar(new NodoCHTML(i,iright,ileft));  E.insertar(new NodoCHTML(s)); E.insertar(new NodoCHTML("finenlace>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ENLACE",15, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ENLACE ::= enlace mayor menor finenlace 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ENLACE");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("><finenlace>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ENLACE",15, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ENLACE ::= error finenlace 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		//3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ERROR");
    E.insertar(new NodoCHTML((String)i)); 
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ENLACE",15, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TABLA ::= tabla ELEMENTOS mayor LISTAFILA fintabla 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //5
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("TABLA");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo);  E.insertar(new NodoCHTML(">")); E.insertar(e.nodo);E.insertar(new NodoCHTML("<fintabla>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("TABLA",16, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TABLA ::= tabla ELEMENTOS mayor fintabla 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("TABLA");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo); E.insertar(new NodoCHTML(">")); E.insertar(new NodoCHTML("<fintabla>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("TABLA",16, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TABLA ::= tabla mayor LISTAFILA fintabla 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("TABLA");
    E.insertar(new NodoCHTML(i,iright,ileft));  E.insertar(new NodoCHTML(">")); E.insertar(e.nodo);E.insertar(new NodoCHTML("<fintabla>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("TABLA",16, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TABLA ::= tabla mayor fintabla 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("TABLA");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("><fintabla>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("TABLA",16, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TABLA ::= error fintabla 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		//3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ERROR");
    E.insertar(new NodoCHTML((String)i)); 
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("TABLA",16, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LISTAFILA ::= LISTAFILA FILA 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("LISTAFILA");
    E.insertar(n.nodo); E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("LISTAFILA",10, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LISTAFILA ::= FILA 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		 
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("LISTAFILA");
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("LISTAFILA",10, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FILA ::= filt CELDAS finfilt 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("FILA");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(e.nodo); E.insertar(new NodoCHTML("<finfilt>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("FILA",24, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FILA ::= filt finfilt 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("FILA");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("<finfilt>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("FILA",24, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FILA ::= error finfilt 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		//3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ERROR");
    E.insertar(new NodoCHTML((String)i)); 
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("FILA",24, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CELDAS ::= CELDAS CELDA 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CELDAS");
    E.insertar(n.nodo); E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CELDAS",25, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CELDAS ::= CELDA 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CELDAS");
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CELDAS",25, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CELDA ::= cb cadenasin fincb 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CELDA");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML(s,sright,sleft)); E.insertar(new NodoCHTML("fincb>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CELDA",26, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CELDA ::= cb mayor menor fincb 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CELDA");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("><")); E.insertar(new NodoCHTML("fincb>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CELDA",26, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CELDA ::= ct CONTENIDO finct 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CELDA");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo); E.insertar(new NodoCHTML("finct>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CELDA",26, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CELDA ::= ct mayor menor finct 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CELDA");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("><")); E.insertar(new NodoCHTML("fincb>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CELDA",26, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CELDA ::= error fincb 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		//3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ERROR");
    E.insertar(new NodoCHTML((String)i)); 
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CELDA",26, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CELDA ::= error finct 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		//3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ERROR");
    E.insertar(new NodoCHTML((String)i)); 
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CELDA",26, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONTENIDO ::= cadenasin 
            {
              Caracter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		 //1
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CONTENIDO");
    E.insertar(new NodoCHTML(s));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",6, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONTENIDO ::= mayor IMAGEN menor 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CONTENIDO");
    E.insertar(new NodoCHTML(">")); E.insertar(n.nodo); E.insertar(new NodoCHTML("<"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",6, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONTENIDO ::= mayor BOTON menor 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CONTENIDO");
    E.insertar(new NodoCHTML(">")); E.insertar(n.nodo); E.insertar(new NodoCHTML("<"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",6, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TEXTOA ::= textoa cadenasin fintextoa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("TEXTOA");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML(s,sright,sleft)); E.insertar(new NodoCHTML("fintextoa>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("TEXTOA",21, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TEXTOA ::= textoa mayor menor fintextoa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("TEXTOA");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("><fintextoa>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("TEXTOA",21, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TEXTOA ::= error fintextoa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		//3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ERROR");
    E.insertar(new NodoCHTML((String)i)); 
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("TEXTOA",21, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CAJATEXTO ::= cajatexto ELEMENTOS cadenasin fincajatexto 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CAJATEXTO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo);  E.insertar(new NodoCHTML(e)); E.insertar(new NodoCHTML("fincajatexto>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CAJATEXTO",17, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CAJATEXTO ::= cajatexto ELEMENTOS mayor menor fincajatexto 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CAJATEXTO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo);  E.insertar(new NodoCHTML("><fincajatexto>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CAJATEXTO",17, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CAJATEXTO ::= cajatexto cadenasin fincajatexto 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CAJATEXTO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML(e)); E.insertar(new NodoCHTML("fincajatexto>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CAJATEXTO",17, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CAJATEXTO ::= cajatexto mayor menor fincajatexto 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CAJATEXTO");
    E.insertar(new NodoCHTML(i,iright,ileft));E.insertar(new NodoCHTML("><fincajatexto>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CAJATEXTO",17, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CAJATEXTO ::= error fincajatexto 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		//3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ERROR");
    E.insertar(new NodoCHTML((String)i)); 
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CAJATEXTO",17, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CAJA ::= caja ELEMENTOS mayor OPCIONES fincaja 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //5
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CAJA");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo); E.insertar(new NodoCHTML(">")); E.insertar(e.nodo);E.insertar(new NodoCHTML("<fincaja>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CAJA",18, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CAJA ::= caja ELEMENTOS mayor fincaja 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CAJA");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo); E.insertar(new NodoCHTML(">"));E.insertar(new NodoCHTML("<fincaja>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CAJA",18, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CAJA ::= caja mayor OPCIONES fincaja 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CAJA");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML(">")); E.insertar(e.nodo);E.insertar(new NodoCHTML("<fincaja>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CAJA",18, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CAJA ::= caja mayor fincaja 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CAJA");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("><fincaja>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CAJA",18, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CAJA ::= error fincaja 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		//3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ERROR");
    E.insertar(new NodoCHTML((String)i)); 
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CAJA",18, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OPCIONES ::= OPCIONES OPCION 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("OPCIONES");
    E.insertar(n.nodo); E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("OPCIONES",27, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPCIONES ::= OPCION 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		 //1
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("OPCIONES");
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("OPCIONES",27, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OPCION ::= opcion ELEMENTOS cadenasin finopcion 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //5
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("OPCION");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo); E.insertar(new NodoCHTML(e)); E.insertar(new NodoCHTML("finopcion>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("OPCION",22, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OPCION ::= opcion ELEMENTOS mayor menor finopcion 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("OPCION");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo); E.insertar(new NodoCHTML("><finopcion>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("OPCION",22, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OPCION ::= opcion cadenasin finopcion 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("OPCION");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML(e)); E.insertar(new NodoCHTML("finopcion>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("OPCION",22, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OPCION ::= opcion mayor menor finopcion 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("OPCION");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("><finopcion>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("OPCION",22, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OPCION ::= error finopcion 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		//3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ERROR");
    E.insertar(new NodoCHTML((String)i)); 
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("OPCION",22, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SPINNER ::= spinner ELEMENTOS cadenasin finspinner 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //5
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("SPINNER");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo);  E.insertar(new NodoCHTML(">")); E.insertar(new NodoCHTML(e));E.insertar(new NodoCHTML("<finspinner>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("SPINNER",23, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SPINNER ::= spinner ELEMENTOS mayor finspinner 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("SPINNER");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo);  E.insertar(new NodoCHTML(">"));E.insertar(new NodoCHTML("<finspinner>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("SPINNER",23, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SPINNER ::= spinner cadenasin finspinner 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("SPINNER");
    E.insertar(new NodoCHTML(i,iright,ileft));  E.insertar(new NodoCHTML(">")); E.insertar(new NodoCHTML(e));E.insertar(new NodoCHTML("<finspinner>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("SPINNER",23, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SPINNER ::= spinner mayor finspinner 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("SPINNER");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("><finspinner>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("SPINNER",23, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SPINNER ::= error finspinner 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		//3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ERROR");
    E.insertar(new NodoCHTML((String)i)); 
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("SPINNER",23, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoCHTML$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoCHTML$do_action(
    int                        CUP$SintacticoCHTML$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoCHTML$parser,
    java.util.Stack            CUP$SintacticoCHTML$stack,
    int                        CUP$SintacticoCHTML$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoCHTML$do_action_part00000000(
                               CUP$SintacticoCHTML$act_num,
                               CUP$SintacticoCHTML$parser,
                               CUP$SintacticoCHTML$stack,
                               CUP$SintacticoCHTML$top);
    }
}

}
