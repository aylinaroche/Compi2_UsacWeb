
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package chtml;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoCHTML extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoCHTML() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoCHTML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoCHTML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\011\004\000\002\004\005\000\002\004\004" +
    "\000\002\006\004\000\002\006\003\000\002\007\010\000" +
    "\002\007\010\000\002\007\005\000\002\005\011\000\002" +
    "\005\010\000\002\005\005\000\002\005\004\000\002\012" +
    "\004\000\002\012\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\014\005\000\002\014\004\000\002\015\005" +
    "\000\002\015\004\000\002\016\006\000\002\016\005\000" +
    "\002\016\004\000\002\024\004\000\002\024\003\000\002" +
    "\025\006\000\002\025\010\000\002\025\006\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\017\006\000" +
    "\002\017\005\000\002\017\004\000\002\020\006\000\002" +
    "\020\005\000\002\020\004\000\002\021\007\000\002\031" +
    "\005\000\002\031\004\000\002\032\004\000\002\032\003" +
    "\000\002\033\005\000\002\033\005\000\002\033\004\000" +
    "\002\033\004\000\002\026\005\000\002\022\005\000\002" +
    "\022\004\000\002\023\005\000\002\023\004\000\002\034" +
    "\004\000\002\034\003\000\002\027\005\000\002\027\004" +
    "\000\002\030\005\000\002\030\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\004\004\005\001\002\000\004\002\000\001" +
    "\002\000\004\006\012\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\016\040\001\002\000" +
    "\004\005\037\001\002\000\012\007\013\010\020\013\016" +
    "\020\014\001\002\000\004\016\ufffc\001\002\000\004\074" +
    "\035\001\002\000\012\007\ufffa\010\ufffa\013\ufffa\020\ufffa" +
    "\001\002\000\004\012\030\001\002\000\012\007\026\010" +
    "\020\013\016\020\014\001\002\000\004\012\021\001\002" +
    "\000\004\077\022\001\002\000\004\075\023\001\002\000" +
    "\004\071\024\001\002\000\004\011\025\001\002\000\012" +
    "\007\ufff9\010\ufff9\013\ufff9\020\ufff9\001\002\000\004\016" +
    "\ufffd\001\002\000\012\007\ufffb\010\ufffb\013\ufffb\020\ufffb" +
    "\001\002\000\004\077\031\001\002\000\004\075\032\001" +
    "\002\000\004\071\033\001\002\000\004\014\034\001\002" +
    "\000\012\007\ufff8\010\ufff8\013\ufff8\020\ufff8\001\002\000" +
    "\004\021\036\001\002\000\012\007\ufff7\010\ufff7\013\ufff7" +
    "\020\ufff7\001\002\000\004\002\uffff\001\002\000\036\015" +
    "\074\017\061\022\056\024\065\026\044\031\063\033\064" +
    "\035\060\037\072\047\050\051\054\053\073\056\046\060" +
    "\052\001\002\000\004\005\ufffe\001\002\000\036\017\ufff0" +
    "\022\ufff0\023\ufff0\024\ufff0\026\ufff0\031\ufff0\033\ufff0\035" +
    "\ufff0\037\ufff0\047\ufff0\051\ufff0\053\ufff0\056\ufff0\060\ufff0" +
    "\001\002\000\036\017\uffee\022\uffee\023\uffee\024\uffee\026" +
    "\uffee\031\uffee\033\uffee\035\uffee\037\uffee\047\uffee\051\uffee" +
    "\053\uffee\056\uffee\060\uffee\001\002\000\006\027\236\074" +
    "\237\001\002\000\036\017\uffed\022\uffed\023\uffed\024\uffed" +
    "\026\uffed\031\uffed\033\uffed\035\uffed\037\uffed\047\uffed\051" +
    "\uffed\053\uffed\056\uffed\060\uffed\001\002\000\006\057\233" +
    "\067\234\001\002\000\034\017\232\022\056\024\065\026" +
    "\044\031\063\033\064\035\060\037\072\047\050\051\054" +
    "\053\073\056\046\060\052\001\002\000\004\074\230\001" +
    "\002\000\036\017\ufff1\022\ufff1\023\ufff1\024\ufff1\026\ufff1" +
    "\031\ufff1\033\ufff1\035\ufff1\037\ufff1\047\ufff1\051\ufff1\053" +
    "\ufff1\056\ufff1\060\ufff1\001\002\000\036\017\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\026\uffe5\031\uffe5\033\uffe5\035\uffe5\037" +
    "\uffe5\047\uffe5\051\uffe5\053\uffe5\056\uffe5\060\uffe5\001\002" +
    "\000\036\017\uffe9\022\uffe9\023\uffe9\024\uffe9\026\uffe9\031" +
    "\uffe9\033\uffe9\035\uffe9\037\uffe9\047\uffe9\051\uffe9\053\uffe9" +
    "\056\uffe9\060\uffe9\001\002\000\006\052\225\053\073\001" +
    "\002\000\036\017\uffe7\022\uffe7\023\uffe7\024\uffe7\026\uffe7" +
    "\031\uffe7\033\uffe7\035\uffe7\037\uffe7\047\uffe7\051\uffe7\053" +
    "\uffe7\056\uffe7\060\uffe7\001\002\000\034\022\056\023\220" +
    "\024\065\026\044\031\063\033\064\035\060\037\072\047" +
    "\050\051\054\053\073\056\046\060\052\001\002\000\036" +
    "\017\uffeb\022\uffeb\023\uffeb\024\uffeb\026\uffeb\031\uffeb\033" +
    "\uffeb\035\uffeb\037\uffeb\047\uffeb\051\uffeb\053\uffeb\056\uffeb" +
    "\060\uffeb\001\002\000\030\012\134\030\147\036\213\055" +
    "\136\061\146\062\150\063\137\064\145\065\144\076\214" +
    "\100\140\001\002\000\004\005\ufff3\001\002\000\036\017" +
    "\uffec\022\uffec\023\uffec\024\uffec\026\uffec\031\uffec\033\uffec" +
    "\035\uffec\037\uffec\047\uffec\051\uffec\053\uffec\056\uffec\060" +
    "\uffec\001\002\000\030\012\134\030\147\032\206\055\136" +
    "\061\146\062\150\063\137\064\145\065\144\076\205\100" +
    "\140\001\002\000\030\012\134\030\147\034\143\055\136" +
    "\061\146\062\150\063\137\064\145\065\144\076\141\100" +
    "\140\001\002\000\006\025\132\076\131\001\002\000\036" +
    "\017\uffef\022\uffef\023\uffef\024\uffef\026\uffef\031\uffef\033" +
    "\uffef\035\uffef\037\uffef\047\uffef\051\uffef\053\uffef\056\uffef" +
    "\060\uffef\001\002\000\036\017\uffe8\022\uffe8\023\uffe8\024" +
    "\uffe8\026\uffe8\031\uffe8\033\uffe8\035\uffe8\037\uffe8\047\uffe8" +
    "\051\uffe8\053\uffe8\056\uffe8\060\uffe8\001\002\000\036\017" +
    "\uffea\022\uffea\023\uffea\024\uffea\026\uffea\031\uffea\033\uffea" +
    "\035\uffea\037\uffea\047\uffea\051\uffea\053\uffea\056\uffea\060" +
    "\uffea\001\002\000\036\017\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\026\uffe6\031\uffe6\033\uffe6\035\uffe6\037\uffe6\047\uffe6\051" +
    "\uffe6\053\uffe6\056\uffe6\060\uffe6\001\002\000\004\041\107" +
    "\001\002\000\006\054\105\076\104\001\002\000\004\077" +
    "\075\001\002\000\004\075\076\001\002\000\004\071\077" +
    "\001\002\000\034\017\101\022\056\024\065\026\044\031" +
    "\063\033\064\035\060\037\072\047\050\051\054\053\073" +
    "\056\046\060\052\001\002\000\034\017\103\022\056\024" +
    "\065\026\044\031\063\033\064\035\060\037\072\047\050" +
    "\051\054\053\073\056\046\060\052\001\002\000\004\005" +
    "\ufff5\001\002\000\036\017\ufff2\022\ufff2\023\ufff2\024\ufff2" +
    "\026\ufff2\031\ufff2\033\ufff2\035\ufff2\037\ufff2\047\ufff2\051" +
    "\ufff2\053\ufff2\056\ufff2\060\ufff2\001\002\000\004\005\ufff6" +
    "\001\002\000\004\054\106\001\002\000\040\017\uffbb\022" +
    "\uffbb\023\uffbb\024\uffbb\026\uffbb\031\uffbb\033\uffbb\035\uffbb" +
    "\037\uffbb\047\uffbb\051\uffbb\052\uffbb\053\uffbb\056\uffbb\060" +
    "\uffbb\001\002\000\040\017\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\026\uffbc\031\uffbc\033\uffbc\035\uffbc\037\uffbc\047\uffbc\051" +
    "\uffbc\052\uffbc\053\uffbc\056\uffbc\060\uffbc\001\002\000\010" +
    "\042\120\043\114\045\116\001\002\000\004\040\111\001" +
    "\002\000\004\037\112\001\002\000\004\040\113\001\002" +
    "\000\036\017\uffcc\022\uffcc\023\uffcc\024\uffcc\026\uffcc\031" +
    "\uffcc\033\uffcc\035\uffcc\037\uffcc\047\uffcc\051\uffcc\053\uffcc" +
    "\056\uffcc\060\uffcc\001\002\000\006\026\126\044\127\001" +
    "\002\000\010\042\125\043\114\045\116\001\002\000\006" +
    "\026\121\046\122\001\002\000\010\042\uffc8\043\uffc8\045" +
    "\uffc8\001\002\000\004\040\uffca\001\002\000\004\046\123" +
    "\001\002\000\010\042\uffc4\043\uffc4\045\uffc4\001\002\000" +
    "\010\042\uffc6\043\uffc6\045\uffc6\001\002\000\010\042\uffc9" +
    "\043\uffc9\045\uffc9\001\002\000\004\040\uffcb\001\002\000" +
    "\004\044\130\001\002\000\010\042\uffc5\043\uffc5\045\uffc5" +
    "\001\002\000\010\042\uffc7\043\uffc7\045\uffc7\001\002\000" +
    "\004\025\133\001\002\000\036\017\uffc1\022\uffc1\023\uffc1" +
    "\024\uffc1\026\uffc1\031\uffc1\033\uffc1\035\uffc1\037\uffc1\047" +
    "\uffc1\051\uffc1\053\uffc1\056\uffc1\060\uffc1\001\002\000\036" +
    "\017\uffc2\022\uffc2\023\uffc2\024\uffc2\026\uffc2\031\uffc2\033" +
    "\uffc2\035\uffc2\037\uffc2\047\uffc2\051\uffc2\053\uffc2\056\uffc2" +
    "\060\uffc2\001\002\000\004\077\201\001\002\000\026\012" +
    "\134\030\147\055\136\061\146\062\150\063\137\064\145" +
    "\065\144\076\176\100\140\001\002\000\004\077\174\001" +
    "\002\000\004\077\172\001\002\000\004\077\170\001\002" +
    "\000\004\034\167\001\002\000\026\012\uffdc\030\uffdc\055" +
    "\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\076\uffdc" +
    "\100\uffdc\001\002\000\036\017\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\026\uffd0\031\uffd0\033\uffd0\035\uffd0\037\uffd0\047\uffd0" +
    "\051\uffd0\053\uffd0\056\uffd0\060\uffd0\001\002\000\004\077" +
    "\164\001\002\000\004\077\162\001\002\000\004\077\160" +
    "\001\002\000\004\077\153\001\002\000\004\077\151\001" +
    "\002\000\004\067\152\001\002\000\026\012\uffd7\030\uffd7" +
    "\055\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\076" +
    "\uffd7\100\uffd7\001\002\000\004\066\154\001\002\000\004" +
    "\072\155\001\002\000\004\073\156\001\002\000\004\071" +
    "\157\001\002\000\026\012\uffda\030\uffda\055\uffda\061\uffda" +
    "\062\uffda\063\uffda\064\uffda\065\uffda\076\uffda\100\uffda\001" +
    "\002\000\004\066\161\001\002\000\026\012\uffd8\030\uffd8" +
    "\055\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\076" +
    "\uffd8\100\uffd8\001\002\000\004\066\163\001\002\000\026" +
    "\012\uffd5\030\uffd5\055\uffd5\061\uffd5\062\uffd5\063\uffd5\064" +
    "\uffd5\065\uffd5\076\uffd5\100\uffd5\001\002\000\004\066\165" +
    "\001\002\000\004\071\166\001\002\000\026\012\uffd9\030" +
    "\uffd9\055\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9" +
    "\076\uffd9\100\uffd9\001\002\000\036\017\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\026\uffd1\031\uffd1\033\uffd1\035\uffd1\037\uffd1" +
    "\047\uffd1\051\uffd1\053\uffd1\056\uffd1\060\uffd1\001\002\000" +
    "\004\066\171\001\002\000\026\012\uffd4\030\uffd4\055\uffd4" +
    "\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\076\uffd4\100" +
    "\uffd4\001\002\000\004\067\173\001\002\000\026\012\uffd6" +
    "\030\uffd6\055\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6\065" +
    "\uffd6\076\uffd6\100\uffd6\001\002\000\004\075\175\001\002" +
    "\000\026\012\uffd3\030\uffd3\055\uffd3\061\uffd3\062\uffd3\063" +
    "\uffd3\064\uffd3\065\uffd3\076\uffd3\100\uffd3\001\002\000\004" +
    "\034\200\001\002\000\026\012\uffdd\030\uffdd\055\uffdd\061" +
    "\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\076\uffdd\100\uffdd" +
    "\001\002\000\036\017\uffd2\022\uffd2\023\uffd2\024\uffd2\026" +
    "\uffd2\031\uffd2\033\uffd2\035\uffd2\037\uffd2\047\uffd2\051\uffd2" +
    "\053\uffd2\056\uffd2\060\uffd2\001\002\000\004\075\202\001" +
    "\002\000\004\071\203\001\002\000\026\012\uffdb\030\uffdb" +
    "\055\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\076" +
    "\uffdb\100\uffdb\001\002\000\026\012\134\030\147\055\136" +
    "\061\146\062\150\063\137\064\145\065\144\076\210\100" +
    "\140\001\002\000\004\032\207\001\002\000\036\017\uffde" +
    "\022\uffde\023\uffde\024\uffde\026\uffde\031\uffde\033\uffde\035" +
    "\uffde\037\uffde\047\uffde\051\uffde\053\uffde\056\uffde\060\uffde" +
    "\001\002\000\036\017\uffdf\022\uffdf\023\uffdf\024\uffdf\026" +
    "\uffdf\031\uffdf\033\uffdf\035\uffdf\037\uffdf\047\uffdf\051\uffdf" +
    "\053\uffdf\056\uffdf\060\uffdf\001\002\000\004\032\211\001" +
    "\002\000\036\017\uffe0\022\uffe0\023\uffe0\024\uffe0\026\uffe0" +
    "\031\uffe0\033\uffe0\035\uffe0\037\uffe0\047\uffe0\051\uffe0\053" +
    "\uffe0\056\uffe0\060\uffe0\001\002\000\026\012\134\030\147" +
    "\055\136\061\146\062\150\063\137\064\145\065\144\076" +
    "\216\100\140\001\002\000\036\017\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\026\uffcd\031\uffcd\033\uffcd\035\uffcd\037\uffcd\047" +
    "\uffcd\051\uffcd\053\uffcd\056\uffcd\060\uffcd\001\002\000\004" +
    "\036\215\001\002\000\036\017\uffce\022\uffce\023\uffce\024" +
    "\uffce\026\uffce\031\uffce\033\uffce\035\uffce\037\uffce\047\uffce" +
    "\051\uffce\053\uffce\056\uffce\060\uffce\001\002\000\004\036" +
    "\217\001\002\000\036\017\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\026\uffcf\031\uffcf\033\uffcf\035\uffcf\037\uffcf\047\uffcf\051" +
    "\uffcf\053\uffcf\056\uffcf\060\uffcf\001\002\000\036\017\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\026\uffe3\031\uffe3\033\uffe3\035" +
    "\uffe3\037\uffe3\047\uffe3\051\uffe3\053\uffe3\056\uffe3\060\uffe3" +
    "\001\002\000\034\022\056\023\222\024\065\026\044\031" +
    "\063\033\064\035\060\037\072\047\050\051\054\053\073" +
    "\056\046\060\052\001\002\000\036\017\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\026\uffe4\031\uffe4\033\uffe4\035\uffe4\037\uffe4" +
    "\047\uffe4\051\uffe4\053\uffe4\056\uffe4\060\uffe4\001\002\000" +
    "\006\052\uffbd\053\uffbd\001\002\000\006\052\227\053\073" +
    "\001\002\000\036\017\uffbf\022\uffbf\023\uffbf\024\uffbf\026" +
    "\uffbf\031\uffbf\033\uffbf\035\uffbf\037\uffbf\047\uffbf\051\uffbf" +
    "\053\uffbf\056\uffbf\060\uffbf\001\002\000\006\052\uffbe\053" +
    "\uffbe\001\002\000\036\017\uffc0\022\uffc0\023\uffc0\024\uffc0" +
    "\026\uffc0\031\uffc0\033\uffc0\035\uffc0\037\uffc0\047\uffc0\051" +
    "\uffc0\053\uffc0\056\uffc0\060\uffc0\001\002\000\004\050\231" +
    "\001\002\000\036\017\uffc3\022\uffc3\023\uffc3\024\uffc3\026" +
    "\uffc3\031\uffc3\033\uffc3\035\uffc3\037\uffc3\047\uffc3\051\uffc3" +
    "\053\uffc3\056\uffc3\060\uffc3\001\002\000\004\005\ufff4\001" +
    "\002\000\036\017\uffb9\022\uffb9\023\uffb9\024\uffb9\026\uffb9" +
    "\031\uffb9\033\uffb9\035\uffb9\037\uffb9\047\uffb9\051\uffb9\053" +
    "\uffb9\056\uffb9\060\uffb9\001\002\000\004\057\235\001\002" +
    "\000\036\017\uffba\022\uffba\023\uffba\024\uffba\026\uffba\031" +
    "\uffba\033\uffba\035\uffba\037\uffba\047\uffba\051\uffba\053\uffba" +
    "\056\uffba\060\uffba\001\002\000\036\017\uffe1\022\uffe1\023" +
    "\uffe1\024\uffe1\026\uffe1\031\uffe1\033\uffe1\035\uffe1\037\uffe1" +
    "\047\uffe1\051\uffe1\053\uffe1\056\uffe1\060\uffe1\001\002\000" +
    "\004\027\240\001\002\000\036\017\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\026\uffe2\031\uffe2\033\uffe2\035\uffe2\037\uffe2\047" +
    "\uffe2\051\uffe2\053\uffe2\056\uffe2\060\uffe2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\006\004\007\011\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\040\001\001\000\002\001" +
    "\001\000\006\006\016\007\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\012\046\013\050\014\041\015" +
    "\065\016\042\017\044\020\061\021\056\022\052\023\066" +
    "\026\067\027\054\030\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\013\101\014\041\015" +
    "\065\016\042\017\044\020\061\021\056\022\052\023\066" +
    "\026\067\027\054\030\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\222\034\223\001\001\000\002\001\001\000\034\012" +
    "\220\013\050\014\041\015\065\016\042\017\044\020\061" +
    "\021\056\022\052\023\066\026\067\027\054\030\070\001" +
    "\001\000\002\001\001\000\006\024\211\025\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\024\203\025" +
    "\141\001\001\000\006\024\134\025\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\012\077\013\050\014\041\015\065\016\042" +
    "\017\044\020\061\021\056\022\052\023\066\026\067\027" +
    "\054\030\070\001\001\000\032\013\101\014\041\015\065" +
    "\016\042\017\044\020\061\021\056\022\052\023\066\026" +
    "\067\027\054\030\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\032\114\033\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\013\101\014\041\015\065\016\042\017\044" +
    "\020\061\021\056\022\052\023\066\026\067\027\054\030" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\225\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoCHTML$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoCHTML$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoCHTML$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }


// METODOS Y VARIABLES GLOBALES DEL PARSER, PUEDEN SER PUBLICAS O PRIVADAS

 
public void syntax_error(Symbol s){
/**Metodo al que se llama automaticamente ante algun error sintactico.*/
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
int linea = s.right+1; int columna = s.left; 
String texto = "Identificador " +s.value + " no reconocido.";

}            
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
/**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
        System.out.println("Error Sintactico no recuperable en la Linea " + (s.right+1)+ " Columna "+s.left+". Identificador " + s.value + " no reconocido.");
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoCHTML$actions {



  private final SintacticoCHTML parser;

  /** Constructor */
  CUP$SintacticoCHTML$actions(SintacticoCHTML parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoCHTML$do_action_part00000000(
    int                        CUP$SintacticoCHTML$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoCHTML$parser,
    java.util.Stack            CUP$SintacticoCHTML$stack,
    int                        CUP$SintacticoCHTML$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoCHTML$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoCHTML$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter start_val = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoCHTML$parser.done_parsing();
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= RAIZ 
            {
              Caracter RESULT =null;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // RAIZ ::= chtml HTML finchtml 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("RAIZ",1, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // HTML ::= ENCABEZADO CUERPO 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("HTML",7, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ENCABEZADO ::= encabezado INFORMACION finencabezado 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",2, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ENCABEZADO ::= encabezado finencabezado 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",2, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INFORMACION ::= INFORMACION I 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("INFORMACION",4, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INFORMACION ::= I 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("INFORMACION",4, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // I ::= cjs ruta igual cadena puntoComa fincjs 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("I",5, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // I ::= ccss ruta igual cadena puntoComa finccss 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("I",5, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // I ::= titulo cadenacon fintitulo 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("I",5, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPO ::= cuerpo fondo igual cadena puntoComa ETIQUETAS fincuerpo 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO ::= cuerpo fondo igual cadena puntoComa fincuerpo 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO ::= cuerpo ETIQUETAS fincuerpo 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPO ::= cuerpo fincuerpo 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ETIQUETAS ::= ETIQUETAS ETIQUETA 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETAS",8, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ETIQUETAS ::= ETIQUETA 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETAS",8, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ETIQUETA ::= PANEL 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ETIQUETA ::= TEXTO 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ETIQUETA ::= IMAGEN 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ETIQUETA ::= BOTON 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ETIQUETA ::= ENLACE 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ETIQUETA ::= TABLA 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ETIQUETA ::= TEXTOA 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ETIQUETA ::= CAJATEXTO 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ETIQUETA ::= CAJA 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ETIQUETA ::= OPCION 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ETIQUETA ::= SPINNER 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ETIQUETA ::= saltofin 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PANEL ::= panel ETIQUETAS finpanel 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("PANEL",10, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PANEL ::= panel finpanel 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("PANEL",10, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TEXTO ::= texto cadenacon fintexto 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("TEXTO",11, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TEXTO ::= texto fintexto 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("TEXTO",11, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IMAGEN ::= imagen ELEMENTOS cadenasin finimagen 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("IMAGEN",12, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IMAGEN ::= imagen cadenasin finimagen 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("IMAGEN",12, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IMAGEN ::= imagen finimagen 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("IMAGEN",12, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ELEMENTOS ::= ELEMENTOS ELEMENTO 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",18, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ELEMENTOS ::= ELEMENTO 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",18, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ELEMENTO ::= ruta igual cadena puntoComa 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",19, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ELEMENTO ::= click igual id parentesisA parentesisC puntoComa 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",19, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ELEMENTO ::= idd igual id puntoComa 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",19, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ELEMENTO ::= grupo igual id 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",19, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ELEMENTO ::= alto igual entero 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",19, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ELEMENTO ::= ancho igual entero 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",19, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELEMENTO ::= alineado igual id 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",19, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELEMENTO ::= css igual id 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",19, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELEMENTO ::= valor igual cadena 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",19, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BOTON ::= boton ELEMENTOS cadenasin finboton 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("BOTON",13, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BOTON ::= boton cadenasin finboton 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("BOTON",13, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BOTON ::= boton finboton 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("BOTON",13, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ENLACE ::= enlace ELEMENTOS cadenasin finenlace 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ENLACE",14, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ENLACE ::= enlace cadenasin finenlace 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ENLACE",14, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ENLACE ::= enlace finenlace 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ENLACE",14, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TABLA ::= tabla FILA fintabla tabla fintabla 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("TABLA",15, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FILA ::= filt CELDAS finfilt 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("FILA",23, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FILA ::= filt finfilt 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("FILA",23, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CELDAS ::= CELDAS CELDA 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CELDAS",24, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CELDAS ::= CELDA 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CELDAS",24, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CELDA ::= cb texto fincb 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CELDA",25, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CELDA ::= ct texto finct 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CELDA",25, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CELDA ::= cb fincb 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CELDA",25, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CELDA ::= ct finct 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CELDA",25, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TEXTOA ::= textoa cadenacon fintextoa 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("TEXTOA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CAJATEXTO ::= cajatexto cadenasin fincajatexto 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CAJATEXTO",16, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CAJATEXTO ::= cajatexto fincajatexto 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CAJATEXTO",16, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CAJA ::= caja OPCIONES fincaja 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CAJA",17, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CAJA ::= caja fincaja 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CAJA",17, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPCIONES ::= OPCIONES OPCION 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("OPCIONES",26, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPCIONES ::= OPCION 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("OPCIONES",26, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPCION ::= opcion cadenasin finopcion 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPCION ::= opcion finopcion 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("OPCION",21, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SPINNER ::= spinner entero finspinner 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("SPINNER",22, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SPINNER ::= spinner finspinner 
            {
              Caracter RESULT =null;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("SPINNER",22, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoCHTML$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoCHTML$do_action(
    int                        CUP$SintacticoCHTML$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoCHTML$parser,
    java.util.Stack            CUP$SintacticoCHTML$stack,
    int                        CUP$SintacticoCHTML$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoCHTML$do_action_part00000000(
                               CUP$SintacticoCHTML$act_num,
                               CUP$SintacticoCHTML$parser,
                               CUP$SintacticoCHTML$stack,
                               CUP$SintacticoCHTML$top);
    }
}

}
