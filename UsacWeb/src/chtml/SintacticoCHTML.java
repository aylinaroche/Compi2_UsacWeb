
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package chtml;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoCHTML extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoCHTML() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoCHTML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoCHTML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\011\004\000\002\004\005\000\002\004\004" +
    "\000\002\006\004\000\002\006\003\000\002\007\011\000" +
    "\002\007\011\000\002\007\005\000\002\005\007\000\002" +
    "\005\006\000\002\005\006\000\002\005\005\000\002\012" +
    "\004\000\002\012\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\015\007\000\002\015\006\000\002\015\006" +
    "\000\002\015\005\000\002\016\005\000\002\016\006\000" +
    "\002\017\006\000\002\017\007\000\002\017\005\000\002" +
    "\017\006\000\002\025\004\000\002\025\003\000\002\026" +
    "\006\000\002\026\006\000\002\026\006\000\002\026\006" +
    "\000\002\026\006\000\002\026\006\000\002\026\006\000" +
    "\002\026\006\000\002\026\006\000\002\020\006\000\002" +
    "\020\007\000\002\020\005\000\002\020\006\000\002\021" +
    "\006\000\002\021\007\000\002\021\005\000\002\021\006" +
    "\000\002\022\007\000\002\022\006\000\002\022\006\000" +
    "\002\022\005\000\002\014\004\000\002\014\003\000\002" +
    "\032\005\000\002\032\004\000\002\033\004\000\002\033" +
    "\003\000\002\034\005\000\002\034\006\000\002\034\005" +
    "\000\002\034\006\000\002\010\003\000\002\010\005\000" +
    "\002\010\005\000\002\027\005\000\002\027\006\000\002" +
    "\023\006\000\002\023\007\000\002\023\005\000\002\023" +
    "\006\000\002\024\007\000\002\024\006\000\002\024\006" +
    "\000\002\024\005\000\002\035\004\000\002\035\003\000" +
    "\002\030\006\000\002\030\007\000\002\030\005\000\002" +
    "\030\006\000\002\031\006\000\002\031\006\000\002\031" +
    "\005\000\002\031\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\351\000\004\004\005\001\002\000\004\002\000\001" +
    "\002\000\004\006\012\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\016\042\001\002\000" +
    "\004\005\041\001\002\000\012\007\013\010\020\013\016" +
    "\020\015\001\002\000\004\016\ufffc\001\002\000\012\007" +
    "\ufffa\010\ufffa\013\ufffa\020\ufffa\001\002\000\004\074\037" +
    "\001\002\000\004\012\031\001\002\000\012\007\027\010" +
    "\020\013\016\020\015\001\002\000\004\012\021\001\002" +
    "\000\004\077\022\001\002\000\004\075\023\001\002\000" +
    "\004\071\024\001\002\000\004\102\025\001\002\000\004" +
    "\011\026\001\002\000\012\007\ufff9\010\ufff9\013\ufff9\020" +
    "\ufff9\001\002\000\004\016\ufffd\001\002\000\012\007\ufffb" +
    "\010\ufffb\013\ufffb\020\ufffb\001\002\000\004\077\032\001" +
    "\002\000\004\075\033\001\002\000\004\071\034\001\002" +
    "\000\004\102\035\001\002\000\004\014\036\001\002\000" +
    "\012\007\ufff8\010\ufff8\013\ufff8\020\ufff8\001\002\000\004" +
    "\021\040\001\002\000\012\007\ufff7\010\ufff7\013\ufff7\020" +
    "\ufff7\001\002\000\004\002\uffff\001\002\000\026\012\044" +
    "\015\050\030\056\055\046\061\054\062\057\063\047\064" +
    "\053\065\052\102\055\001\002\000\004\005\ufffe\001\002" +
    "\000\004\077\351\001\002\000\026\012\044\015\050\030" +
    "\056\055\046\061\054\062\057\063\047\064\053\065\052" +
    "\102\345\001\002\000\004\077\342\001\002\000\004\077" +
    "\337\001\002\000\004\077\334\001\002\000\032\012\uffd9" +
    "\015\uffd9\030\uffd9\055\uffd9\061\uffd9\062\uffd9\063\uffd9\064" +
    "\uffd9\065\uffd9\074\uffd9\076\uffd9\102\uffd9\001\002\000\004" +
    "\077\331\001\002\000\004\077\326\001\002\000\004\077" +
    "\323\001\002\000\034\017\105\022\102\024\111\026\070" +
    "\031\107\033\110\035\104\037\116\047\074\051\100\053" +
    "\117\056\072\060\076\001\002\000\004\077\063\001\002" +
    "\000\004\077\060\001\002\000\004\075\061\001\002\000" +
    "\004\071\062\001\002\000\032\012\uffd4\015\uffd4\030\uffd4" +
    "\055\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\074" +
    "\uffd4\076\uffd4\102\uffd4\001\002\000\004\075\064\001\002" +
    "\000\004\071\065\001\002\000\032\012\uffd7\015\uffd7\030" +
    "\uffd7\055\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7" +
    "\074\uffd7\076\uffd7\102\uffd7\001\002\000\036\017\ufff0\022" +
    "\ufff0\023\ufff0\024\ufff0\026\ufff0\031\ufff0\033\ufff0\035\ufff0" +
    "\037\ufff0\047\ufff0\051\ufff0\053\ufff0\056\ufff0\060\ufff0\001" +
    "\002\000\036\017\uffee\022\uffee\023\uffee\024\uffee\026\uffee" +
    "\031\uffee\033\uffee\035\uffee\037\uffee\047\uffee\051\uffee\053" +
    "\uffee\056\uffee\060\uffee\001\002\000\006\076\316\102\317" +
    "\001\002\000\036\017\uffed\022\uffed\023\uffed\024\uffed\026" +
    "\uffed\031\uffed\033\uffed\035\uffed\037\uffed\047\uffed\051\uffed" +
    "\053\uffed\056\uffed\060\uffed\001\002\000\030\012\044\015" +
    "\050\030\056\055\046\061\054\062\057\063\047\064\053" +
    "\065\052\076\306\102\307\001\002\000\034\017\304\022" +
    "\102\024\111\026\070\031\107\033\110\035\104\037\116" +
    "\047\074\051\100\053\117\056\072\060\076\001\002\000" +
    "\006\076\277\102\300\001\002\000\036\017\ufff1\022\ufff1" +
    "\023\ufff1\024\ufff1\026\ufff1\031\ufff1\033\ufff1\035\ufff1\037" +
    "\ufff1\047\ufff1\051\ufff1\053\ufff1\056\ufff1\060\ufff1\001\002" +
    "\000\036\017\uffe5\022\uffe5\023\uffe5\024\uffe5\026\uffe5\031" +
    "\uffe5\033\uffe5\035\uffe5\037\uffe5\047\uffe5\051\uffe5\053\uffe5" +
    "\056\uffe5\060\uffe5\001\002\000\036\017\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\026\uffe9\031\uffe9\033\uffe9\035\uffe9\037\uffe9" +
    "\047\uffe9\051\uffe9\053\uffe9\056\uffe9\060\uffe9\001\002\000" +
    "\026\012\044\015\050\030\056\055\046\061\054\062\057" +
    "\063\047\064\053\065\052\102\265\001\002\000\036\017" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\026\uffe7\031\uffe7\033\uffe7" +
    "\035\uffe7\037\uffe7\047\uffe7\051\uffe7\053\uffe7\056\uffe7\060" +
    "\uffe7\001\002\000\026\012\044\015\050\030\056\055\046" +
    "\061\054\062\057\063\047\064\053\065\052\102\253\001" +
    "\002\000\036\017\uffeb\022\uffeb\023\uffeb\024\uffeb\026\uffeb" +
    "\031\uffeb\033\uffeb\035\uffeb\037\uffeb\047\uffeb\051\uffeb\053" +
    "\uffeb\056\uffeb\060\uffeb\001\002\000\030\012\044\015\050" +
    "\030\056\055\046\061\054\062\057\063\047\064\053\065" +
    "\052\074\241\102\240\001\002\000\004\005\ufff3\001\002" +
    "\000\036\017\uffec\022\uffec\023\uffec\024\uffec\026\uffec\031" +
    "\uffec\033\uffec\035\uffec\037\uffec\047\uffec\051\uffec\053\uffec" +
    "\056\uffec\060\uffec\001\002\000\030\012\044\015\050\030" +
    "\056\055\046\061\054\062\057\063\047\064\053\065\052" +
    "\076\225\102\226\001\002\000\030\012\044\015\050\030" +
    "\056\055\046\061\054\062\057\063\047\064\053\065\052" +
    "\076\212\102\213\001\002\000\030\012\044\015\050\030" +
    "\056\055\046\061\054\062\057\063\047\064\053\065\052" +
    "\076\177\102\200\001\002\000\036\017\uffef\022\uffef\023" +
    "\uffef\024\uffef\026\uffef\031\uffef\033\uffef\035\uffef\037\uffef" +
    "\047\uffef\051\uffef\053\uffef\056\uffef\060\uffef\001\002\000" +
    "\036\017\uffe8\022\uffe8\023\uffe8\024\uffe8\026\uffe8\031\uffe8" +
    "\033\uffe8\035\uffe8\037\uffe8\047\uffe8\051\uffe8\053\uffe8\056" +
    "\uffe8\060\uffe8\001\002\000\036\017\uffea\022\uffea\023\uffea" +
    "\024\uffea\026\uffea\031\uffea\033\uffea\035\uffea\037\uffea\047" +
    "\uffea\051\uffea\053\uffea\056\uffea\060\uffea\001\002\000\036" +
    "\017\uffe6\022\uffe6\023\uffe6\024\uffe6\026\uffe6\031\uffe6\033" +
    "\uffe6\035\uffe6\037\uffe6\047\uffe6\051\uffe6\053\uffe6\056\uffe6" +
    "\060\uffe6\001\002\000\026\012\044\015\050\030\056\055" +
    "\046\061\054\062\057\063\047\064\053\065\052\102\135" +
    "\001\002\000\030\012\044\015\050\030\056\055\046\061" +
    "\054\062\057\063\047\064\053\065\052\076\121\102\122" +
    "\001\002\000\030\012\044\015\050\030\056\055\046\061" +
    "\054\062\057\063\047\064\053\065\052\076\126\102\130" +
    "\001\002\000\004\054\125\001\002\000\004\103\123\001" +
    "\002\000\004\054\124\001\002\000\040\017\uffa7\022\uffa7" +
    "\023\uffa7\024\uffa7\026\uffa7\031\uffa7\033\uffa7\035\uffa7\037" +
    "\uffa7\047\uffa7\051\uffa7\052\uffa7\053\uffa7\056\uffa7\060\uffa7" +
    "\001\002\000\040\017\uffa8\022\uffa8\023\uffa8\024\uffa8\026" +
    "\uffa8\031\uffa8\033\uffa8\035\uffa8\037\uffa8\047\uffa8\051\uffa8" +
    "\052\uffa8\053\uffa8\056\uffa8\060\uffa8\001\002\000\004\054" +
    "\133\001\002\000\032\012\uffda\015\uffda\030\uffda\055\uffda" +
    "\061\uffda\062\uffda\063\uffda\064\uffda\065\uffda\074\uffda\076" +
    "\uffda\102\uffda\001\002\000\004\103\131\001\002\000\004" +
    "\054\132\001\002\000\040\017\uffa9\022\uffa9\023\uffa9\024" +
    "\uffa9\026\uffa9\031\uffa9\033\uffa9\035\uffa9\037\uffa9\047\uffa9" +
    "\051\uffa9\052\uffa9\053\uffa9\056\uffa9\060\uffa9\001\002\000" +
    "\040\017\uffaa\022\uffaa\023\uffaa\024\uffaa\026\uffaa\031\uffaa" +
    "\033\uffaa\035\uffaa\037\uffaa\047\uffaa\051\uffaa\052\uffaa\053" +
    "\uffaa\056\uffaa\060\uffaa\001\002\000\026\012\044\015\050" +
    "\030\056\055\046\061\054\062\057\063\047\064\053\065" +
    "\052\102\172\001\002\000\006\040\141\041\136\001\002" +
    "\000\010\042\150\043\144\045\146\001\002\000\006\040" +
    "\143\041\136\001\002\000\006\040\uffc2\041\uffc2\001\002" +
    "\000\036\017\uffc4\022\uffc4\023\uffc4\024\uffc4\026\uffc4\031" +
    "\uffc4\033\uffc4\035\uffc4\037\uffc4\047\uffc4\051\uffc4\053\uffc4" +
    "\056\uffc4\060\uffc4\001\002\000\006\040\uffc3\041\uffc3\001" +
    "\002\000\036\017\uffc5\022\uffc5\023\uffc5\024\uffc5\026\uffc5" +
    "\031\uffc5\033\uffc5\035\uffc5\037\uffc5\047\uffc5\051\uffc5\053" +
    "\uffc5\056\uffc5\060\uffc5\001\002\000\006\076\165\102\166" +
    "\001\002\000\010\042\164\043\144\045\146\001\002\000" +
    "\006\076\151\102\153\001\002\000\010\042\uffbe\043\uffbe" +
    "\045\uffbe\001\002\000\006\040\uffc0\041\uffc0\001\002\000" +
    "\004\046\uffb9\001\002\000\004\046\162\001\002\000\010" +
    "\031\107\033\110\103\156\001\002\000\004\103\161\001" +
    "\002\000\004\103\160\001\002\000\004\046\157\001\002" +
    "\000\010\042\uffba\043\uffba\045\uffba\001\002\000\004\046" +
    "\uffb8\001\002\000\004\046\uffb7\001\002\000\010\042\uffbb" +
    "\043\uffbb\045\uffbb\001\002\000\010\042\uffbf\043\uffbf\045" +
    "\uffbf\001\002\000\006\040\uffc1\041\uffc1\001\002\000\004" +
    "\044\171\001\002\000\004\103\167\001\002\000\004\044" +
    "\170\001\002\000\010\042\uffbc\043\uffbc\045\uffbc\001\002" +
    "\000\010\042\uffbd\043\uffbd\045\uffbd\001\002\000\006\040" +
    "\174\041\136\001\002\000\006\040\175\041\136\001\002" +
    "\000\036\017\uffc6\022\uffc6\023\uffc6\024\uffc6\026\uffc6\031" +
    "\uffc6\033\uffc6\035\uffc6\037\uffc6\047\uffc6\051\uffc6\053\uffc6" +
    "\056\uffc6\060\uffc6\001\002\000\036\017\uffc7\022\uffc7\023" +
    "\uffc7\024\uffc7\026\uffc7\031\uffc7\033\uffc7\035\uffc7\037\uffc7" +
    "\047\uffc7\051\uffc7\053\uffc7\056\uffc7\060\uffc7\001\002\000" +
    "\030\012\044\015\050\030\056\055\046\061\054\062\057" +
    "\063\047\064\053\065\052\076\204\102\205\001\002\000" +
    "\004\025\203\001\002\000\004\103\201\001\002\000\004" +
    "\025\202\001\002\000\036\017\uffb1\022\uffb1\023\uffb1\024" +
    "\uffb1\026\uffb1\031\uffb1\033\uffb1\035\uffb1\037\uffb1\047\uffb1" +
    "\051\uffb1\053\uffb1\056\uffb1\060\uffb1\001\002\000\036\017" +
    "\uffb2\022\uffb2\023\uffb2\024\uffb2\026\uffb2\031\uffb2\033\uffb2" +
    "\035\uffb2\037\uffb2\047\uffb2\051\uffb2\053\uffb2\056\uffb2\060" +
    "\uffb2\001\002\000\004\025\210\001\002\000\004\103\206" +
    "\001\002\000\004\025\207\001\002\000\036\017\uffb3\022" +
    "\uffb3\023\uffb3\024\uffb3\026\uffb3\031\uffb3\033\uffb3\035\uffb3" +
    "\037\uffb3\047\uffb3\051\uffb3\053\uffb3\056\uffb3\060\uffb3\001" +
    "\002\000\036\017\uffb4\022\uffb4\023\uffb4\024\uffb4\026\uffb4" +
    "\031\uffb4\033\uffb4\035\uffb4\037\uffb4\047\uffb4\051\uffb4\053" +
    "\uffb4\056\uffb4\060\uffb4\001\002\000\030\012\044\015\050" +
    "\030\056\055\046\061\054\062\057\063\047\064\053\065" +
    "\052\076\217\102\220\001\002\000\004\034\216\001\002" +
    "\000\004\103\214\001\002\000\004\034\215\001\002\000" +
    "\040\017\uffcc\022\uffcc\023\uffcc\024\uffcc\026\uffcc\031\uffcc" +
    "\033\uffcc\035\uffcc\037\uffcc\047\uffcc\051\uffcc\053\uffcc\056" +
    "\uffcc\060\uffcc\103\uffcc\001\002\000\040\017\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\026\uffcd\031\uffcd\033\uffcd\035\uffcd\037" +
    "\uffcd\047\uffcd\051\uffcd\053\uffcd\056\uffcd\060\uffcd\103\uffcd" +
    "\001\002\000\004\034\223\001\002\000\004\103\221\001" +
    "\002\000\004\034\222\001\002\000\040\017\uffce\022\uffce" +
    "\023\uffce\024\uffce\026\uffce\031\uffce\033\uffce\035\uffce\037" +
    "\uffce\047\uffce\051\uffce\053\uffce\056\uffce\060\uffce\103\uffce" +
    "\001\002\000\040\017\uffcf\022\uffcf\023\uffcf\024\uffcf\026" +
    "\uffcf\031\uffcf\033\uffcf\035\uffcf\037\uffcf\047\uffcf\051\uffcf" +
    "\053\uffcf\056\uffcf\060\uffcf\103\uffcf\001\002\000\030\012" +
    "\044\015\050\030\056\055\046\061\054\062\057\063\047" +
    "\064\053\065\052\076\232\102\233\001\002\000\004\032" +
    "\231\001\002\000\004\103\227\001\002\000\004\032\230" +
    "\001\002\000\040\017\uffdb\022\uffdb\023\uffdb\024\uffdb\026" +
    "\uffdb\031\uffdb\033\uffdb\035\uffdb\037\uffdb\047\uffdb\051\uffdb" +
    "\053\uffdb\056\uffdb\060\uffdb\103\uffdb\001\002\000\040\017" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\026\uffdc\031\uffdc\033\uffdc" +
    "\035\uffdc\037\uffdc\047\uffdc\051\uffdc\053\uffdc\056\uffdc\060" +
    "\uffdc\103\uffdc\001\002\000\004\032\236\001\002\000\004" +
    "\103\234\001\002\000\004\032\235\001\002\000\040\017" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\026\uffdd\031\uffdd\033\uffdd" +
    "\035\uffdd\037\uffdd\047\uffdd\051\uffdd\053\uffdd\056\uffdd\060" +
    "\uffdd\103\uffdd\001\002\000\040\017\uffde\022\uffde\023\uffde" +
    "\024\uffde\026\uffde\031\uffde\033\uffde\035\uffde\037\uffde\047" +
    "\uffde\051\uffde\053\uffde\056\uffde\060\uffde\103\uffde\001\002" +
    "\000\030\012\044\015\050\030\056\055\046\061\054\062" +
    "\057\063\047\064\053\065\052\074\246\102\245\001\002" +
    "\000\004\103\243\001\002\000\004\036\242\001\002\000" +
    "\036\017\uffc9\022\uffc9\023\uffc9\024\uffc9\026\uffc9\031\uffc9" +
    "\033\uffc9\035\uffc9\037\uffc9\047\uffc9\051\uffc9\053\uffc9\056" +
    "\uffc9\060\uffc9\001\002\000\004\036\244\001\002\000\036" +
    "\017\uffc8\022\uffc8\023\uffc8\024\uffc8\026\uffc8\031\uffc8\033" +
    "\uffc8\035\uffc8\037\uffc8\047\uffc8\051\uffc8\053\uffc8\056\uffc8" +
    "\060\uffc8\001\002\000\004\103\250\001\002\000\004\036" +
    "\247\001\002\000\036\017\uffcb\022\uffcb\023\uffcb\024\uffcb" +
    "\026\uffcb\031\uffcb\033\uffcb\035\uffcb\037\uffcb\047\uffcb\051" +
    "\uffcb\053\uffcb\056\uffcb\060\uffcb\001\002\000\004\036\251" +
    "\001\002\000\036\017\uffca\022\uffca\023\uffca\024\uffca\026" +
    "\uffca\031\uffca\033\uffca\035\uffca\037\uffca\047\uffca\051\uffca" +
    "\053\uffca\056\uffca\060\uffca\001\002\000\026\012\044\015" +
    "\050\030\056\055\046\061\054\062\057\063\047\064\053" +
    "\065\052\102\260\001\002\000\034\022\102\023\254\024" +
    "\111\026\070\031\107\033\110\035\104\037\116\047\074" +
    "\051\100\053\117\056\072\060\076\001\002\000\036\017" +
    "\uffe1\022\uffe1\023\uffe1\024\uffe1\026\uffe1\031\uffe1\033\uffe1" +
    "\035\uffe1\037\uffe1\047\uffe1\051\uffe1\053\uffe1\056\uffe1\060" +
    "\uffe1\001\002\000\034\022\102\023\256\024\111\026\070" +
    "\031\107\033\110\035\104\037\116\047\074\051\100\053" +
    "\117\056\072\060\076\001\002\000\036\017\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\026\uffe2\031\uffe2\033\uffe2\035\uffe2\037" +
    "\uffe2\047\uffe2\051\uffe2\053\uffe2\056\uffe2\060\uffe2\001\002" +
    "\000\036\017\ufff2\022\ufff2\023\ufff2\024\ufff2\026\ufff2\031" +
    "\ufff2\033\ufff2\035\ufff2\037\ufff2\047\ufff2\051\ufff2\053\ufff2" +
    "\056\ufff2\060\ufff2\001\002\000\034\022\102\023\261\024" +
    "\111\026\070\031\107\033\110\035\104\037\116\047\074" +
    "\051\100\053\117\056\072\060\076\001\002\000\036\017" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\026\uffe3\031\uffe3\033\uffe3" +
    "\035\uffe3\037\uffe3\047\uffe3\051\uffe3\053\uffe3\056\uffe3\060" +
    "\uffe3\001\002\000\034\022\102\023\263\024\111\026\070" +
    "\031\107\033\110\035\104\037\116\047\074\051\100\053" +
    "\117\056\072\060\076\001\002\000\036\017\uffe4\022\uffe4" +
    "\023\uffe4\024\uffe4\026\uffe4\031\uffe4\033\uffe4\035\uffe4\037" +
    "\uffe4\047\uffe4\051\uffe4\053\uffe4\056\uffe4\060\uffe4\001\002" +
    "\000\026\012\044\015\050\030\056\055\046\061\054\062" +
    "\057\063\047\064\053\065\052\102\273\001\002\000\006" +
    "\052\270\053\117\001\002\000\006\052\uffab\053\uffab\001" +
    "\002\000\006\052\272\053\117\001\002\000\036\017\uffad" +
    "\022\uffad\023\uffad\024\uffad\026\uffad\031\uffad\033\uffad\035" +
    "\uffad\037\uffad\047\uffad\051\uffad\053\uffad\056\uffad\060\uffad" +
    "\001\002\000\006\052\uffac\053\uffac\001\002\000\036\017" +
    "\uffae\022\uffae\023\uffae\024\uffae\026\uffae\031\uffae\033\uffae" +
    "\035\uffae\037\uffae\047\uffae\051\uffae\053\uffae\056\uffae\060" +
    "\uffae\001\002\000\006\052\275\053\117\001\002\000\006" +
    "\052\276\053\117\001\002\000\036\017\uffaf\022\uffaf\023" +
    "\uffaf\024\uffaf\026\uffaf\031\uffaf\033\uffaf\035\uffaf\037\uffaf" +
    "\047\uffaf\051\uffaf\053\uffaf\056\uffaf\060\uffaf\001\002\000" +
    "\036\017\uffb0\022\uffb0\023\uffb0\024\uffb0\026\uffb0\031\uffb0" +
    "\033\uffb0\035\uffb0\037\uffb0\047\uffb0\051\uffb0\053\uffb0\056" +
    "\uffb0\060\uffb0\001\002\000\004\050\303\001\002\000\004" +
    "\103\301\001\002\000\004\050\302\001\002\000\036\017" +
    "\uffb5\022\uffb5\023\uffb5\024\uffb5\026\uffb5\031\uffb5\033\uffb5" +
    "\035\uffb5\037\uffb5\047\uffb5\051\uffb5\053\uffb5\056\uffb5\060" +
    "\uffb5\001\002\000\036\017\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\026\uffb6\031\uffb6\033\uffb6\035\uffb6\037\uffb6\047\uffb6\051" +
    "\uffb6\053\uffb6\056\uffb6\060\uffb6\001\002\000\004\005\ufff4" +
    "\001\002\000\030\012\044\015\050\030\056\055\046\061" +
    "\054\062\057\063\047\064\053\065\052\076\312\102\313" +
    "\001\002\000\004\057\311\001\002\000\004\057\310\001" +
    "\002\000\036\017\uffa3\022\uffa3\023\uffa3\024\uffa3\026\uffa3" +
    "\031\uffa3\033\uffa3\035\uffa3\037\uffa3\047\uffa3\051\uffa3\053" +
    "\uffa3\056\uffa3\060\uffa3\001\002\000\036\017\uffa4\022\uffa4" +
    "\023\uffa4\024\uffa4\026\uffa4\031\uffa4\033\uffa4\035\uffa4\037" +
    "\uffa4\047\uffa4\051\uffa4\053\uffa4\056\uffa4\060\uffa4\001\002" +
    "\000\004\057\315\001\002\000\004\057\314\001\002\000" +
    "\036\017\uffa5\022\uffa5\023\uffa5\024\uffa5\026\uffa5\031\uffa5" +
    "\033\uffa5\035\uffa5\037\uffa5\047\uffa5\051\uffa5\053\uffa5\056" +
    "\uffa5\060\uffa5\001\002\000\036\017\uffa6\022\uffa6\023\uffa6" +
    "\024\uffa6\026\uffa6\031\uffa6\033\uffa6\035\uffa6\037\uffa6\047" +
    "\uffa6\051\uffa6\053\uffa6\056\uffa6\060\uffa6\001\002\000\004" +
    "\027\322\001\002\000\004\103\320\001\002\000\004\027" +
    "\321\001\002\000\036\017\uffdf\022\uffdf\023\uffdf\024\uffdf" +
    "\026\uffdf\031\uffdf\033\uffdf\035\uffdf\037\uffdf\047\uffdf\051" +
    "\uffdf\053\uffdf\056\uffdf\060\uffdf\001\002\000\036\017\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\026\uffe0\031\uffe0\033\uffe0\035" +
    "\uffe0\037\uffe0\047\uffe0\051\uffe0\053\uffe0\056\uffe0\060\uffe0" +
    "\001\002\000\004\075\324\001\002\000\004\071\325\001" +
    "\002\000\032\012\uffd5\015\uffd5\030\uffd5\055\uffd5\061\uffd5" +
    "\062\uffd5\063\uffd5\064\uffd5\065\uffd5\074\uffd5\076\uffd5\102" +
    "\uffd5\001\002\000\004\075\327\001\002\000\004\071\330" +
    "\001\002\000\032\012\uffd2\015\uffd2\030\uffd2\055\uffd2\061" +
    "\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\074\uffd2\076\uffd2" +
    "\102\uffd2\001\002\000\004\075\332\001\002\000\004\071" +
    "\333\001\002\000\032\012\uffd6\015\uffd6\030\uffd6\055\uffd6" +
    "\061\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\074\uffd6\076" +
    "\uffd6\102\uffd6\001\002\000\004\075\335\001\002\000\004" +
    "\071\336\001\002\000\032\012\uffd0\015\uffd0\030\uffd0\055" +
    "\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\074\uffd0" +
    "\076\uffd0\102\uffd0\001\002\000\004\075\340\001\002\000" +
    "\004\071\341\001\002\000\032\012\uffd3\015\uffd3\030\uffd3" +
    "\055\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\074" +
    "\uffd3\076\uffd3\102\uffd3\001\002\000\004\075\343\001\002" +
    "\000\004\071\344\001\002\000\032\012\uffd1\015\uffd1\030" +
    "\uffd1\055\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1" +
    "\074\uffd1\076\uffd1\102\uffd1\001\002\000\034\017\347\022" +
    "\102\024\111\026\070\031\107\033\110\035\104\037\116" +
    "\047\074\051\100\053\117\056\072\060\076\001\002\000" +
    "\034\017\350\022\102\024\111\026\070\031\107\033\110" +
    "\035\104\037\116\047\074\051\100\053\117\056\072\060" +
    "\076\001\002\000\004\005\ufff5\001\002\000\004\005\ufff6" +
    "\001\002\000\004\075\352\001\002\000\004\071\353\001" +
    "\002\000\032\012\uffd8\015\uffd8\030\uffd8\055\uffd8\061\uffd8" +
    "\062\uffd8\063\uffd8\064\uffd8\065\uffd8\074\uffd8\076\uffd8\102" +
    "\uffd8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\351\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\006\004\007\011\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\042\001\001\000\002\001" +
    "\001\000\006\006\016\007\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\044\026\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\012" +
    "\072\013\074\015\065\016\111\017\066\020\070\021\105" +
    "\022\102\023\076\024\112\027\113\030\100\031\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\025" +
    "\304\026\050\001\001\000\032\013\256\015\065\016\111" +
    "\017\066\020\070\021\105\022\102\023\076\024\112\027" +
    "\113\030\100\031\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\025" +
    "\263\026\050\001\001\000\002\001\001\000\006\025\251" +
    "\026\050\001\001\000\002\001\001\000\006\025\236\026" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\025\223\026\050\001\001\000\006\025\210\026\050\001" +
    "\001\000\006\025\175\026\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\133\026\050\001\001\000\006\025\117\026\050" +
    "\001\001\000\004\026\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\126\001\001\000\006\014\136\032\137\001" +
    "\001\000\006\033\144\034\146\001\001\000\004\032\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\162" +
    "\001\001\000\004\010\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\154\020\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\172\032\137\001\001\000\004\032\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\126\001" +
    "\001\000\034\012\254\013\074\015\065\016\111\017\066" +
    "\020\070\021\105\022\102\023\076\024\112\027\113\030" +
    "\100\031\114\001\001\000\002\001\001\000\032\013\256" +
    "\015\065\016\111\017\066\020\070\021\105\022\102\023" +
    "\076\024\112\027\113\030\100\031\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\012\261\013\074\015" +
    "\065\016\111\017\066\020\070\021\105\022\102\023\076" +
    "\024\112\027\113\030\100\031\114\001\001\000\002\001" +
    "\001\000\032\013\256\015\065\016\111\017\066\020\070" +
    "\021\105\022\102\023\076\024\112\027\113\030\100\031" +
    "\114\001\001\000\002\001\001\000\004\026\126\001\001" +
    "\000\006\030\265\035\266\001\001\000\002\001\001\000" +
    "\004\030\270\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\030\265\035\273\001\001\000" +
    "\004\030\270\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\012\345\013\074\015\065\016\111\017\066\020\070\021" +
    "\105\022\102\023\076\024\112\027\113\030\100\031\114" +
    "\001\001\000\032\013\256\015\065\016\111\017\066\020" +
    "\070\021\105\022\102\023\076\024\112\027\113\030\100" +
    "\031\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoCHTML$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoCHTML$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoCHTML$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }


// METODOS Y VARIABLES GLOBALES DEL PARSER, PUEDEN SER PUBLICAS O PRIVADAS

 
public void syntax_error(Symbol s){
/**Metodo al que se llama automaticamente ante algun error sintactico.*/
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
int linea = s.right+1; int columna = s.left; 
String texto = "Identificador " +s.value + " no reconocido.";

}            
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
/**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
        System.out.println("Error Sintactico no recuperable en la Linea " + (s.right+1)+ " Columna "+s.left+". Identificador " + s.value + " no reconocido.");
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoCHTML$actions {



  private final SintacticoCHTML parser;

  /** Constructor */
  CUP$SintacticoCHTML$actions(SintacticoCHTML parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoCHTML$do_action_part00000000(
    int                        CUP$SintacticoCHTML$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoCHTML$parser,
    java.util.Stack            CUP$SintacticoCHTML$stack,
    int                        CUP$SintacticoCHTML$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoCHTML$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoCHTML$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter start_val = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoCHTML$parser.done_parsing();
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= RAIZ 
            {
              Caracter RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter r = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
     chtml.NODO = r.nodo;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // RAIZ ::= chtml HTML finchtml 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("RAIZ");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo); E.insertar(new NodoCHTML("finhtml"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("RAIZ",1, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // HTML ::= ENCABEZADO CUERPO 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter c = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("HTML");
    RESULT = new Caracter();
    E.insertar(e.nodo); E.insertar(c.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("HTML",7, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ENCABEZADO ::= encabezado INFORMACION finencabezado 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		//3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ENCABEZADO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo); E.insertar(new NodoCHTML("finencabezado"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",2, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ENCABEZADO ::= encabezado finencabezado 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		//2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ENCABEZADO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("finencabezado"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",2, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INFORMACION ::= INFORMACION INFO 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter c = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("INFORMACION");
    RESULT = new Caracter();
    E.insertar(e.nodo); E.insertar(c.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("INFORMACION",4, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INFORMACION ::= INFO 
            {
              Caracter RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter c = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("INFORMACION");
    RESULT = new Caracter();
    E.insertar(c.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("INFORMACION",4, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INFO ::= cjs ruta igual cadena puntoComa mayor fincjs 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		//4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("INFO");
    E.insertar(new NodoCHTML(i)); E.insertar(new NodoCHTML("ruta=")); E.insertar(new NodoCHTML(n)); E.insertar(new NodoCHTML(";>fincjs"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("INFO",5, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INFO ::= ccss ruta igual cadena puntoComa mayor finccss 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		//4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("INFO");
    E.insertar(new NodoCHTML(i)); E.insertar(new NodoCHTML("ruta=")); E.insertar(new NodoCHTML(n)); E.insertar(new NodoCHTML(";>finccss"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("INFO",5, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INFO ::= titulo cadenacon fintitulo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		//3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("INFO");
    E.insertar(new NodoCHTML(i));  E.insertar(new NodoCHTML(n)); E.insertar(new NodoCHTML("fintitulo"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("INFO",5, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPO ::= cuerpo ELEMENTOS mayor ETIQUETAS fincuerpo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //5
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CUERPO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo);  E.insertar(new NodoCHTML(">")); E.insertar(e.nodo);E.insertar(new NodoCHTML("<fincuerpo>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO ::= cuerpo ELEMENTOS mayor fincuerpo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CUERPO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo); 
    E.insertar(new NodoCHTML(">")); E.insertar(new NodoCHTML("<fincuerpo>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO ::= cuerpo mayor ETIQUETAS fincuerpo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CUERPO");
    E.insertar(new NodoCHTML(i,iright,ileft));  E.insertar(new NodoCHTML(">")); E.insertar(e.nodo);E.insertar(new NodoCHTML("<fincuerpo>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPO ::= cuerpo mayor fincuerpo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CUERPO");
    E.insertar(new NodoCHTML(i,iright,ileft));E.insertar(new NodoCHTML("><fincuerpo>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ETIQUETAS ::= ETIQUETAS ETIQUETA 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter t = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ETIQUETAS");
    RESULT = new Caracter();
    E.insertar(t.nodo); E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETAS",8, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ETIQUETAS ::= ETIQUETA 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ETIQUETAS");
    RESULT = new Caracter();
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETAS",8, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ETIQUETA ::= PANEL 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ETIQUETA");
    RESULT = new Caracter();
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ETIQUETA ::= TEXTO 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ETIQUETA");
    RESULT = new Caracter();
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ETIQUETA ::= IMAGEN 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ETIQUETA");
    RESULT = new Caracter();
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ETIQUETA ::= BOTON 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ETIQUETA");
    RESULT = new Caracter();
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ETIQUETA ::= ENLACE 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ETIQUETA");
    RESULT = new Caracter();
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ETIQUETA ::= TABLA 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ETIQUETA");
    RESULT = new Caracter();
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ETIQUETA ::= TEXTOA 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ETIQUETA");
    RESULT = new Caracter();
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ETIQUETA ::= CAJATEXTO 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ETIQUETA");
    RESULT = new Caracter();
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ETIQUETA ::= CAJA 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ETIQUETA");
    RESULT = new Caracter();
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ETIQUETA ::= OPCION 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ETIQUETA");
    RESULT = new Caracter();
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ETIQUETA ::= SPINNER 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ETIQUETA");
    RESULT = new Caracter();
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ETIQUETA ::= saltofin 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ETIQUETA");
    RESULT = new Caracter();
    E.insertar(new NodoCHTML("saltofin"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIQUETA",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PANEL ::= panel ELEMENTOS mayor ETIQUETAS finpanel 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //5
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("PANEL");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo);  E.insertar(new NodoCHTML(">")); E.insertar(e.nodo);E.insertar(new NodoCHTML("<finpanel>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("PANEL",11, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PANEL ::= panel ELEMENTOS mayor finpanel 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("PANEL");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo);  E.insertar(new NodoCHTML(">"));E.insertar(new NodoCHTML("<finpanel>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("PANEL",11, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PANEL ::= panel mayor ETIQUETAS finpanel 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("PANEL");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML(">")); E.insertar(e.nodo);E.insertar(new NodoCHTML("<finpanel>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("PANEL",11, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PANEL ::= panel mayor finpanel 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("PANEL");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("><finpanel>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("PANEL",11, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TEXTO ::= texto cadenasin fintexto 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("TEXTO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML(n)); E.insertar(new NodoCHTML("finpanel>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("TEXTO",12, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TEXTO ::= texto mayor menor fintexto 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("TEXTO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML(">")); E.insertar(new NodoCHTML("<")); E.insertar(new NodoCHTML("finpanel>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("TEXTO",12, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IMAGEN ::= imagen ELEMENTOS cadenasin finimagen 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("IMAGEN");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo);  E.insertar(new NodoCHTML(s)); E.insertar(new NodoCHTML("finimagen>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("IMAGEN",13, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IMAGEN ::= imagen ELEMENTOS mayor menor finimagen 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("IMAGEN");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo); E.insertar(new NodoCHTML("><finimagen>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("IMAGEN",13, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IMAGEN ::= imagen cadenasin finimagen 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("IMAGEN");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML(s)); E.insertar(new NodoCHTML("finimagen>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("IMAGEN",13, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IMAGEN ::= imagen mayor menor finimagen 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("IMAGEN");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("><finimagen>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("IMAGEN",13, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ELEMENTOS ::= ELEMENTOS ELEMENTO 
            {
              Caracter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter t = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ELEMENTOS");
    RESULT = new Caracter();
    E.insertar(t.nodo); E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",19, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ELEMENTOS ::= ELEMENTO 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
    NodoCHTML E = new NodoCHTML("ELEMENTOS");
    RESULT = new Caracter();
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",19, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ELEMENTO ::= ruta igual cadena puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ELEMENTO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("=")); E.insertar(new NodoCHTML(n,nright,nleft)); E.insertar(new NodoCHTML(";"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ELEMENTO ::= click igual cadena puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ELEMENTO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("=")); E.insertar(new NodoCHTML(n,nright,nleft)); E.insertar(new NodoCHTML(";"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ELEMENTO ::= idd igual cadena puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ELEMENTO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("=")); E.insertar(new NodoCHTML(n,nright,nleft)); E.insertar(new NodoCHTML(";"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELEMENTO ::= grupo igual cadena puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ELEMENTO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("=")); E.insertar(new NodoCHTML(n,nright,nleft)); E.insertar(new NodoCHTML(";"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELEMENTO ::= alto igual cadena puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ELEMENTO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("=")); E.insertar(new NodoCHTML(n,nright,nleft)); E.insertar(new NodoCHTML(";"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELEMENTO ::= ancho igual cadena puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ELEMENTO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("=")); E.insertar(new NodoCHTML(n,nright,nleft)); E.insertar(new NodoCHTML(";"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELEMENTO ::= alineado igual cadena puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ELEMENTO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("=")); E.insertar(new NodoCHTML(n,nright,nleft)); E.insertar(new NodoCHTML(";"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELEMENTO ::= valor igual cadena puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ELEMENTO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("=")); E.insertar(new NodoCHTML(n,nright,nleft)); E.insertar(new NodoCHTML(";"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELEMENTO ::= fondo igual cadena puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ELEMENTO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("=")); E.insertar(new NodoCHTML(n,nright,nleft)); E.insertar(new NodoCHTML(";"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",20, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BOTON ::= boton ELEMENTOS cadenasin finboton 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("BOTON");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo);  E.insertar(new NodoCHTML(s)); E.insertar(new NodoCHTML("finboton>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("BOTON",14, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BOTON ::= boton ELEMENTOS mayor menor finboton 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("BOTON");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo); E.insertar(new NodoCHTML("><finboton>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("BOTON",14, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BOTON ::= boton cadenasin finboton 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("BOTON");
    E.insertar(new NodoCHTML(i,iright,ileft));  E.insertar(new NodoCHTML(s)); E.insertar(new NodoCHTML("finboton>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("BOTON",14, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BOTON ::= boton mayor menor finboton 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("BOTON");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("><finboton>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("BOTON",14, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ENLACE ::= enlace ELEMENTOS cadenacon finenlace 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ENLACE");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo);  E.insertar(new NodoCHTML(s)); E.insertar(new NodoCHTML("finenlace>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ENLACE",15, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ENLACE ::= enlace ELEMENTOS mayor menor finenlace 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ENLACE");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo);  E.insertar(new NodoCHTML("><finenlace>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ENLACE",15, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ENLACE ::= enlace cadenacon finenlace 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ENLACE");
    E.insertar(new NodoCHTML(i,iright,ileft));  E.insertar(new NodoCHTML(s)); E.insertar(new NodoCHTML("finenlace>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ENLACE",15, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ENLACE ::= enlace mayor menor finenlace 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("ENLACE");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("><finenlace>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ENLACE",15, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TABLA ::= tabla ELEMENTOS mayor LISTAFILA fintabla 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //5
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("TABLA");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo);  E.insertar(new NodoCHTML(">")); E.insertar(e.nodo);E.insertar(new NodoCHTML("<fintabla>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("TABLA",16, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TABLA ::= tabla ELEMENTOS mayor fintabla 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("TABLA");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo); E.insertar(new NodoCHTML(">")); E.insertar(new NodoCHTML("<fintabla>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("TABLA",16, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TABLA ::= tabla mayor LISTAFILA fintabla 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("TABLA");
    E.insertar(new NodoCHTML(i,iright,ileft));  E.insertar(new NodoCHTML(">")); E.insertar(e.nodo);E.insertar(new NodoCHTML("<fintabla>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("TABLA",16, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TABLA ::= tabla mayor fintabla 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("TABLA");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("><fintabla>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("TABLA",16, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LISTAFILA ::= LISTAFILA FILA 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("LISTAFILA");
    E.insertar(n.nodo); E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("LISTAFILA",10, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LISTAFILA ::= FILA 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		 
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("LISTAFILA");
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("LISTAFILA",10, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FILA ::= filt CELDAS finfilt 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("FILA");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(e.nodo); E.insertar(new NodoCHTML("<finfilt>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("FILA",24, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FILA ::= filt finfilt 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("FILA");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("<finfilt>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("FILA",24, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CELDAS ::= CELDAS CELDA 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CELDAS");
    E.insertar(n.nodo); E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CELDAS",25, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CELDAS ::= CELDA 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CELDAS");
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CELDAS",25, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CELDA ::= cb cadenasin fincb 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CELDA");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML(s,sright,sleft)); E.insertar(new NodoCHTML("fincb>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CELDA",26, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CELDA ::= cb mayor menor fincb 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CELDA");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("><")); E.insertar(new NodoCHTML("fincb>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CELDA",26, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CELDA ::= ct CONTENIDO finct 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CELDA");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo); E.insertar(new NodoCHTML("finct>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CELDA",26, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CELDA ::= ct mayor menor finct 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CELDA");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("><")); E.insertar(new NodoCHTML("fincb>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CELDA",26, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONTENIDO ::= cadenasin 
            {
              Caracter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		 //1
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CONTENIDO");
    E.insertar(new NodoCHTML(s));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",6, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONTENIDO ::= mayor IMAGEN menor 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CONTENIDO");
    E.insertar(new NodoCHTML(">")); E.insertar(n.nodo); E.insertar(new NodoCHTML("<"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",6, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONTENIDO ::= mayor BOTON menor 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CONTENIDO");
    E.insertar(new NodoCHTML(">")); E.insertar(n.nodo); E.insertar(new NodoCHTML("<"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",6, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TEXTOA ::= textoa cadenasin fintextoa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("TEXTOA");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML(s,sright,sleft)); E.insertar(new NodoCHTML("fintextoa>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("TEXTOA",21, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TEXTOA ::= textoa mayor menor fintextoa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("TEXTOA");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("><fintextoa>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("TEXTOA",21, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CAJATEXTO ::= cajatexto ELEMENTOS cadenasin fincajatexto 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CAJATEXTO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo);  E.insertar(new NodoCHTML(e)); E.insertar(new NodoCHTML("fincajatexto>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CAJATEXTO",17, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CAJATEXTO ::= cajatexto ELEMENTOS mayor menor fincajatexto 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CAJATEXTO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo);  E.insertar(new NodoCHTML("><fincajatexto>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CAJATEXTO",17, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CAJATEXTO ::= cajatexto cadenasin fincajatexto 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CAJATEXTO");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML(e)); E.insertar(new NodoCHTML("fincajatexto>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CAJATEXTO",17, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CAJATEXTO ::= cajatexto mayor menor fincajatexto 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CAJATEXTO");
    E.insertar(new NodoCHTML(i,iright,ileft));E.insertar(new NodoCHTML("><fincajatexto>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CAJATEXTO",17, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CAJA ::= caja ELEMENTOS mayor OPCIONES fincaja 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //5
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CAJA");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo); E.insertar(new NodoCHTML(">")); E.insertar(e.nodo);E.insertar(new NodoCHTML("<fincaja>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CAJA",18, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CAJA ::= caja ELEMENTOS mayor fincaja 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CAJA");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo); E.insertar(new NodoCHTML(">"));E.insertar(new NodoCHTML("<fincaja>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CAJA",18, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CAJA ::= caja mayor OPCIONES fincaja 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CAJA");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML(">")); E.insertar(e.nodo);E.insertar(new NodoCHTML("<fincaja>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CAJA",18, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CAJA ::= caja mayor fincaja 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("CAJA");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("><fincaja>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CAJA",18, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPCIONES ::= OPCIONES OPCION 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("OPCIONES");
    E.insertar(n.nodo); E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("OPCIONES",27, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPCIONES ::= OPCION 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		 //1
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("OPCIONES");
    E.insertar(e.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("OPCIONES",27, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPCION ::= opcion ELEMENTOS cadenasin finopcion 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //5
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("OPCION");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo); E.insertar(new NodoCHTML(e)); E.insertar(new NodoCHTML("finopcion>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("OPCION",22, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPCION ::= opcion ELEMENTOS mayor menor finopcion 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("OPCION");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo); E.insertar(new NodoCHTML("><finopcion>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("OPCION",22, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPCION ::= opcion cadenasin finopcion 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //3
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("OPCION");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML(e)); E.insertar(new NodoCHTML("finopcion>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("OPCION",22, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPCION ::= opcion mayor menor finopcion 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("OPCION");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("><finopcion>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("OPCION",22, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SPINNER ::= spinner ELEMENTOS cadenasin finspinner 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //5
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("SPINNER");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo);  E.insertar(new NodoCHTML(">")); E.insertar(new NodoCHTML(e));E.insertar(new NodoCHTML("<finspinner>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("SPINNER",23, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SPINNER ::= spinner ELEMENTOS mayor finspinner 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("SPINNER");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(n.nodo);  E.insertar(new NodoCHTML(">"));E.insertar(new NodoCHTML("<finspinner>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("SPINNER",23, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SPINNER ::= spinner cadenasin finspinner 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		 //4
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("SPINNER");
    E.insertar(new NodoCHTML(i,iright,ileft));  E.insertar(new NodoCHTML(">")); E.insertar(new NodoCHTML(e));E.insertar(new NodoCHTML("<finspinner>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("SPINNER",23, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SPINNER ::= spinner mayor finspinner 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		 //2
    RESULT = new Caracter();
    NodoCHTML E = new NodoCHTML("SPINNER");
    E.insertar(new NodoCHTML(i,iright,ileft)); E.insertar(new NodoCHTML("><finspinner>"));
    RESULT.nodo = E;

              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("SPINNER",23, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoCHTML$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoCHTML$do_action(
    int                        CUP$SintacticoCHTML$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoCHTML$parser,
    java.util.Stack            CUP$SintacticoCHTML$stack,
    int                        CUP$SintacticoCHTML$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoCHTML$do_action_part00000000(
                               CUP$SintacticoCHTML$act_num,
                               CUP$SintacticoCHTML$parser,
                               CUP$SintacticoCHTML$stack,
                               CUP$SintacticoCHTML$top);
    }
}

}
