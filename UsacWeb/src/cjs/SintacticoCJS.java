
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package cjs;

import java_cup.runtime.*;
import java.util.ArrayList;
import usacweb.Datos;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoCJS extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoCJS() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoCJS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoCJS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\004\000\002\002\003\000\002\020" +
    "\004\000\002\020\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\004\000\002\021" +
    "\004\000\002\021\003\000\002\021\004\000\002\021\004" +
    "\000\002\021\005\000\002\021\004\000\002\021\004\000" +
    "\002\021\004\000\002\022\005\000\002\022\006\000\002" +
    "\035\005\000\002\035\003\000\002\033\010\000\002\033" +
    "\011\000\002\017\005\000\002\017\010\000\002\025\004" +
    "\000\002\015\005\000\002\015\003\000\002\004\012\000" +
    "\002\004\011\000\002\012\005\000\002\012\003\000\002" +
    "\016\007\000\002\006\011\000\002\006\012\000\002\007" +
    "\006\000\002\011\011\000\002\011\012\000\002\011\011" +
    "\000\002\014\007\000\002\014\006\000\002\023\005\000" +
    "\002\026\014\000\002\026\016\000\002\034\003\000\002" +
    "\034\003\000\002\010\011\000\002\027\007\000\002\030" +
    "\010\000\002\030\012\000\002\030\017\000\002\030\017" +
    "\000\002\030\012\000\002\031\020\000\002\031\013\000" +
    "\002\036\012\000\002\036\004\000\002\036\003\000\002" +
    "\005\005\000\002\005\006\000\002\032\006\000\002\032" +
    "\005\000\002\032\005\000\002\037\005\000\002\037\004" +
    "\000\002\037\004\000\002\013\003\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\004\000\002\024" +
    "\004\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\003\000\002\024\003\000\002\024\005\000\002" +
    "\024\005\000\002\024\004\000\002\024\005\000\002\024" +
    "\004\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0117\000\034\003\032\004\025\006\036\007\017\010" +
    "\033\017\027\020\035\022\010\025\012\026\034\042\031" +
    "\046\006\051\011\001\002\000\060\015\uffc2\016\uffc2\027" +
    "\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\036\uffc2" +
    "\037\uffc2\040\uffc2\045\uffc2\047\uffc2\050\uffc2\054\uffc2\055" +
    "\uffc2\056\u010e\057\uffc2\060\uffc2\063\uffc2\064\uffc2\065\uffc2" +
    "\071\u010d\001\002\000\036\002\000\003\032\004\025\006" +
    "\036\007\017\010\033\017\027\020\035\022\010\025\012" +
    "\026\034\042\031\046\006\051\011\001\002\000\004\014" +
    "\366\001\002\000\004\060\365\001\002\000\004\014\340" +
    "\001\002\000\004\014\334\001\002\000\004\014\326\001" +
    "\002\000\044\002\ufff5\003\ufff5\004\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\017\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5\025" +
    "\ufff5\026\ufff5\042\ufff5\046\ufff5\051\ufff5\057\ufff5\001\002" +
    "\000\044\002\ufffd\003\ufffd\004\ufffd\006\ufffd\007\ufffd\010" +
    "\ufffd\017\ufffd\020\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd" +
    "\026\ufffd\042\ufffd\046\ufffd\051\ufffd\057\ufffd\001\002\000" +
    "\044\002\ufffa\003\ufffa\004\ufffa\006\ufffa\007\ufffa\010\ufffa" +
    "\017\ufffa\020\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026" +
    "\ufffa\042\ufffa\046\ufffa\051\ufffa\057\ufffa\001\002\000\044" +
    "\002\ufffb\003\ufffb\004\ufffb\006\ufffb\007\ufffb\010\ufffb\017" +
    "\ufffb\020\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb" +
    "\042\ufffb\046\ufffb\051\ufffb\057\ufffb\001\002\000\004\014" +
    "\322\001\002\000\044\002\ufff6\003\ufff6\004\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\017\ufff6\020\ufff6\022\ufff6\023\ufff6\024" +
    "\ufff6\025\ufff6\026\ufff6\042\ufff6\046\ufff6\051\ufff6\057\ufff6" +
    "\001\002\000\044\002\ufffc\003\ufffc\004\ufffc\006\ufffc\007" +
    "\ufffc\010\ufffc\017\ufffc\020\ufffc\022\ufffc\023\ufffc\024\ufffc" +
    "\025\ufffc\026\ufffc\042\ufffc\046\ufffc\051\ufffc\057\ufffc\001" +
    "\002\000\044\002\ufffe\003\ufffe\004\ufffe\006\ufffe\007\ufffe" +
    "\010\ufffe\017\ufffe\020\ufffe\022\ufffe\023\ufffe\024\ufffe\025" +
    "\ufffe\026\ufffe\042\ufffe\046\ufffe\051\ufffe\057\ufffe\001\002" +
    "\000\004\060\321\001\002\000\044\002\ufff7\003\ufff7\004" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\017\ufff7\020\ufff7\022\ufff7" +
    "\023\ufff7\024\ufff7\025\ufff7\026\ufff7\042\ufff7\046\ufff7\051" +
    "\ufff7\057\ufff7\001\002\000\004\042\305\001\002\000\044" +
    "\002\ufff9\003\ufff9\004\ufff9\006\ufff9\007\ufff9\010\ufff9\017" +
    "\ufff9\020\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9" +
    "\042\ufff9\046\ufff9\051\ufff9\057\ufff9\001\002\000\036\010" +
    "\101\014\103\030\072\041\067\042\077\052\075\053\104" +
    "\056\076\060\302\066\065\067\066\070\102\073\063\074" +
    "\100\001\002\000\044\002\ufff1\003\ufff1\004\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\017\ufff1\020\ufff1\022\ufff1\023\ufff1\024" +
    "\ufff1\025\ufff1\026\ufff1\042\ufff1\046\ufff1\051\ufff1\057\ufff1" +
    "\001\002\000\012\014\161\050\262\056\261\071\260\001" +
    "\002\000\010\015\256\057\255\060\257\001\002\000\004" +
    "\071\240\001\002\000\004\060\237\001\002\000\004\014" +
    "\062\001\002\000\004\042\043\001\002\000\004\002\042" +
    "\001\002\000\044\002\ufff8\003\ufff8\004\ufff8\006\ufff8\007" +
    "\ufff8\010\ufff8\017\ufff8\020\ufff8\022\ufff8\023\ufff8\024\ufff8" +
    "\025\ufff8\026\ufff8\042\ufff8\046\ufff8\051\ufff8\057\ufff8\001" +
    "\002\000\044\002\ufff4\003\ufff4\004\ufff4\006\ufff4\007\ufff4" +
    "\010\ufff4\017\ufff4\020\ufff4\022\ufff4\023\ufff4\024\ufff4\025" +
    "\ufff4\026\ufff4\042\ufff4\046\ufff4\051\ufff4\057\ufff4\001\002" +
    "\000\004\002\001\001\002\000\004\014\044\001\002\000" +
    "\006\015\046\042\047\001\002\000\006\015\055\016\054" +
    "\001\002\000\004\056\050\001\002\000\006\015\uffdc\016" +
    "\uffdc\001\002\000\034\003\032\004\025\006\036\007\017" +
    "\010\033\017\027\020\035\022\010\025\012\026\034\042" +
    "\031\046\006\051\011\001\002\000\036\003\032\004\025" +
    "\006\036\007\017\010\033\017\027\020\035\022\010\025" +
    "\012\026\034\042\031\046\006\051\011\057\053\001\002" +
    "\000\044\002\uffff\003\uffff\004\uffff\006\uffff\007\uffff\010" +
    "\uffff\017\uffff\020\uffff\022\uffff\023\uffff\024\uffff\025\uffff" +
    "\026\uffff\042\uffff\046\uffff\051\uffff\057\uffff\001\002\000" +
    "\044\002\uffde\003\uffde\004\uffde\006\uffde\007\uffde\010\uffde" +
    "\017\uffde\020\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026" +
    "\uffde\042\uffde\046\uffde\051\uffde\057\uffde\001\002\000\004" +
    "\042\061\001\002\000\004\056\056\001\002\000\034\003" +
    "\032\004\025\006\036\007\017\010\033\017\027\020\035" +
    "\022\010\025\012\026\034\042\031\046\006\051\011\001" +
    "\002\000\036\003\032\004\025\006\036\007\017\010\033" +
    "\017\027\020\035\022\010\025\012\026\034\042\031\046" +
    "\006\051\011\057\060\001\002\000\044\002\uffdf\003\uffdf" +
    "\004\uffdf\006\uffdf\007\uffdf\010\uffdf\017\uffdf\020\uffdf\022" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\042\uffdf\046\uffdf" +
    "\051\uffdf\057\uffdf\001\002\000\006\015\uffdd\016\uffdd\001" +
    "\002\000\034\010\101\014\103\030\072\041\067\042\077" +
    "\052\075\053\104\056\076\066\065\067\066\070\102\073" +
    "\063\074\100\001\002\000\054\015\uff9f\016\uff9f\027\uff9f" +
    "\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\036\uff9f\037" +
    "\uff9f\040\uff9f\045\uff9f\047\uff9f\050\uff9f\054\uff9f\055\uff9f" +
    "\057\uff9f\060\uff9f\063\uff9f\064\uff9f\065\uff9f\001\002\000" +
    "\054\015\uff9b\016\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b" +
    "\033\uff9b\034\uff9b\036\uff9b\037\uff9b\040\uff9b\045\uff9b\047" +
    "\uff9b\050\uff9b\054\uff9b\055\uff9b\057\uff9b\060\uff9b\063\uff9b" +
    "\064\uff9b\065\uff9b\001\002\000\054\015\uffa3\016\uffa3\027" +
    "\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\036\uffa3" +
    "\037\uffa3\040\uffa3\045\uffa3\047\uffa3\050\uffa3\054\uffa3\055" +
    "\uffa3\057\uffa3\060\uffa3\063\uffa3\064\uffa3\065\uffa3\001\002" +
    "\000\054\015\uffa1\016\uffa1\027\uffa1\030\uffa1\031\uffa1\032" +
    "\uffa1\033\uffa1\034\uffa1\036\uffa1\037\uffa1\040\uffa1\045\uffa1" +
    "\047\uffa1\050\uffa1\054\uffa1\055\uffa1\057\uffa1\060\uffa1\063" +
    "\uffa1\064\uffa1\065\uffa1\001\002\000\034\010\101\014\103" +
    "\030\072\041\067\042\077\052\075\053\104\056\076\066" +
    "\065\067\066\070\102\073\063\074\100\001\002\000\004" +
    "\015\225\001\002\000\054\015\uff9c\016\uff9c\027\uff9c\030" +
    "\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\036\uff9c\037\uff9c" +
    "\040\uff9c\045\uff9c\047\uff9c\050\uff9c\054\uff9c\055\uff9c\057" +
    "\uff9c\060\uff9c\063\uff9c\064\uff9c\065\uff9c\001\002\000\034" +
    "\010\101\014\103\030\072\041\067\042\077\052\075\053" +
    "\104\056\076\066\065\067\066\070\102\073\063\074\100" +
    "\001\002\000\054\015\uff9d\016\uff9d\027\uff9d\030\uff9d\031" +
    "\uff9d\032\uff9d\033\uff9d\034\uff9d\036\uff9d\037\uff9d\040\uff9d" +
    "\045\uff9d\047\uff9d\050\uff9d\054\uff9d\055\uff9d\057\uff9d\060" +
    "\uff9d\063\uff9d\064\uff9d\065\uff9d\001\002\000\054\015\uffb9" +
    "\016\uffb9\027\125\030\113\031\124\032\116\033\110\034" +
    "\121\036\120\037\112\040\114\045\115\047\123\050\uffb9" +
    "\054\126\055\106\057\uffb9\060\uffb9\063\117\064\122\065" +
    "\111\001\002\000\054\015\uffaa\016\uffaa\027\uffaa\030\uffaa" +
    "\031\uffaa\032\uffaa\033\uffaa\034\uffaa\036\uffaa\037\uffaa\040" +
    "\uffaa\045\uffaa\047\uffaa\050\uffaa\054\uffaa\055\uffaa\057\uffaa" +
    "\060\uffaa\063\uffaa\064\uffaa\065\uffaa\001\002\000\034\010" +
    "\101\014\103\030\072\041\067\042\077\052\075\053\104" +
    "\056\076\066\065\067\066\070\102\073\063\074\100\001" +
    "\002\000\062\014\161\015\uffa0\016\uffa0\027\uffa0\030\uffa0" +
    "\031\uffa0\032\uffa0\033\uffa0\034\uffa0\036\uffa0\037\uffa0\040" +
    "\uffa0\045\uffa0\047\uffa0\050\uffa0\054\uffa0\055\uffa0\056\200" +
    "\057\uffa0\060\uffa0\063\uffa0\064\uffa0\065\uffa0\071\177\001" +
    "\002\000\054\015\uff9e\016\uff9e\027\uff9e\030\uff9e\031\uff9e" +
    "\032\uff9e\033\uff9e\034\uff9e\036\uff9e\037\uff9e\040\uff9e\045" +
    "\uff9e\047\uff9e\050\uff9e\054\uff9e\055\uff9e\057\uff9e\060\uff9e" +
    "\063\uff9e\064\uff9e\065\uff9e\001\002\000\004\071\145\001" +
    "\002\000\054\015\uffa2\016\uffa2\027\uffa2\030\uffa2\031\uffa2" +
    "\032\uffa2\033\uffa2\034\uffa2\036\uffa2\037\uffa2\040\uffa2\045" +
    "\uffa2\047\uffa2\050\uffa2\054\uffa2\055\uffa2\057\uffa2\060\uffa2" +
    "\063\uffa2\064\uffa2\065\uffa2\001\002\000\034\010\101\014" +
    "\103\030\072\041\067\042\077\052\075\053\104\056\076" +
    "\066\065\067\066\070\102\073\063\074\100\001\002\000" +
    "\054\015\uffa9\016\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9" +
    "\033\uffa9\034\uffa9\036\uffa9\037\uffa9\040\uffa9\045\uffa9\047" +
    "\uffa9\050\uffa9\054\uffa9\055\uffa9\057\uffa9\060\uffa9\063\uffa9" +
    "\064\uffa9\065\uffa9\001\002\000\044\015\107\027\125\030" +
    "\113\031\124\032\116\033\110\034\121\036\120\037\112" +
    "\040\114\045\115\047\123\054\126\055\106\063\117\064" +
    "\122\065\111\001\002\000\034\010\101\014\103\030\072" +
    "\041\067\042\077\052\075\053\104\056\076\066\065\067" +
    "\066\070\102\073\063\074\100\001\002\000\054\015\uffb8" +
    "\016\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034" +
    "\uffb8\036\uffb8\037\uffb8\040\uffb8\045\uffb8\047\uffb8\050\uffb8" +
    "\054\uffb8\055\uffb8\057\uffb8\060\uffb8\063\uffb8\064\uffb8\065" +
    "\uffb8\001\002\000\034\010\101\014\103\030\072\041\067" +
    "\042\077\052\075\053\104\056\076\066\065\067\066\070" +
    "\102\073\063\074\100\001\002\000\034\010\101\014\103" +
    "\030\072\041\067\042\077\052\075\053\104\056\076\066" +
    "\065\067\066\070\102\073\063\074\100\001\002\000\034" +
    "\010\101\014\103\030\072\041\067\042\077\052\075\053" +
    "\104\056\076\066\065\067\066\070\102\073\063\074\100" +
    "\001\002\000\034\010\101\014\103\030\072\041\067\042" +
    "\077\052\075\053\104\056\076\066\065\067\066\070\102" +
    "\073\063\074\100\001\002\000\034\010\101\014\103\030" +
    "\072\041\067\042\077\052\075\053\104\056\076\066\065" +
    "\067\066\070\102\073\063\074\100\001\002\000\054\015" +
    "\uffb1\016\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1" +
    "\034\uffb1\036\uffb1\037\uffb1\040\uffb1\045\uffb1\047\uffb1\050" +
    "\uffb1\054\uffb1\055\uffb1\057\uffb1\060\uffb1\063\uffb1\064\uffb1" +
    "\065\uffb1\001\002\000\034\010\101\014\103\030\072\041" +
    "\067\042\077\052\075\053\104\056\076\066\065\067\066" +
    "\070\102\073\063\074\100\001\002\000\054\015\uffb2\016" +
    "\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2" +
    "\036\uffb2\037\uffb2\040\uffb2\045\uffb2\047\uffb2\050\uffb2\054" +
    "\uffb2\055\uffb2\057\uffb2\060\uffb2\063\uffb2\064\uffb2\065\uffb2" +
    "\001\002\000\034\010\101\014\103\030\072\041\067\042" +
    "\077\052\075\053\104\056\076\066\065\067\066\070\102" +
    "\073\063\074\100\001\002\000\034\010\101\014\103\030" +
    "\072\041\067\042\077\052\075\053\104\056\076\066\065" +
    "\067\066\070\102\073\063\074\100\001\002\000\034\010" +
    "\101\014\103\030\072\041\067\042\077\052\075\053\104" +
    "\056\076\066\065\067\066\070\102\073\063\074\100\001" +
    "\002\000\034\010\101\014\103\030\072\041\067\042\077" +
    "\052\075\053\104\056\076\066\065\067\066\070\102\073" +
    "\063\074\100\001\002\000\034\010\101\014\103\030\072" +
    "\041\067\042\077\052\075\053\104\056\076\066\065\067" +
    "\066\070\102\073\063\074\100\001\002\000\034\010\101" +
    "\014\103\030\072\041\067\042\077\052\075\053\104\056" +
    "\076\066\065\067\066\070\102\073\063\074\100\001\002" +
    "\000\034\010\101\014\103\030\072\041\067\042\077\052" +
    "\075\053\104\056\076\066\065\067\066\070\102\073\063" +
    "\074\100\001\002\000\054\015\uffac\016\uffac\027\uffac\030" +
    "\uffac\031\uffac\032\uffac\033\uffac\034\uffac\036\uffac\037\uffac" +
    "\040\uffac\045\uffac\047\uffac\050\uffac\054\uffac\055\uffac\057" +
    "\uffac\060\uffac\063\uffac\064\uffac\065\uffac\001\002\000\054" +
    "\015\uffb7\016\uffb7\027\uffb7\030\uffb7\031\124\032\116\033" +
    "\110\034\121\036\120\037\112\040\114\045\115\047\123" +
    "\050\uffb7\054\126\055\106\057\uffb7\060\uffb7\063\117\064" +
    "\122\065\111\001\002\000\054\015\uffb0\016\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\036\120\037" +
    "\uffb0\040\uffb0\045\115\047\uffb0\050\uffb0\054\126\055\uffb0" +
    "\057\uffb0\060\uffb0\063\117\064\uffb0\065\uffb0\001\002\000" +
    "\054\015\uffb5\016\uffb5\027\uffb5\030\uffb5\031\124\032\116" +
    "\033\110\034\121\036\120\037\112\040\114\045\115\047" +
    "\uffb5\050\uffb5\054\126\055\106\057\uffb5\060\uffb5\063\117" +
    "\064\122\065\uffb5\001\002\000\054\015\uffb3\016\uffb3\027" +
    "\uffb3\030\uffb3\031\124\032\116\033\110\034\121\036\120" +
    "\037\112\040\114\045\115\047\uffb3\050\uffb3\054\126\055" +
    "\uffb3\057\uffb3\060\uffb3\063\117\064\uffb3\065\uffb3\001\002" +
    "\000\054\015\uffad\016\uffad\027\uffad\030\uffad\031\uffad\032" +
    "\uffad\033\uffad\034\uffad\036\120\037\uffad\040\uffad\045\115" +
    "\047\uffad\050\uffad\054\126\055\uffad\057\uffad\060\uffad\063" +
    "\117\064\uffad\065\uffad\001\002\000\054\015\uffab\016\uffab" +
    "\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\036" +
    "\uffab\037\uffab\040\uffab\045\uffab\047\uffab\050\uffab\054\uffab" +
    "\055\uffab\057\uffab\060\uffab\063\uffab\064\uffab\065\uffab\001" +
    "\002\000\054\015\uffaf\016\uffaf\027\uffaf\030\uffaf\031\uffaf" +
    "\032\uffaf\033\uffaf\034\uffaf\036\120\037\uffaf\040\uffaf\045" +
    "\115\047\uffaf\050\uffaf\054\126\055\uffaf\057\uffaf\060\uffaf" +
    "\063\117\064\uffaf\065\uffaf\001\002\000\054\015\uffa7\016" +
    "\uffa7\027\uffa7\030\uffa7\031\124\032\116\033\110\034\121" +
    "\036\120\037\uffa7\040\uffa7\045\115\047\uffa7\050\uffa7\054" +
    "\126\055\uffa7\057\uffa7\060\uffa7\063\117\064\uffa7\065\uffa7" +
    "\001\002\000\054\015\uffb6\016\uffb6\027\uffb6\030\uffb6\031" +
    "\124\032\116\033\110\034\121\036\120\037\112\040\114" +
    "\045\115\047\123\050\uffb6\054\126\055\106\057\uffb6\060" +
    "\uffb6\063\117\064\122\065\111\001\002\000\054\015\uffa8" +
    "\016\uffa8\027\uffa8\030\uffa8\031\124\032\116\033\110\034" +
    "\121\036\120\037\uffa8\040\uffa8\045\115\047\uffa8\050\uffa8" +
    "\054\126\055\uffa8\057\uffa8\060\uffa8\063\117\064\uffa8\065" +
    "\uffa8\001\002\000\054\015\uffb4\016\uffb4\027\uffb4\030\uffb4" +
    "\031\124\032\116\033\110\034\121\036\120\037\112\040" +
    "\114\045\115\047\uffb4\050\uffb4\054\126\055\106\057\uffb4" +
    "\060\uffb4\063\117\064\122\065\uffb4\001\002\000\054\015" +
    "\uffae\016\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae" +
    "\034\uffae\036\120\037\uffae\040\uffae\045\115\047\uffae\050" +
    "\uffae\054\126\055\uffae\057\uffae\060\uffae\063\117\064\uffae" +
    "\065\uffae\001\002\000\054\015\uffa5\016\uffa5\027\uffa5\030" +
    "\uffa5\031\124\032\116\033\110\034\121\036\120\037\112" +
    "\040\114\045\115\047\uffa5\050\uffa5\054\126\055\uffa5\057" +
    "\uffa5\060\uffa5\063\117\064\uffa5\065\uffa5\001\002\000\006" +
    "\011\147\012\146\001\002\000\004\014\153\001\002\000" +
    "\004\014\150\001\002\000\034\010\101\014\103\030\072" +
    "\041\067\042\077\052\075\053\104\056\076\066\065\067" +
    "\066\070\102\073\063\074\100\001\002\000\004\015\152" +
    "\001\002\000\054\015\uffcb\016\uffcb\027\uffcb\030\uffcb\031" +
    "\uffcb\032\uffcb\033\uffcb\034\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\045\uffcb\047\uffcb\050\uffcb\054\uffcb\055\uffcb\057\uffcb\060" +
    "\uffcb\063\uffcb\064\uffcb\065\uffcb\001\002\000\004\066\154" +
    "\001\002\000\004\016\155\001\002\000\006\006\156\042" +
    "\160\001\002\000\004\014\171\001\002\000\004\015\170" +
    "\001\002\000\004\014\161\001\002\000\036\010\101\014" +
    "\103\015\164\030\072\041\067\042\077\052\075\053\104" +
    "\056\076\066\065\067\066\070\102\073\063\074\100\001" +
    "\002\000\010\015\uffe0\016\uffe0\057\uffe0\001\002\000\006" +
    "\015\166\016\165\001\002\000\060\015\uffc1\016\uffc1\027" +
    "\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\036\uffc1" +
    "\037\uffc1\040\uffc1\045\uffc1\047\uffc1\050\uffc1\054\uffc1\055" +
    "\uffc1\056\uffc1\057\uffc1\060\uffc1\063\uffc1\064\uffc1\065\uffc1" +
    "\071\uffc1\001\002\000\034\010\101\014\103\030\072\041" +
    "\067\042\077\052\075\053\104\056\076\066\065\067\066" +
    "\070\102\073\063\074\100\001\002\000\060\015\uffc0\016" +
    "\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0" +
    "\036\uffc0\037\uffc0\040\uffc0\045\uffc0\047\uffc0\050\uffc0\054" +
    "\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\063\uffc0\064\uffc0" +
    "\065\uffc0\071\uffc0\001\002\000\010\015\uffe1\016\uffe1\057" +
    "\uffe1\001\002\000\054\015\uffca\016\uffca\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\036\uffca\037\uffca\040" +
    "\uffca\045\uffca\047\uffca\050\uffca\054\uffca\055\uffca\057\uffca" +
    "\060\uffca\063\uffca\064\uffca\065\uffca\001\002\000\004\015" +
    "\172\001\002\000\004\056\173\001\002\000\034\003\032" +
    "\004\025\006\036\007\017\010\033\017\027\020\035\022" +
    "\010\025\012\026\034\042\031\046\006\051\011\001\002" +
    "\000\036\003\032\004\025\006\036\007\017\010\033\017" +
    "\027\020\035\022\010\025\012\026\034\042\031\046\006" +
    "\051\011\057\175\001\002\000\004\015\176\001\002\000" +
    "\054\015\uffc9\016\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\034\uffc9\036\uffc9\037\uffc9\040\uffc9\045\uffc9\047" +
    "\uffc9\050\uffc9\054\uffc9\055\uffc9\057\uffc9\060\uffc9\063\uffc9" +
    "\064\uffc9\065\uffc9\001\002\000\010\005\204\012\203\072" +
    "\205\001\002\000\034\010\101\014\103\030\072\041\067" +
    "\042\077\052\075\053\104\056\076\066\065\067\066\070" +
    "\102\073\063\074\100\001\002\000\004\057\202\001\002" +
    "\000\054\015\uffbf\016\uffbf\027\uffbf\030\uffbf\031\uffbf\032" +
    "\uffbf\033\uffbf\034\uffbf\036\uffbf\037\uffbf\040\uffbf\045\uffbf" +
    "\047\uffbf\050\uffbf\054\uffbf\055\uffbf\057\uffbf\060\uffbf\063" +
    "\uffbf\064\uffbf\065\uffbf\001\002\000\004\014\206\001\002" +
    "\000\054\015\uffbd\016\uffbd\027\uffbd\030\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\034\uffbd\036\uffbd\037\uffbd\040\uffbd\045\uffbd" +
    "\047\uffbd\050\uffbd\054\uffbd\055\uffbd\057\uffbd\060\uffbd\063" +
    "\uffbd\064\uffbd\065\uffbd\001\002\000\054\015\uffbe\016\uffbe" +
    "\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\036" +
    "\uffbe\037\uffbe\040\uffbe\045\uffbe\047\uffbe\050\uffbe\054\uffbe" +
    "\055\uffbe\057\uffbe\060\uffbe\063\uffbe\064\uffbe\065\uffbe\001" +
    "\002\000\004\066\207\001\002\000\004\016\210\001\002" +
    "\000\006\006\211\042\160\001\002\000\004\014\214\001" +
    "\002\000\004\015\213\001\002\000\054\015\uffc7\016\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\036" +
    "\uffc7\037\uffc7\040\uffc7\045\uffc7\047\uffc7\050\uffc7\054\uffc7" +
    "\055\uffc7\057\uffc7\060\uffc7\063\uffc7\064\uffc7\065\uffc7\001" +
    "\002\000\004\015\215\001\002\000\004\056\216\001\002" +
    "\000\034\003\032\004\025\006\036\007\017\010\033\017" +
    "\027\020\035\022\010\025\012\026\034\042\031\046\006" +
    "\051\011\001\002\000\036\003\032\004\025\006\036\007" +
    "\017\010\033\017\027\020\035\022\010\025\012\026\034" +
    "\042\031\046\006\051\011\057\220\001\002\000\004\015" +
    "\221\001\002\000\054\015\uffc8\016\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\036\uffc8\037\uffc8\040" +
    "\uffc8\045\uffc8\047\uffc8\050\uffc8\054\uffc8\055\uffc8\057\uffc8" +
    "\060\uffc8\063\uffc8\064\uffc8\065\uffc8\001\002\000\006\016" +
    "\165\057\223\001\002\000\054\015\uff9a\016\uff9a\027\uff9a" +
    "\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\036\uff9a\037" +
    "\uff9a\040\uff9a\045\uff9a\047\uff9a\050\uff9a\054\uff9a\055\uff9a" +
    "\057\uff9a\060\uff9a\063\uff9a\064\uff9a\065\uff9a\001\002\000" +
    "\054\015\uffa4\016\uffa4\027\uffa4\030\uffa4\031\124\032\116" +
    "\033\110\034\121\036\120\037\112\040\114\045\115\047" +
    "\123\050\uffa4\054\126\055\106\057\uffa4\060\uffa4\063\117" +
    "\064\122\065\111\001\002\000\004\056\226\001\002\000" +
    "\034\003\032\004\025\006\036\007\017\010\033\017\027" +
    "\020\035\022\010\025\012\026\034\042\031\046\006\051" +
    "\011\001\002\000\036\003\032\004\025\006\036\007\017" +
    "\010\033\017\027\020\035\022\010\025\012\026\034\042" +
    "\031\046\006\051\011\057\230\001\002\000\046\002\uffda" +
    "\003\uffda\004\uffda\006\uffda\007\uffda\010\uffda\017\uffda\020" +
    "\uffda\021\232\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\042\uffda\046\uffda\051\uffda\057\uffda\001\002\000\044\002" +
    "\uffd9\003\uffd9\004\uffd9\006\uffd9\007\uffd9\010\uffd9\017\uffd9" +
    "\020\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\042" +
    "\uffd9\046\uffd9\051\uffd9\057\uffd9\001\002\000\004\056\233" +
    "\001\002\000\034\003\032\004\025\006\036\007\017\010" +
    "\033\017\027\020\035\022\010\025\012\026\034\042\031" +
    "\046\006\051\011\001\002\000\036\003\032\004\025\006" +
    "\036\007\017\010\033\017\027\020\035\022\010\025\012" +
    "\026\034\042\031\046\006\051\011\057\235\001\002\000" +
    "\044\002\uffd8\003\uffd8\004\uffd8\006\uffd8\007\uffd8\010\uffd8" +
    "\017\uffd8\020\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\042\uffd8\046\uffd8\051\uffd8\057\uffd8\001\002\000\054" +
    "\015\uffa6\016\uffa6\027\uffa6\030\uffa6\031\124\032\116\033" +
    "\110\034\121\036\120\037\uffa6\040\uffa6\045\115\047\uffa6" +
    "\050\uffa6\054\126\055\uffa6\057\uffa6\060\uffa6\063\117\064" +
    "\uffa6\065\uffa6\001\002\000\044\002\ufff0\003\ufff0\004\ufff0" +
    "\006\ufff0\007\ufff0\010\ufff0\017\ufff0\020\ufff0\022\ufff0\023" +
    "\ufff0\024\ufff0\025\ufff0\026\ufff0\042\ufff0\046\ufff0\051\ufff0" +
    "\057\ufff0\001\002\000\006\011\241\012\146\001\002\000" +
    "\004\014\242\001\002\000\034\010\101\014\103\030\072" +
    "\041\067\042\077\052\075\053\104\056\076\066\065\067" +
    "\066\070\102\073\063\074\100\001\002\000\004\015\244" +
    "\001\002\000\006\060\uffcb\071\245\001\002\000\004\013" +
    "\246\001\002\000\004\014\247\001\002\000\004\066\250" +
    "\001\002\000\004\016\251\001\002\000\034\010\101\014" +
    "\103\030\072\041\067\042\077\052\075\053\104\056\076" +
    "\066\065\067\066\070\102\073\063\074\100\001\002\000" +
    "\004\015\253\001\002\000\004\060\254\001\002\000\044" +
    "\002\uffc6\003\uffc6\004\uffc6\006\uffc6\007\uffc6\010\uffc6\017" +
    "\uffc6\020\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6" +
    "\042\uffc6\046\uffc6\051\uffc6\057\uffc6\001\002\000\044\002" +
    "\uffed\003\uffed\004\uffed\006\uffed\007\uffed\010\uffed\017\uffed" +
    "\020\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\042" +
    "\uffed\046\uffed\051\uffed\057\uffed\001\002\000\044\002\uffeb" +
    "\003\uffeb\004\uffeb\006\uffeb\007\uffeb\010\uffeb\017\uffeb\020" +
    "\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\042\uffeb" +
    "\046\uffeb\051\uffeb\057\uffeb\001\002\000\044\002\uffec\003" +
    "\uffec\004\uffec\006\uffec\007\uffec\010\uffec\017\uffec\020\uffec" +
    "\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\042\uffec\046" +
    "\uffec\051\uffec\057\uffec\001\002\000\006\012\203\013\272" +
    "\001\002\000\034\010\101\014\103\030\072\041\067\042" +
    "\077\052\075\053\104\056\076\066\065\067\066\070\102" +
    "\073\063\074\100\001\002\000\034\010\101\014\103\030" +
    "\072\041\067\042\077\052\075\053\104\056\076\066\065" +
    "\067\066\070\102\073\063\074\100\001\002\000\004\060" +
    "\264\001\002\000\044\002\uffe4\003\uffe4\004\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\017\uffe4\020\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\042\uffe4\046\uffe4\051\uffe4\057\uffe4" +
    "\001\002\000\004\060\uffe2\001\002\000\004\057\267\001" +
    "\002\000\004\050\262\001\002\000\004\060\271\001\002" +
    "\000\044\002\uffe3\003\uffe3\004\uffe3\006\uffe3\007\uffe3\010" +
    "\uffe3\017\uffe3\020\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\042\uffe3\046\uffe3\051\uffe3\057\uffe3\001\002\000" +
    "\004\014\273\001\002\000\004\066\274\001\002\000\004" +
    "\016\275\001\002\000\034\010\101\014\103\030\072\041" +
    "\067\042\077\052\075\053\104\056\076\066\065\067\066" +
    "\070\102\073\063\074\100\001\002\000\004\015\277\001" +
    "\002\000\004\060\300\001\002\000\044\002\uffc5\003\uffc5" +
    "\004\uffc5\006\uffc5\007\uffc5\010\uffc5\017\uffc5\020\uffc5\022" +
    "\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\042\uffc5\046\uffc5" +
    "\051\uffc5\057\uffc5\001\002\000\004\060\303\001\002\000" +
    "\044\002\uffef\003\uffef\004\uffef\006\uffef\007\uffef\010\uffef" +
    "\017\uffef\020\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026" +
    "\uffef\042\uffef\046\uffef\051\uffef\057\uffef\001\002\000\044" +
    "\002\uffee\003\uffee\004\uffee\006\uffee\007\uffee\010\uffee\017" +
    "\uffee\020\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee" +
    "\042\uffee\046\uffee\051\uffee\057\uffee\001\002\000\010\016" +
    "\314\050\262\060\315\001\002\000\012\016\uffe7\050\uffe7" +
    "\056\306\060\uffe7\001\002\000\034\010\101\014\103\030" +
    "\072\041\067\042\077\052\075\053\104\056\076\066\065" +
    "\067\066\070\102\073\063\074\100\001\002\000\004\057" +
    "\310\001\002\000\006\050\262\060\311\001\002\000\044" +
    "\002\uffe6\003\uffe6\004\uffe6\006\uffe6\007\uffe6\010\uffe6\017" +
    "\uffe6\020\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6" +
    "\042\uffe6\046\uffe6\051\uffe6\057\uffe6\001\002\000\004\060" +
    "\313\001\002\000\044\002\uffe5\003\uffe5\004\uffe5\006\uffe5" +
    "\007\uffe5\010\uffe5\017\uffe5\020\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\026\uffe5\042\uffe5\046\uffe5\051\uffe5\057\uffe5" +
    "\001\002\000\004\042\320\001\002\000\072\002\uffea\003" +
    "\uffea\004\uffea\006\uffea\007\uffea\010\uffea\014\uffea\017\uffea" +
    "\020\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\030" +
    "\uffea\041\uffea\042\uffea\046\uffea\051\uffea\052\uffea\053\uffea" +
    "\056\uffea\057\uffea\066\uffea\067\uffea\070\uffea\073\uffea\074" +
    "\uffea\001\002\000\004\060\317\001\002\000\072\002\uffe9" +
    "\003\uffe9\004\uffe9\006\uffe9\007\uffe9\010\uffe9\014\uffe9\017" +
    "\uffe9\020\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9" +
    "\030\uffe9\041\uffe9\042\uffe9\046\uffe9\051\uffe9\052\uffe9\053" +
    "\uffe9\056\uffe9\057\uffe9\066\uffe9\067\uffe9\070\uffe9\073\uffe9" +
    "\074\uffe9\001\002\000\010\016\uffe8\050\uffe8\060\uffe8\001" +
    "\002\000\044\002\ufff2\003\ufff2\004\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\017\ufff2\020\ufff2\022\ufff2\023\ufff2\024\ufff2\025" +
    "\ufff2\026\ufff2\042\ufff2\046\ufff2\051\ufff2\057\ufff2\001\002" +
    "\000\034\010\101\014\103\030\072\041\067\042\077\052" +
    "\075\053\104\056\076\066\065\067\066\070\102\073\063" +
    "\074\100\001\002\000\004\015\324\001\002\000\004\060" +
    "\325\001\002\000\044\002\uffcc\003\uffcc\004\uffcc\006\uffcc" +
    "\007\uffcc\010\uffcc\017\uffcc\020\uffcc\022\uffcc\023\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\042\uffcc\046\uffcc\051\uffcc\057\uffcc" +
    "\001\002\000\034\010\101\014\103\030\072\041\067\042" +
    "\077\052\075\053\104\056\076\066\065\067\066\070\102" +
    "\073\063\074\100\001\002\000\004\015\330\001\002\000" +
    "\004\056\331\001\002\000\034\003\032\004\025\006\036" +
    "\007\017\010\033\017\027\020\035\022\010\025\012\026" +
    "\034\042\031\046\006\051\011\001\002\000\036\003\032" +
    "\004\025\006\036\007\017\010\033\017\027\020\035\022" +
    "\010\025\012\026\034\042\031\046\006\051\011\057\333" +
    "\001\002\000\044\002\uffcd\003\uffcd\004\uffcd\006\uffcd\007" +
    "\uffcd\010\uffcd\017\uffcd\020\uffcd\022\uffcd\023\uffcd\024\uffcd" +
    "\025\uffcd\026\uffcd\042\uffcd\046\uffcd\051\uffcd\057\uffcd\001" +
    "\002\000\034\010\101\014\103\030\072\041\067\042\077" +
    "\052\075\053\104\056\076\066\065\067\066\070\102\073" +
    "\063\074\100\001\002\000\004\015\336\001\002\000\004" +
    "\060\337\001\002\000\044\002\uffdb\003\uffdb\004\uffdb\006" +
    "\uffdb\007\uffdb\010\uffdb\017\uffdb\020\uffdb\022\uffdb\023\uffdb" +
    "\024\uffdb\025\uffdb\026\uffdb\042\uffdb\046\uffdb\051\uffdb\057" +
    "\uffdb\001\002\000\034\010\101\014\103\030\072\041\067" +
    "\042\077\052\075\053\104\056\076\066\065\067\066\070" +
    "\102\073\063\074\100\001\002\000\004\015\342\001\002" +
    "\000\004\056\343\001\002\000\006\023\345\024\346\001" +
    "\002\000\004\057\364\001\002\000\034\010\101\014\103" +
    "\030\072\041\067\042\077\052\075\053\104\056\076\066" +
    "\065\067\066\070\102\073\063\074\100\001\002\000\004" +
    "\050\357\001\002\000\010\023\352\024\346\057\350\001" +
    "\002\000\044\002\uffd7\003\uffd7\004\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\017\uffd7\020\uffd7\022\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\042\uffd7\046\uffd7\051\uffd7\057\uffd7\001\002" +
    "\000\004\057\356\001\002\000\034\010\101\014\103\030" +
    "\072\041\067\042\077\052\075\053\104\056\076\066\065" +
    "\067\066\070\102\073\063\074\100\001\002\000\004\050" +
    "\354\001\002\000\034\003\032\004\025\006\036\007\017" +
    "\010\033\017\027\020\035\022\010\025\012\026\034\042" +
    "\031\046\006\051\011\001\002\000\042\003\032\004\025" +
    "\006\036\007\017\010\033\017\027\020\035\022\010\023" +
    "\uffd4\024\uffd4\025\012\026\034\042\031\046\006\051\011" +
    "\057\uffd4\001\002\000\044\002\uffd6\003\uffd6\004\uffd6\006" +
    "\uffd6\007\uffd6\010\uffd6\017\uffd6\020\uffd6\022\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\026\uffd6\042\uffd6\046\uffd6\051\uffd6\057" +
    "\uffd6\001\002\000\034\003\032\004\025\006\036\007\017" +
    "\010\033\017\027\020\035\022\010\025\012\026\034\042" +
    "\031\046\006\051\011\001\002\000\036\003\032\004\025" +
    "\006\036\007\017\010\033\017\027\020\035\022\010\025" +
    "\012\026\034\042\031\046\006\051\011\057\uffd2\001\002" +
    "\000\004\050\362\001\002\000\034\003\032\004\025\006" +
    "\036\007\017\010\033\017\027\020\035\022\010\025\012" +
    "\026\034\042\031\046\006\051\011\001\002\000\042\003" +
    "\032\004\025\006\036\007\017\010\033\017\027\020\035" +
    "\022\010\023\uffd3\024\uffd3\025\012\026\034\042\031\046" +
    "\006\051\011\057\uffd3\001\002\000\044\002\uffd5\003\uffd5" +
    "\004\uffd5\006\uffd5\007\uffd5\010\uffd5\017\uffd5\020\uffd5\022" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\042\uffd5\046\uffd5" +
    "\051\uffd5\057\uffd5\001\002\000\044\002\ufff3\003\ufff3\004" +
    "\ufff3\006\ufff3\007\ufff3\010\ufff3\017\ufff3\020\ufff3\022\ufff3" +
    "\023\ufff3\024\ufff3\025\ufff3\026\ufff3\042\ufff3\046\ufff3\051" +
    "\ufff3\057\ufff3\001\002\000\006\004\367\042\370\001\002" +
    "\000\004\042\u010c\001\002\000\004\050\262\001\002\000" +
    "\034\010\101\014\103\030\072\041\067\042\077\052\075" +
    "\053\104\056\076\066\065\067\066\070\102\073\063\074" +
    "\100\001\002\000\004\060\373\001\002\000\006\045\375" +
    "\063\374\001\002\000\004\015\uffcf\001\002\000\004\015" +
    "\uffce\001\002\000\004\015\377\001\002\000\004\056\u0100" +
    "\001\002\000\034\003\032\004\025\006\036\007\017\010" +
    "\033\017\027\020\035\022\010\025\012\026\034\042\031" +
    "\046\006\051\011\001\002\000\036\003\032\004\025\006" +
    "\036\007\017\010\033\017\027\020\035\022\010\025\012" +
    "\026\034\042\031\046\006\051\011\057\u0102\001\002\000" +
    "\044\002\uffd1\003\uffd1\004\uffd1\006\uffd1\007\uffd1\010\uffd1" +
    "\017\uffd1\020\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026" +
    "\uffd1\042\uffd1\046\uffd1\051\uffd1\057\uffd1\001\002\000\004" +
    "\060\u0104\001\002\000\034\010\101\014\103\030\072\041" +
    "\067\042\077\052\075\053\104\056\076\066\065\067\066" +
    "\070\102\073\063\074\100\001\002\000\004\060\u0106\001" +
    "\002\000\006\045\375\063\374\001\002\000\004\015\u0108" +
    "\001\002\000\004\056\u0109\001\002\000\034\003\032\004" +
    "\025\006\036\007\017\010\033\017\027\020\035\022\010" +
    "\025\012\026\034\042\031\046\006\051\011\001\002\000" +
    "\036\003\032\004\025\006\036\007\017\010\033\017\027" +
    "\020\035\022\010\025\012\026\034\042\031\046\006\051" +
    "\011\057\u010b\001\002\000\044\002\uffd0\003\uffd0\004\uffd0" +
    "\006\uffd0\007\uffd0\010\uffd0\017\uffd0\020\uffd0\022\uffd0\023" +
    "\uffd0\024\uffd0\025\uffd0\026\uffd0\042\uffd0\046\uffd0\051\uffd0" +
    "\057\uffd0\001\002\000\010\016\uffe7\050\uffe7\060\uffe7\001" +
    "\002\000\010\005\u0112\013\u0114\072\u0113\001\002\000\034" +
    "\010\101\014\103\030\072\041\067\042\077\052\075\053" +
    "\104\056\076\066\065\067\066\070\102\073\063\074\100" +
    "\001\002\000\054\015\uffc3\016\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\032\uffc3\033\uffc3\034\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\045\uffc3\047\uffc3\050\uffc3\054\uffc3\055\uffc3\057\uffc3\060" +
    "\uffc3\063\uffc3\064\uffc3\065\uffc3\001\002\000\004\057\u0111" +
    "\001\002\000\054\015\uffbc\016\uffbc\027\uffbc\030\uffbc\031" +
    "\uffbc\032\uffbc\033\uffbc\034\uffbc\036\uffbc\037\uffbc\040\uffbc" +
    "\045\uffbc\047\uffbc\050\uffbc\054\uffbc\055\uffbc\057\uffbc\060" +
    "\uffbc\063\uffbc\064\uffbc\065\uffbc\001\002\000\054\015\uffba" +
    "\016\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034" +
    "\uffba\036\uffba\037\uffba\040\uffba\045\uffba\047\uffba\050\uffba" +
    "\054\uffba\055\uffba\057\uffba\060\uffba\063\uffba\064\uffba\065" +
    "\uffba\001\002\000\054\015\uffbb\016\uffbb\027\uffbb\030\uffbb" +
    "\031\uffbb\032\uffbb\033\uffbb\034\uffbb\036\uffbb\037\uffbb\040" +
    "\uffbb\045\uffbb\047\uffbb\050\uffbb\054\uffbb\055\uffbb\057\uffbb" +
    "\060\uffbb\063\uffbb\064\uffbb\065\uffbb\001\002\000\004\014" +
    "\u0115\001\002\000\004\066\u0116\001\002\000\004\016\u0117" +
    "\001\002\000\034\010\101\014\103\030\072\041\067\042" +
    "\077\052\075\053\104\056\076\066\065\067\066\070\102" +
    "\073\063\074\100\001\002\000\004\015\u0119\001\002\000" +
    "\054\015\uffc4\016\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\036\uffc4\037\uffc4\040\uffc4\045\uffc4\047" +
    "\uffc4\050\uffc4\054\uffc4\055\uffc4\057\uffc4\060\uffc4\063\uffc4" +
    "\064\uffc4\065\uffc4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0117\000\044\002\036\004\037\005\003\006\015\010" +
    "\020\011\013\016\012\017\023\020\004\021\021\022\014" +
    "\026\017\027\040\030\022\031\027\033\025\036\006\001" +
    "\001\000\004\037\u010e\001\001\000\040\004\037\005\003" +
    "\006\015\010\020\011\013\016\012\017\023\021\051\022" +
    "\014\026\017\027\040\030\022\031\027\033\025\036\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\303\001\001\000\002\001\001\000\016\005\003\013\300" +
    "\024\073\030\072\032\070\036\063\001\001\000\002\001" +
    "\001\000\004\025\262\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\004\037\005\003\006\015\010\020\011\013\016" +
    "\012\017\023\020\050\021\021\022\014\026\017\027\040" +
    "\030\022\031\027\033\025\036\006\001\001\000\040\004" +
    "\037\005\003\006\015\010\020\011\013\016\012\017\023" +
    "\021\051\022\014\026\017\027\040\030\022\031\027\033" +
    "\025\036\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\004\037\005" +
    "\003\006\015\010\020\011\013\016\012\017\023\020\056" +
    "\021\021\022\014\026\017\027\040\030\022\031\027\033" +
    "\025\036\006\001\001\000\040\004\037\005\003\006\015" +
    "\010\020\011\013\016\012\017\023\021\051\022\014\026" +
    "\017\027\040\030\022\031\027\033\025\036\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\005\003\013" +
    "\067\024\073\030\072\032\070\036\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\003\024\235\030\072\032\070\036\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\003\024\223\030\072\032\070\036\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\003\013\161\015\221\024\073\030\072\032\070\036\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\003\024\104\030\072" +
    "\032\070\036\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\003\024\143\030\072\032\070\036\063" +
    "\001\001\000\002\001\001\000\014\005\003\024\142\030" +
    "\072\032\070\036\063\001\001\000\014\005\003\024\141" +
    "\030\072\032\070\036\063\001\001\000\014\005\003\024" +
    "\140\030\072\032\070\036\063\001\001\000\014\005\003" +
    "\024\137\030\072\032\070\036\063\001\001\000\014\005" +
    "\003\024\136\030\072\032\070\036\063\001\001\000\002" +
    "\001\001\000\014\005\003\024\135\030\072\032\070\036" +
    "\063\001\001\000\002\001\001\000\014\005\003\024\134" +
    "\030\072\032\070\036\063\001\001\000\014\005\003\024" +
    "\133\030\072\032\070\036\063\001\001\000\014\005\003" +
    "\024\132\030\072\032\070\036\063\001\001\000\014\005" +
    "\003\024\131\030\072\032\070\036\063\001\001\000\014" +
    "\005\003\024\130\030\072\032\070\036\063\001\001\000" +
    "\014\005\003\024\127\030\072\032\070\036\063\001\001" +
    "\000\014\005\003\024\126\030\072\032\070\036\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\003\013\150\024\073\030" +
    "\072\032\070\036\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\005\003\013\161\015\162\024\073\030" +
    "\072\032\070\036\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\003\013\166\024" +
    "\073\030\072\032\070\036\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\004\037\005\003\006\015\010\020" +
    "\011\013\016\012\017\023\020\173\021\021\022\014\026" +
    "\017\027\040\030\022\031\027\033\025\036\006\001\001" +
    "\000\040\004\037\005\003\006\015\010\020\011\013\016" +
    "\012\017\023\021\051\022\014\026\017\027\040\030\022" +
    "\031\027\033\025\036\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\003\013\200" +
    "\024\073\030\072\032\070\036\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\004\037\005\003\006\015\010\020\011\013\016\012" +
    "\017\023\020\216\021\021\022\014\026\017\027\040\030" +
    "\022\031\027\033\025\036\006\001\001\000\040\004\037" +
    "\005\003\006\015\010\020\011\013\016\012\017\023\021" +
    "\051\022\014\026\017\027\040\030\022\031\027\033\025" +
    "\036\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\004\037\005\003\006\015\010\020\011" +
    "\013\016\012\017\023\020\226\021\021\022\014\026\017" +
    "\027\040\030\022\031\027\033\025\036\006\001\001\000" +
    "\040\004\037\005\003\006\015\010\020\011\013\016\012" +
    "\017\023\021\051\022\014\026\017\027\040\030\022\031" +
    "\027\033\025\036\006\001\001\000\004\007\230\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\004\037\005" +
    "\003\006\015\010\020\011\013\016\012\017\023\020\233" +
    "\021\021\022\014\026\017\027\040\030\022\031\027\033" +
    "\025\036\006\001\001\000\040\004\037\005\003\006\015" +
    "\010\020\011\013\016\012\017\023\021\051\022\014\026" +
    "\017\027\040\030\022\031\027\033\025\036\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\003\013\242" +
    "\024\073\030\072\032\070\036\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\005\003\013" +
    "\251\024\073\030\072\032\070\036\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\003\013\265\024\073\030\072\032\070\036" +
    "\063\001\001\000\016\005\003\013\264\024\073\030\072" +
    "\032\070\036\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\267" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\003" +
    "\013\275\024\073\030\072\032\070\036\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\315\001\001\000\002\001\001\000\016\005\003\013\306" +
    "\024\073\030\072\032\070\036\063\001\001\000\002\001" +
    "\001\000\004\025\311\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\003\013\322\024\073\030" +
    "\072\032\070\036\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\003\013\326\024" +
    "\073\030\072\032\070\036\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\004\037\005\003\006\015\010" +
    "\020\011\013\016\012\017\023\020\331\021\021\022\014" +
    "\026\017\027\040\030\022\031\027\033\025\036\006\001" +
    "\001\000\040\004\037\005\003\006\015\010\020\011\013" +
    "\016\012\017\023\021\051\022\014\026\017\027\040\030" +
    "\022\031\027\033\025\036\006\001\001\000\002\001\001" +
    "\000\016\005\003\013\334\024\073\030\072\032\070\036" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\003\013\340\024\073\030\072\032" +
    "\070\036\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\346\023\343\001\001\000\002\001\001\000" +
    "\016\005\003\013\360\024\073\030\072\032\070\036\063" +
    "\001\001\000\002\001\001\000\004\023\350\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\003\013\352" +
    "\024\073\030\072\032\070\036\063\001\001\000\002\001" +
    "\001\000\042\004\037\005\003\006\015\010\020\011\013" +
    "\016\012\017\023\020\354\021\021\022\014\026\017\027" +
    "\040\030\022\031\027\033\025\036\006\001\001\000\040" +
    "\004\037\005\003\006\015\010\020\011\013\016\012\017" +
    "\023\021\051\022\014\026\017\027\040\030\022\031\027" +
    "\033\025\036\006\001\001\000\002\001\001\000\042\004" +
    "\037\005\003\006\015\010\020\011\013\016\012\017\023" +
    "\020\357\021\021\022\014\026\017\027\040\030\022\031" +
    "\027\033\025\036\006\001\001\000\040\004\037\005\003" +
    "\006\015\010\020\011\013\016\012\017\023\021\051\022" +
    "\014\026\017\027\040\030\022\031\027\033\025\036\006" +
    "\001\001\000\002\001\001\000\042\004\037\005\003\006" +
    "\015\010\020\011\013\016\012\017\023\020\362\021\021" +
    "\022\014\026\017\027\040\030\022\031\027\033\025\036" +
    "\006\001\001\000\040\004\037\005\003\006\015\010\020" +
    "\011\013\016\012\017\023\021\051\022\014\026\017\027" +
    "\040\030\022\031\027\033\025\036\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\370\001\001\000" +
    "\004\035\303\001\001\000\004\025\u0102\001\001\000\016" +
    "\005\003\013\371\024\073\030\072\032\070\036\063\001" +
    "\001\000\002\001\001\000\004\034\375\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\004\037\005\003\006\015\010\020\011\013" +
    "\016\012\017\023\020\u0100\021\021\022\014\026\017\027" +
    "\040\030\022\031\027\033\025\036\006\001\001\000\040" +
    "\004\037\005\003\006\015\010\020\011\013\016\012\017" +
    "\023\021\051\022\014\026\017\027\040\030\022\031\027" +
    "\033\025\036\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\003\013\u0104\024\073\030\072\032\070" +
    "\036\063\001\001\000\002\001\001\000\004\034\u0106\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\004\037" +
    "\005\003\006\015\010\020\011\013\016\012\017\023\020" +
    "\u0109\021\021\022\014\026\017\027\040\030\022\031\027" +
    "\033\025\036\006\001\001\000\040\004\037\005\003\006" +
    "\015\010\020\011\013\016\012\017\023\021\051\022\014" +
    "\026\017\027\040\030\022\031\027\033\025\036\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\003\013\u010f\024\073\030\072\032\070\036" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\003" +
    "\013\u0117\024\073\030\072\032\070\036\063\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoCJS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoCJS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoCJS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }


// METODOS Y VARIABLES GLOBALES DEL PARSER, PUEDEN SER PUBLICAS O PRIVADAS

public void syntax_error(Symbol s){
/**Metodo al que se llama automaticamente ante algun error sintactico.*/
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
        int linea = s.right+1; int columna = s.left; 
        String texto = "Identificador " +s.value + " no reconocido.";
    Datos.agregarError("Error Sintactico",texto, linea,columna);

}            
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
/**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
        System.out.println("Error Sintactico no recuperable en la Linea " + (s.right+1)+ " Columna "+s.left+". Identificador " + s.value + " no reconocido.");
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoCJS$actions {



  private final SintacticoCJS parser;

  /** Constructor */
  CUP$SintacticoCJS$actions(SintacticoCJS parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoCJS$do_action_part00000000(
    int                        CUP$SintacticoCJS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoCJS$parser,
    java.util.Stack            CUP$SintacticoCJS$stack,
    int                        CUP$SintacticoCJS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoCJS$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoCJS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter start_val = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoCJS$parser.done_parsing();
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCION 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    cjs.NODO = i.nodo;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCION ::= INSTRUCCION OPCION 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoCJS INSTRUCCION = new NodoCJS("INSTRUCCION");
    INSTRUCCION.insertar(i.nodo); INSTRUCCION.insertar(n.nodo);
    RESULT.nodo = INSTRUCCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",14, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCION ::= OPCION 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS INSTRUCCION = new NodoCJS("INSTRUCCION");
    RESULT = new Caracter();
    INSTRUCCION.insertar(n.nodo); 
    RESULT.nodo = INSTRUCCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",14, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OPCION ::= SWITCH 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OPCION ::= CICLO 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OPCION ::= IF 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OPCION ::= VARIABLE 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OPCION ::= VECTOR 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OPCION ::= FUNCION 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // OPCION ::= ASIGNACION 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // OPCION ::= PARA 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OPCION ::= IMPRIMIR 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // OPCION ::= MENSAJE 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OPCION ::= LLAMADAOPCION puntoComa 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OPCION ::= DOCUMENTO puntoComa 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OPCION ::= SET 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OPCION ::= detener puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(new NodoCJS("detener",iright,ileft)); OPCION.insertar(new NodoCJS(";"));
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OPCION ::= retornar puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(new NodoCJS("retornar",iright,ileft)); OPCION.insertar(new NodoCJS(";"));
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OPCION ::= retornar OP puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(new NodoCJS("retornar",iright,ileft)); OPCION.insertar(n.nodo); OPCION.insertar(new NodoCJS(";"));
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OPCION ::= error llaveC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		//3
    RESULT = new Caracter();
    NodoCJS E = new NodoCJS("ERROR");
    E.insertar(new NodoCJS((String)i)); 
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPCION ::= error puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		//3
    RESULT = new Caracter();
    NodoCJS E = new NodoCJS("ERROR");
    E.insertar(new NodoCJS((String)i)); 
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPCION ::= error parentesisC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		//3
    RESULT = new Caracter();
    NodoCJS E = new NodoCJS("ERROR");
    E.insertar(new NodoCJS((String)i)); 
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VARIABLE ::= dimv MasVARIABLE puntoComa 
            {
              Caracter RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		//2
    NodoCJS V = new NodoCJS("VARIABLE");
    RESULT = new Caracter();
    V.insertar(new NodoCJS("dimv",dright,dleft)); V.insertar(i.nodo); 
    RESULT.nodo = V;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("VARIABLE",16, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VARIABLE ::= dimv MasVARIABLE ASIGNAR puntoComa 
            {
              Caracter RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		 //4
    NodoCJS V = new NodoCJS("VARIABLE");
    RESULT = new Caracter();
    V.insertar(new NodoCJS("dimv",dright,dleft)); V.insertar(i.nodo); V.insertar(a.nodo);  
    RESULT.nodo = V;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("VARIABLE",16, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MasVARIABLE ::= MasVARIABLE coma id 
            {
              Caracter RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 //3
    NodoCJS MasVARIABLE = new NodoCJS("MasVARIABLE");
    RESULT = new Caracter();
    MasVARIABLE.insertar(m.nodo);  MasVARIABLE.insertar(new NodoCJS(",")); MasVARIABLE.insertar(new NodoCJS(i,iright,ileft));
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("MasVARIABLE",27, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MasVARIABLE ::= id 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 //1
    NodoCJS MasVARIABLE = new NodoCJS("MasVARIABLE");
    RESULT = new Caracter();
    MasVARIABLE.insertar(new NodoCJS(i,iright,ileft));
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("MasVARIABLE",27, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VECTOR ::= dimv id llaveA OP llaveC puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		//3
    NodoCJS V = new NodoCJS("VECTOR");
    RESULT = new Caracter();
    V.insertar(new NodoCJS("dimv")); V.insertar(new NodoCJS(i,iright,ileft)); V.insertar(n.nodo); V.insertar(new NodoCJS(";")); 
    RESULT.nodo = V;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("VECTOR",25, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VECTOR ::= dimv id llaveA OP llaveC ASIGNAR puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		 //4
    NodoCJS V = new NodoCJS("VECTOR");
    RESULT = new Caracter();
    V.insertar(new NodoCJS("dimv")); V.insertar(new NodoCJS(i,iright,ileft)); V.insertar(n.nodo); V.insertar(a.nodo);  V.insertar(new NodoCJS(";")); 
    RESULT.nodo = V;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("VECTOR",25, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASIGNACION ::= id ASIGNAR puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		 //3
    NodoCJS ASIGNACION = new NodoCJS("ASIGNACION");
    RESULT = new Caracter();
    ASIGNACION.insertar(new NodoCJS(i,iright,ileft));  ASIGNACION.insertar(a.nodo); ASIGNACION.insertar(new NodoCJS(";")); 
    RESULT.nodo = ASIGNACION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ASIGNACION",13, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ASIGNACION ::= id llaveA OP llaveC ASIGNAR puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		 //2 (?)
    NodoCJS ASIGNACION = new NodoCJS("ASIGNACION");
    RESULT = new Caracter();
    ASIGNACION.insertar(new NodoCJS(i,iright,ileft));  ASIGNACION.insertar(n.nodo); ASIGNACION.insertar(a.nodo); ASIGNACION.insertar(new NodoCJS(";")); 
    RESULT.nodo = ASIGNACION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ASIGNACION",13, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASIGNAR ::= dosPuntos OP 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS ASIGNAR = new NodoCJS("ASIGNAR");
    RESULT = new Caracter();
    ASIGNAR.insertar(new NodoCJS(":"));  ASIGNAR.insertar(n.nodo);
    RESULT.nodo = ASIGNAR;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ASIGNAR",19, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALORES ::= VALORES coma OP 
            {
              Caracter RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS VALORES = new NodoCJS("VALORES");
    RESULT = new Caracter();
    VALORES.insertar(v.nodo); VALORES.insertar(new NodoCJS(",")); VALORES.insertar(n.nodo); 
    RESULT.nodo = VALORES;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("VALORES",11, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VALORES ::= OP 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS VALORES = new NodoCJS("VALORES");
    RESULT = new Caracter();
    VALORES.insertar(n.nodo); 
    RESULT.nodo = VALORES;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("VALORES",11, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUNCION ::= funcion id parentesisA PARAMETROS parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Caracter p = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		 //8
    NodoCJS E = new NodoCJS("FUNCION");
    RESULT = new Caracter();
    E.insertar(new NodoCJS("funcion")); E.insertar(new NodoCJS(i,iright,ileft)); E.insertar(new NodoCJS("(")); E.insertar(p.nodo); E.insertar(new NodoCJS(")"));
    E.insertar(new NodoCJS("{")); E.insertar(n.nodo); E.insertar(new NodoCJS("}"));
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("FUNCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUNCION ::= funcion id parentesisA parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		//7
    NodoCJS E = new NodoCJS("FUNCION");
    RESULT = new Caracter();
    E.insertar(new NodoCJS("funcion")); E.insertar(new NodoCJS(i,iright,ileft)); E.insertar(new NodoCJS("(")); E.insertar(new NodoCJS(")"));
    E.insertar(new NodoCJS("{")); E.insertar(n.nodo); E.insertar(new NodoCJS("}"));
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("FUNCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAMETROS ::= PARAMETROS coma id 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		  //3
    NodoCJS PARAMETROS = new NodoCJS("PARAMETROS");
    RESULT = new Caracter();
    PARAMETROS.insertar(n.nodo); PARAMETROS.insertar(new NodoCJS(i,iright,ileft)); 
    RESULT.nodo = PARAMETROS;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("PARAMETROS",8, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMETROS ::= id 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 //2
    NodoCJS PARAMETROS = new NodoCJS("PARAMETROS");
    RESULT = new Caracter();
    PARAMETROS.insertar(new NodoCJS(i,iright,ileft)); 
    RESULT.nodo = PARAMETROS;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("PARAMETROS",8, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IMPRIMIR ::= imprimir parentesisA OP parentesisC puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		
    NodoCJS IMPRIMIR = new NodoCJS("IMPRIMIR");
    RESULT = new Caracter();
    IMPRIMIR.insertar(new NodoCJS("imprimir",iright,ileft)); IMPRIMIR.insertar(new NodoCJS("(")); IMPRIMIR.insertar(n.nodo);
    IMPRIMIR.insertar(new NodoCJS(")")); IMPRIMIR.insertar(new NodoCJS(";")); 
    RESULT.nodo = IMPRIMIR;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",12, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IF ::= si parentesisA OP parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		//7
    NodoCJS IF = new NodoCJS("IF");
    RESULT = new Caracter();
    IF.insertar(new NodoCJS("if")); IF.insertar(new NodoCJS("(")); IF.insertar(n.nodo); IF.insertar(new NodoCJS(")")); IF.insertar(new NodoCJS("{")); 
    IF.insertar(i.nodo); IF.insertar(new NodoCJS("}")); 
    RESULT.nodo = IF;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IF ::= si parentesisA OP parentesisC llaveA INSTRUCCION llaveC ELSE 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter l = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		//8
    NodoCJS IF = new NodoCJS("IF");
    RESULT = new Caracter();
    IF.insertar(new NodoCJS("si")); IF.insertar(new NodoCJS("(")); IF.insertar(n.nodo); IF.insertar(new NodoCJS(")")); IF.insertar(new NodoCJS("{")); 
    IF.insertar((i.nodo)); IF.insertar(new NodoCJS("}"));IF.insertar(l.nodo); 
    RESULT.nodo = IF;    

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ELSE ::= sino llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		 //4
    NodoCJS ELSE = new NodoCJS("ELSE");
    RESULT = new Caracter();
    ELSE.insertar(new NodoCJS("sino")); ELSE.insertar(new NodoCJS("{")); ELSE.insertar((i.nodo)); ELSE.insertar(new NodoCJS("}")); 
    RESULT.nodo = ELSE;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ELSE",5, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SWITCH ::= selecciona parentesisA OP parentesisC llaveA CASO llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter c = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		//7
    NodoCJS SWITCH = new NodoCJS("SWITCH");
    RESULT = new Caracter();
    SWITCH.insertar(new NodoCJS("Selecciona")); SWITCH.insertar(new NodoCJS("(")); SWITCH.insertar(n.nodo); SWITCH.insertar(new NodoCJS(")")); SWITCH.insertar(new NodoCJS("{"));
    SWITCH.insertar(c.nodo); SWITCH.insertar(new NodoCJS("}"));
    RESULT.nodo = SWITCH;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SWITCH",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SWITCH ::= selecciona parentesisA OP parentesisC llaveA CASO DEFECTO llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter c = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter d = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		//8
    NodoCJS SWITCH = new NodoCJS("SWITCH");
    RESULT = new Caracter();
    SWITCH.insertar(new NodoCJS("Selecciona")); SWITCH.insertar(new NodoCJS("(")); SWITCH.insertar(n.nodo); SWITCH.insertar(new NodoCJS(")")); SWITCH.insertar(new NodoCJS("{"));
    SWITCH.insertar(c.nodo); SWITCH.insertar(d.nodo); SWITCH.insertar(new NodoCJS("}"));
    RESULT.nodo = SWITCH;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SWITCH",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SWITCH ::= selecciona parentesisA OP parentesisC llaveA DEFECTO llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter d = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		//7
    NodoCJS SWITCH = new NodoCJS("SWITCH");
    RESULT = new Caracter();
    SWITCH.insertar(new NodoCJS("Selecciona")); SWITCH.insertar(new NodoCJS("(")); SWITCH.insertar(n.nodo); SWITCH.insertar(new NodoCJS(")")); SWITCH.insertar(new NodoCJS("{"));
    SWITCH.insertar(d.nodo); SWITCH.insertar(new NodoCJS("}"));
    RESULT.nodo = SWITCH;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SWITCH",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CASO ::= CASO caso OP dosPuntos INSTRUCCION 
            {
              Caracter RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Caracter c = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS CASO = new NodoCJS("CASO");
    RESULT = new Caracter();
    CASO.insertar(c.nodo); CASO.insertar(new NodoCJS("case")); CASO.insertar(n.nodo); CASO.insertar(new NodoCJS(":")); CASO.insertar(i.nodo);
    RESULT.nodo = CASO;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("CASO",10, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CASO ::= caso OP dosPuntos INSTRUCCION 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS CASO = new NodoCJS("CASO");
    RESULT = new Caracter();
    CASO.insertar(new NodoCJS("case")); CASO.insertar(n.nodo); CASO.insertar(new NodoCJS(":")); CASO.insertar(i.nodo);
    RESULT.nodo = CASO;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("CASO",10, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DEFECTO ::= defecto dosPuntos INSTRUCCION 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS DEFECTO = new NodoCJS("DEFECTO");
    RESULT = new Caracter();
    DEFECTO.insertar(new NodoCJS("default")); DEFECTO.insertar(new NodoCJS(":")); DEFECTO.insertar(i.nodo);
    RESULT.nodo = DEFECTO;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("DEFECTO",17, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PARA ::= para parentesisA VARIABLE OP puntoComa OPERADOR parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).right;
		Caracter n1 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Caracter n2 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		  //10
    NodoCJS PARA = new NodoCJS("PARA");
    RESULT = new Caracter();
    PARA.insertar(new NodoCJS("Para")); PARA.insertar(new NodoCJS("(")); PARA.insertar(a.nodo);  PARA.insertar(n1.nodo); PARA.insertar(new NodoCJS(";"));//5
    PARA.insertar(n2.nodo); PARA.insertar(new NodoCJS(")")); PARA.insertar(new NodoCJS("{"));  PARA.insertar(i.nodo);  PARA.insertar(new NodoCJS("}"));
    RESULT.nodo = PARA;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("PARA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PARA ::= para parentesisA id ASIGNAR puntoComa OP puntoComa OPERADOR parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-9)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-9)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).right;
		Caracter n1 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Caracter n2 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		  //12
    NodoCJS PARA = new NodoCJS("PARA");
    RESULT = new Caracter();
    PARA.insertar(new NodoCJS("Para")); PARA.insertar(new NodoCJS("("));  PARA.insertar(new NodoCJS(d));  PARA.insertar(a.nodo);PARA.insertar(new NodoCJS(";")); PARA.insertar(n1.nodo);  PARA.insertar(new NodoCJS(";"));
    PARA.insertar(n2.nodo); PARA.insertar(new NodoCJS(")")); PARA.insertar(new NodoCJS("{"));  PARA.insertar(i.nodo);  PARA.insertar(new NodoCJS("}"));
    RESULT.nodo = PARA;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("PARA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-11)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERADOR ::= aumentar 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS OPERADOR = new NodoCJS("OPERADOR");
    RESULT = new Caracter();
    OPERADOR.insertar(new NodoCJS("++",iright,ileft));
    RESULT.nodo = OPERADOR;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPERADOR",26, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERADOR ::= disminuir 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS OPERADOR = new NodoCJS("OPERADOR");
    RESULT = new Caracter();
    OPERADOR.insertar(new NodoCJS("--",iright,ileft));
    RESULT.nodo = OPERADOR;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPERADOR",26, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CICLO ::= mientras parentesisA OP parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		//7
    NodoCJS CICLO = new NodoCJS("CICLO");
    RESULT = new Caracter();
    CICLO.insertar(new NodoCJS("while")); CICLO.insertar(new NodoCJS("(")); CICLO.insertar(n.nodo); CICLO.insertar(new NodoCJS(")")); CICLO.insertar(new NodoCJS("{"));
    CICLO.insertar(i.nodo); CICLO.insertar(new NodoCJS("}"));
    RESULT.nodo = CICLO;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("CICLO",6, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MENSAJE ::= mensaje parentesisA OP parentesisC puntoComa 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		
    NodoCJS IMPRIMIR = new NodoCJS("MENSAJE");
    RESULT = new Caracter();
    IMPRIMIR.insertar(new NodoCJS("mensaje")); IMPRIMIR.insertar(new NodoCJS("(")); IMPRIMIR.insertar(n.nodo);
    IMPRIMIR.insertar(new NodoCJS(")")); IMPRIMIR.insertar(new NodoCJS(";")); 
    RESULT.nodo = IMPRIMIR;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("MENSAJE",21, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DOCUMENTO ::= documento punto obtener parentesisA OP parentesisC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		 //2
    NodoCJS A = new NodoCJS("DOCUMENTO");
    RESULT = new Caracter();
    A.insertar(new NodoCJS("documento.obtener(")); A.insertar(n.nodo); 
    RESULT.nodo = A;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("DOCUMENTO",22, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DOCUMENTO ::= documento punto observador parentesisA cadena coma LLAMADA parentesisC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter l = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		 //5
    NodoCJS A = new NodoCJS("DOCUMENTO");
    RESULT = new Caracter();
    A.insertar(new NodoCJS("documento.observador(")); A.insertar(new NodoCJS(n));  A.insertar(new NodoCJS(",")); A.insertar(l.nodo); 
    A.insertar(new NodoCJS(")")); 
    RESULT.nodo = A;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("DOCUMENTO",22, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DOCUMENTO ::= documento punto observador parentesisA cadena coma funcion parentesisA parentesisC llaveA INSTRUCCION llaveC parentesisC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter l = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		 //5
    NodoCJS A = new NodoCJS("DOCUMENTO");
    RESULT = new Caracter();
    A.insertar(new NodoCJS("documento.observador("));A.insertar(new NodoCJS(n)); A.insertar(new NodoCJS(",funcion(){"));A.insertar(l.nodo); 
    A.insertar(new NodoCJS("})"));
    RESULT.nodo = A;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("DOCUMENTO",22, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DOCUMENTO ::= id punto observador parentesisA cadena coma funcion parentesisA parentesisC llaveA INSTRUCCION llaveC parentesisC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-12)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-12)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-12)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter l = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		 //4
    NodoCJS A = new NodoCJS("DOCUMENTO");
    RESULT = new Caracter();
    A.insertar(new NodoCJS(i,iright,ileft)); A.insertar(new NodoCJS(n)); A.insertar(new NodoCJS(",funcion(){"));A.insertar(l.nodo); 
    RESULT.nodo = A;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("DOCUMENTO",22, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DOCUMENTO ::= id punto observador parentesisA cadena coma LLAMADA parentesisC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter l = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		 //6
    NodoCJS A = new NodoCJS("DOCUMENTO");
    RESULT = new Caracter();
    A.insertar(new NodoCJS(i,iright,ileft)); A.insertar(new NodoCJS(".observador(")); A.insertar(new NodoCJS(n));  A.insertar(new NodoCJS(",")); A.insertar(l.nodo); 
    A.insertar(new NodoCJS(")")); 
    RESULT.nodo = A;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("DOCUMENTO",22, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SET ::= documento punto obtener parentesisA OP parentesisC punto set parentesisA cadena coma OP parentesisC puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-13)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-13)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-13)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-9)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-9)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-9)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		 //8
    NodoCJS A = new NodoCJS("SET");
    RESULT = new Caracter();
    A.insertar(new NodoCJS("documento.obtener(",iright,ileft)); A.insertar(n.nodo);A.insertar(new NodoCJS(").setElemento("));  A.insertar(new NodoCJS(s)); A.insertar(new NodoCJS(","));A.insertar(m.nodo);
    A.insertar(new NodoCJS(")")); ; A.insertar(new NodoCJS(";"));
    RESULT.nodo = A;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SET",23, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-13)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SET ::= id punto set parentesisA cadena coma OP parentesisC puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		 //7
    NodoCJS A = new NodoCJS("SET");
    RESULT = new Caracter();
    A.insertar(new NodoCJS(i,iright,ileft)); A.insertar(new NodoCJS(").setElemento("));  A.insertar(new NodoCJS(s)); A.insertar(new NodoCJS(","));A.insertar(n.nodo); 
    A.insertar(new NodoCJS(")")); ; A.insertar(new NodoCJS(";")); 
    RESULT.nodo = A;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SET",23, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LLAMADAOPCION ::= LLAMADA punto set parentesisA cadena coma OP parentesisC 
            {
              Caracter RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).right;
		Caracter l = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		 //7
    NodoCJS A = new NodoCJS("LLAMADAOPCION");
    RESULT = new Caracter();
    A.insertar(l.nodo);  A.insertar(new NodoCJS(").setElemento(")); A.insertar(new NodoCJS(s)); A.insertar(new NodoCJS(","));A.insertar(n.nodo); 
    A.insertar(new NodoCJS(")")); ; A.insertar(new NodoCJS(";")); 
    RESULT.nodo = A;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LLAMADAOPCION",28, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LLAMADAOPCION ::= LLAMADA ACCESO2 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 
    NodoCJS A = new NodoCJS("LLAMADAOPCION");
    RESULT = new Caracter();
    A.insertar(n.nodo); A.insertar(a.nodo); 
    RESULT.nodo = A;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LLAMADAOPCION",28, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LLAMADAOPCION ::= LLAMADA 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 
    NodoCJS A = new NodoCJS("LLAMADAOPCION");
    RESULT = new Caracter();
    A.insertar(a.nodo); 
    RESULT.nodo = A;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LLAMADAOPCION",28, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LLAMADA ::= id parentesisA parentesisC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		 //3
    NodoCJS INSTANCIA = new NodoCJS("LLAMADA");
    RESULT = new Caracter();
    INSTANCIA.insertar(new NodoCJS(i,iright,ileft));  INSTANCIA.insertar(new NodoCJS("(")); INSTANCIA.insertar(new NodoCJS(")"));
    RESULT.nodo = INSTANCIA;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",3, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LLAMADA ::= id parentesisA VALORES parentesisC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		 //4
    NodoCJS INSTANCIA = new NodoCJS("LLAMADA");
    RESULT = new Caracter();
    INSTANCIA.insertar(new NodoCJS(i,iright,ileft)); INSTANCIA.insertar(new NodoCJS("(")); INSTANCIA.insertar(n.nodo); INSTANCIA.insertar(new NodoCJS(")")); 
    RESULT.nodo = INSTANCIA;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",3, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ACCESO ::= id llaveA OP llaveC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		 
    NodoCJS A = new NodoCJS("ACCESO");
    RESULT = new Caracter();
    A.insertar(new NodoCJS(i,iright,ileft)); A.insertar(new NodoCJS("{")); A.insertar(n.nodo); A.insertar(new NodoCJS("}")); 
    RESULT.nodo = A;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ACCESO",24, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ACCESO ::= id punto conteo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		 
    NodoCJS A = new NodoCJS("ACCESO");
    RESULT = new Caracter();
    A.insertar(new NodoCJS(i,iright,ileft)); A.insertar(new NodoCJS(".")); A.insertar(new NodoCJS("conteo")); 
    RESULT.nodo = A;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ACCESO",24, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ACCESO ::= id punto atexto 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		 
    NodoCJS A = new NodoCJS("ACCESO");
    RESULT = new Caracter();
    A.insertar(new NodoCJS(i,iright,ileft)); A.insertar(new NodoCJS(".")); A.insertar(new NodoCJS("atexto()")); 
    RESULT.nodo = A;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ACCESO",24, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ACCESO2 ::= llaveA OP llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		 
    NodoCJS A = new NodoCJS("ACCESO2");
    RESULT = new Caracter();
    A.insertar(new NodoCJS("{")); A.insertar(n.nodo); A.insertar(new NodoCJS("}")); 
    RESULT.nodo = A;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ACCESO2",29, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ACCESO2 ::= punto conteo 
            {
              Caracter RESULT =null;
		 
    NodoCJS A = new NodoCJS("ACCESO2");
    RESULT = new Caracter();
    A.insertar(new NodoCJS(".")); A.insertar(new NodoCJS("conteo")); 
    RESULT.nodo = A;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ACCESO2",29, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ACCESO2 ::= punto atexto 
            {
              Caracter RESULT =null;
		 
    NodoCJS A = new NodoCJS("ACCESO2");
    RESULT = new Caracter();
    A.insertar(new NodoCJS(".")); A.insertar(new NodoCJS("atexto()")); 
    RESULT.nodo = A;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ACCESO2",29, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP ::= E 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS OP = new NodoCJS("OP");
    RESULT = new Caracter();
    OP.insertar(e.nodo);
    RESULT.nodo = OP;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OP",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= parentesisA E parentesisC 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(new NodoCJS("(")); E.insertar(a.nodo); E.insertar(new NodoCJS(")"));
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= E mas E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS("+",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= E menos E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS("-",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= E por E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS("*",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= E dividido E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS("/",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E ::= E modulo E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS("%",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E ::= E aumentar 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS("++",iright,ileft));
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E ::= E disminuir 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS("--",iright,ileft));
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E ::= E mayor E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS(">",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E ::= E menor E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS("<",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E ::= E mayorIgual E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS(">=",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E ::= E menorIgual E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS("<=",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E ::= E igualDoble E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS("==",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E ::= E diferente E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS("!=",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E ::= verdadero 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(new NodoCJS("verdadero","bool",iright,ileft));
    RESULT.nodo = E;
 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E ::= falso 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(new NodoCJS("falso","bool",iright,ileft));
    RESULT.nodo = E;
 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E ::= E or E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS("||",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E ::= E and E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS("&&",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E ::= not E 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(new NodoCJS("!",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E ::= E potencia E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS("^",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E ::= menos E 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(new NodoCJS("-",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E ::= cadena 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    RESULT = new Caracter();
    n = n.replace("\"","");
    NodoCJS E = new NodoCJS("E");
    E.insertar(new NodoCJS(n,"cadena",nright,nleft));
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E ::= entero 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoCJS E = new NodoCJS("E");
    E.insertar(new NodoCJS(n,"entero",nright,nleft));
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E ::= decimal 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoCJS E = new NodoCJS("E");
    E.insertar(new NodoCJS(n,"decimal",nright,nleft));
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E ::= id 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoCJS E = new NodoCJS("E");
    E.insertar(new NodoCJS(i,"id",iright,ileft));
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E ::= fecha 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoCJS E = new NodoCJS("E");
    E.insertar(new NodoCJS(i,"fecha",iright,ileft));
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // E ::= hora 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoCJS E = new NodoCJS("E");
    E.insertar(new NodoCJS(i,"hora",iright,ileft));
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E ::= DOCUMENTO 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoCJS E = new NodoCJS("E");
    E.insertar(i.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E ::= ACCESO 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoCJS E = new NodoCJS("E");
    E.insertar(i.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E ::= LLAMADAOPCION 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoCJS E = new NodoCJS("E");
    E.insertar(i.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E ::= llaveA VALORES llaveC 
            {
              Caracter RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		//1
    NodoCJS ASIGNAR = new NodoCJS("E");
    RESULT = new Caracter();
    ASIGNAR.insertar(new NodoCJS("{")); ASIGNAR.insertar(v.nodo);  ASIGNAR.insertar(new NodoCJS("}")); 
    RESULT.nodo = ASIGNAR;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoCJS$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoCJS$do_action(
    int                        CUP$SintacticoCJS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoCJS$parser,
    java.util.Stack            CUP$SintacticoCJS$stack,
    int                        CUP$SintacticoCJS$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoCJS$do_action_part00000000(
                               CUP$SintacticoCJS$act_num,
                               CUP$SintacticoCJS$parser,
                               CUP$SintacticoCJS$stack,
                               CUP$SintacticoCJS$top);
    }
}

}
