
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package cjs;

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoCJS extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoCJS() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoCJS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoCJS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\004\000\002\002\003\000\002\020" +
    "\004\000\002\020\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\004\000\002\021" +
    "\004\000\002\021\003\000\002\021\004\000\002\021\004" +
    "\000\002\021\005\000\002\022\005\000\002\022\006\000" +
    "\002\035\005\000\002\035\003\000\002\033\010\000\002" +
    "\033\011\000\002\017\005\000\002\017\010\000\002\025" +
    "\004\000\002\025\006\000\002\015\005\000\002\015\003" +
    "\000\002\004\012\000\002\004\011\000\002\012\005\000" +
    "\002\012\003\000\002\016\007\000\002\006\011\000\002" +
    "\006\012\000\002\007\006\000\002\011\011\000\002\011" +
    "\012\000\002\011\011\000\002\014\007\000\002\014\006" +
    "\000\002\023\005\000\002\026\014\000\002\026\016\000" +
    "\002\034\003\000\002\034\003\000\002\010\011\000\002" +
    "\027\007\000\002\030\010\000\002\030\012\000\002\030" +
    "\017\000\002\030\012\000\002\031\020\000\002\031\013" +
    "\000\002\005\005\000\002\005\006\000\002\032\006\000" +
    "\002\032\005\000\002\032\005\000\002\013\003\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\004" +
    "\000\002\024\004\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\003\000\002\024\003\000\002\024" +
    "\005\000\002\024\005\000\002\024\004\000\002\024\005" +
    "\000\002\024\004\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\375\000\032\004\024\006\034\007\017\010\031\017" +
    "\026\020\033\022\007\025\011\026\032\042\030\046\006" +
    "\051\010\001\002\000\004\060\377\001\002\000\034\002" +
    "\000\004\024\006\034\007\017\010\031\017\026\020\033" +
    "\022\007\025\011\026\032\042\030\046\006\051\010\001" +
    "\002\000\004\014\350\001\002\000\004\014\323\001\002" +
    "\000\004\014\317\001\002\000\004\014\311\001\002\000" +
    "\042\002\ufff5\004\ufff5\006\ufff5\007\ufff5\010\ufff5\017\ufff5" +
    "\020\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\042" +
    "\ufff5\046\ufff5\051\ufff5\057\ufff5\001\002\000\042\002\ufffd" +
    "\004\ufffd\006\ufffd\007\ufffd\010\ufffd\017\ufffd\020\ufffd\022" +
    "\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\042\ufffd\046\ufffd" +
    "\051\ufffd\057\ufffd\001\002\000\042\002\ufffa\004\ufffa\006" +
    "\ufffa\007\ufffa\010\ufffa\017\ufffa\020\ufffa\022\ufffa\023\ufffa" +
    "\024\ufffa\025\ufffa\026\ufffa\042\ufffa\046\ufffa\051\ufffa\057" +
    "\ufffa\001\002\000\042\002\ufffb\004\ufffb\006\ufffb\007\ufffb" +
    "\010\ufffb\017\ufffb\020\ufffb\022\ufffb\023\ufffb\024\ufffb\025" +
    "\ufffb\026\ufffb\042\ufffb\046\ufffb\051\ufffb\057\ufffb\001\002" +
    "\000\042\002\ufff6\004\ufff6\006\ufff6\007\ufff6\010\ufff6\017" +
    "\ufff6\020\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\042\ufff6\046\ufff6\051\ufff6\057\ufff6\001\002\000\004\014" +
    "\305\001\002\000\042\002\ufffc\004\ufffc\006\ufffc\007\ufffc" +
    "\010\ufffc\017\ufffc\020\ufffc\022\ufffc\023\ufffc\024\ufffc\025" +
    "\ufffc\026\ufffc\042\ufffc\046\ufffc\051\ufffc\057\ufffc\001\002" +
    "\000\042\002\ufffe\004\ufffe\006\ufffe\007\ufffe\010\ufffe\017" +
    "\ufffe\020\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe" +
    "\042\ufffe\046\ufffe\051\ufffe\057\ufffe\001\002\000\004\060" +
    "\304\001\002\000\042\002\ufff7\004\ufff7\006\ufff7\007\ufff7" +
    "\010\ufff7\017\ufff7\020\ufff7\022\ufff7\023\ufff7\024\ufff7\025" +
    "\ufff7\026\ufff7\042\ufff7\046\ufff7\051\ufff7\057\ufff7\001\002" +
    "\000\004\042\270\001\002\000\042\002\ufff9\004\ufff9\006" +
    "\ufff9\007\ufff9\010\ufff9\017\ufff9\020\ufff9\022\ufff9\023\ufff9" +
    "\024\ufff9\025\ufff9\026\ufff9\042\ufff9\046\ufff9\051\ufff9\057" +
    "\ufff9\001\002\000\034\010\076\014\066\030\072\041\067" +
    "\042\063\052\074\053\073\060\265\066\070\067\071\070" +
    "\075\073\077\074\062\001\002\000\042\002\ufff1\004\ufff1" +
    "\006\ufff1\007\ufff1\010\ufff1\017\ufff1\020\ufff1\022\ufff1\023" +
    "\ufff1\024\ufff1\025\ufff1\026\ufff1\042\ufff1\046\ufff1\051\ufff1" +
    "\057\ufff1\001\002\000\012\014\154\050\242\056\241\071" +
    "\240\001\002\000\004\071\223\001\002\000\004\060\222" +
    "\001\002\000\004\014\060\001\002\000\004\042\041\001" +
    "\002\000\004\002\040\001\002\000\042\002\ufff8\004\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\017\ufff8\020\ufff8\022\ufff8\023" +
    "\ufff8\024\ufff8\025\ufff8\026\ufff8\042\ufff8\046\ufff8\051\ufff8" +
    "\057\ufff8\001\002\000\042\002\ufff4\004\ufff4\006\ufff4\007" +
    "\ufff4\010\ufff4\017\ufff4\020\ufff4\022\ufff4\023\ufff4\024\ufff4" +
    "\025\ufff4\026\ufff4\042\ufff4\046\ufff4\051\ufff4\057\ufff4\001" +
    "\002\000\004\002\001\001\002\000\004\014\042\001\002" +
    "\000\006\015\044\042\045\001\002\000\006\015\053\016" +
    "\052\001\002\000\004\056\046\001\002\000\006\015\uffde" +
    "\016\uffde\001\002\000\032\004\024\006\034\007\017\010" +
    "\031\017\026\020\033\022\007\025\011\026\032\042\030" +
    "\046\006\051\010\001\002\000\034\004\024\006\034\007" +
    "\017\010\031\017\026\020\033\022\007\025\011\026\032" +
    "\042\030\046\006\051\010\057\051\001\002\000\042\002" +
    "\uffff\004\uffff\006\uffff\007\uffff\010\uffff\017\uffff\020\uffff" +
    "\022\uffff\023\uffff\024\uffff\025\uffff\026\uffff\042\uffff\046" +
    "\uffff\051\uffff\057\uffff\001\002\000\042\002\uffe0\004\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\017\uffe0\020\uffe0\022\uffe0\023" +
    "\uffe0\024\uffe0\025\uffe0\026\uffe0\042\uffe0\046\uffe0\051\uffe0" +
    "\057\uffe0\001\002\000\004\042\057\001\002\000\004\056" +
    "\054\001\002\000\032\004\024\006\034\007\017\010\031" +
    "\017\026\020\033\022\007\025\011\026\032\042\030\046" +
    "\006\051\010\001\002\000\034\004\024\006\034\007\017" +
    "\010\031\017\026\020\033\022\007\025\011\026\032\042" +
    "\030\046\006\051\010\057\056\001\002\000\042\002\uffe1" +
    "\004\uffe1\006\uffe1\007\uffe1\010\uffe1\017\uffe1\020\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\042\uffe1\046\uffe1" +
    "\051\uffe1\057\uffe1\001\002\000\006\015\uffdf\016\uffdf\001" +
    "\002\000\032\010\076\014\066\030\072\041\067\042\063" +
    "\052\074\053\073\066\070\067\071\070\075\073\077\074" +
    "\062\001\002\000\004\015\211\001\002\000\054\015\uffa7" +
    "\016\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034" +
    "\uffa7\036\uffa7\037\uffa7\040\uffa7\045\uffa7\047\uffa7\050\uffa7" +
    "\054\uffa7\055\uffa7\057\uffa7\060\uffa7\063\uffa7\064\uffa7\065" +
    "\uffa7\001\002\000\060\015\uffa9\016\uffa9\027\uffa9\030\uffa9" +
    "\031\uffa9\032\uffa9\033\uffa9\034\uffa9\036\uffa9\037\uffa9\040" +
    "\uffa9\045\uffa9\047\uffa9\050\uffa9\054\uffa9\055\uffa9\056\176" +
    "\057\uffa9\060\uffa9\063\uffa9\064\uffa9\065\uffa9\071\175\001" +
    "\002\000\054\015\uffa5\016\uffa5\027\uffa5\030\uffa5\031\uffa5" +
    "\032\uffa5\033\uffa5\034\uffa5\036\uffa5\037\uffa5\040\uffa5\045" +
    "\uffa5\047\uffa5\050\uffa5\054\uffa5\055\uffa5\057\uffa5\060\uffa5" +
    "\063\uffa5\064\uffa5\065\uffa5\001\002\000\054\015\uffa6\016" +
    "\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6" +
    "\036\uffa6\037\uffa6\040\uffa6\045\uffa6\047\uffa6\050\uffa6\054" +
    "\uffa6\055\uffa6\057\uffa6\060\uffa6\063\uffa6\064\uffa6\065\uffa6" +
    "\001\002\000\032\010\076\014\066\030\072\041\067\042" +
    "\063\052\074\053\073\066\070\067\071\070\075\073\077" +
    "\074\062\001\002\000\032\010\076\014\066\030\072\041" +
    "\067\042\063\052\074\053\073\066\070\067\071\070\075" +
    "\073\077\074\062\001\002\000\054\015\uffac\016\uffac\027" +
    "\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\036\uffac" +
    "\037\uffac\040\uffac\045\uffac\047\uffac\050\uffac\054\uffac\055" +
    "\uffac\057\uffac\060\uffac\063\uffac\064\uffac\065\uffac\001\002" +
    "\000\054\015\uffaa\016\uffaa\027\uffaa\030\uffaa\031\uffaa\032" +
    "\uffaa\033\uffaa\034\uffaa\036\uffaa\037\uffaa\040\uffaa\045\uffaa" +
    "\047\uffaa\050\uffaa\054\uffaa\055\uffaa\057\uffaa\060\uffaa\063" +
    "\uffaa\064\uffaa\065\uffaa\001\002\000\032\010\076\014\066" +
    "\030\072\041\067\042\063\052\074\053\073\066\070\067" +
    "\071\070\075\073\077\074\062\001\002\000\054\015\uffb2" +
    "\016\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034" +
    "\uffb2\036\uffb2\037\uffb2\040\uffb2\045\uffb2\047\uffb2\050\uffb2" +
    "\054\uffb2\055\uffb2\057\uffb2\060\uffb2\063\uffb2\064\uffb2\065" +
    "\uffb2\001\002\000\054\015\uffb3\016\uffb3\027\uffb3\030\uffb3" +
    "\031\uffb3\032\uffb3\033\uffb3\034\uffb3\036\uffb3\037\uffb3\040" +
    "\uffb3\045\uffb3\047\uffb3\050\uffb3\054\uffb3\055\uffb3\057\uffb3" +
    "\060\uffb3\063\uffb3\064\uffb3\065\uffb3\001\002\000\054\015" +
    "\uffab\016\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab" +
    "\034\uffab\036\uffab\037\uffab\040\uffab\045\uffab\047\uffab\050" +
    "\uffab\054\uffab\055\uffab\057\uffab\060\uffab\063\uffab\064\uffab" +
    "\065\uffab\001\002\000\004\071\137\001\002\000\054\015" +
    "\uffa8\016\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8" +
    "\034\uffa8\036\uffa8\037\uffa8\040\uffa8\045\uffa8\047\uffa8\050" +
    "\uffa8\054\uffa8\055\uffa8\057\uffa8\060\uffa8\063\uffa8\064\uffa8" +
    "\065\uffa8\001\002\000\054\015\uffc2\016\uffc2\027\117\030" +
    "\105\031\116\032\111\033\102\034\113\036\112\037\104" +
    "\040\106\045\107\047\115\050\uffc2\054\120\055\101\057" +
    "\uffc2\060\uffc2\063\110\064\114\065\103\001\002\000\032" +
    "\010\076\014\066\030\072\041\067\042\063\052\074\053" +
    "\073\066\070\067\071\070\075\073\077\074\062\001\002" +
    "\000\032\010\076\014\066\030\072\041\067\042\063\052" +
    "\074\053\073\066\070\067\071\070\075\073\077\074\062" +
    "\001\002\000\032\010\076\014\066\030\072\041\067\042" +
    "\063\052\074\053\073\066\070\067\071\070\075\073\077" +
    "\074\062\001\002\000\032\010\076\014\066\030\072\041" +
    "\067\042\063\052\074\053\073\066\070\067\071\070\075" +
    "\073\077\074\062\001\002\000\032\010\076\014\066\030" +
    "\072\041\067\042\063\052\074\053\073\066\070\067\071" +
    "\070\075\073\077\074\062\001\002\000\032\010\076\014" +
    "\066\030\072\041\067\042\063\052\074\053\073\066\070" +
    "\067\071\070\075\073\077\074\062\001\002\000\054\015" +
    "\uffba\016\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba" +
    "\034\uffba\036\uffba\037\uffba\040\uffba\045\uffba\047\uffba\050" +
    "\uffba\054\uffba\055\uffba\057\uffba\060\uffba\063\uffba\064\uffba" +
    "\065\uffba\001\002\000\054\015\uffbb\016\uffbb\027\uffbb\030" +
    "\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\036\uffbb\037\uffbb" +
    "\040\uffbb\045\uffbb\047\uffbb\050\uffbb\054\uffbb\055\uffbb\057" +
    "\uffbb\060\uffbb\063\uffbb\064\uffbb\065\uffbb\001\002\000\032" +
    "\010\076\014\066\030\072\041\067\042\063\052\074\053" +
    "\073\066\070\067\071\070\075\073\077\074\062\001\002" +
    "\000\032\010\076\014\066\030\072\041\067\042\063\052" +
    "\074\053\073\066\070\067\071\070\075\073\077\074\062" +
    "\001\002\000\032\010\076\014\066\030\072\041\067\042" +
    "\063\052\074\053\073\066\070\067\071\070\075\073\077" +
    "\074\062\001\002\000\032\010\076\014\066\030\072\041" +
    "\067\042\063\052\074\053\073\066\070\067\071\070\075" +
    "\073\077\074\062\001\002\000\032\010\076\014\066\030" +
    "\072\041\067\042\063\052\074\053\073\066\070\067\071" +
    "\070\075\073\077\074\062\001\002\000\032\010\076\014" +
    "\066\030\072\041\067\042\063\052\074\053\073\066\070" +
    "\067\071\070\075\073\077\074\062\001\002\000\032\010" +
    "\076\014\066\030\072\041\067\042\063\052\074\053\073" +
    "\066\070\067\071\070\075\073\077\074\062\001\002\000" +
    "\032\010\076\014\066\030\072\041\067\042\063\052\074" +
    "\053\073\066\070\067\071\070\075\073\077\074\062\001" +
    "\002\000\054\015\uffb5\016\uffb5\027\uffb5\030\uffb5\031\uffb5" +
    "\032\uffb5\033\uffb5\034\uffb5\036\uffb5\037\uffb5\040\uffb5\045" +
    "\uffb5\047\uffb5\050\uffb5\054\uffb5\055\uffb5\057\uffb5\060\uffb5" +
    "\063\uffb5\064\uffb5\065\uffb5\001\002\000\054\015\uffc0\016" +
    "\uffc0\027\uffc0\030\uffc0\031\116\032\111\033\102\034\113" +
    "\036\112\037\104\040\106\045\107\047\115\050\uffc0\054" +
    "\120\055\101\057\uffc0\060\uffc0\063\110\064\114\065\103" +
    "\001\002\000\054\015\uffb9\016\uffb9\027\uffb9\030\uffb9\031" +
    "\uffb9\032\uffb9\033\uffb9\034\uffb9\036\112\037\uffb9\040\uffb9" +
    "\045\107\047\uffb9\050\uffb9\054\120\055\uffb9\057\uffb9\060" +
    "\uffb9\063\110\064\uffb9\065\uffb9\001\002\000\054\015\uffbe" +
    "\016\uffbe\027\uffbe\030\uffbe\031\116\032\111\033\102\034" +
    "\113\036\112\037\104\040\106\045\107\047\uffbe\050\uffbe" +
    "\054\120\055\101\057\uffbe\060\uffbe\063\110\064\114\065" +
    "\uffbe\001\002\000\054\015\uffbc\016\uffbc\027\uffbc\030\uffbc" +
    "\031\116\032\111\033\102\034\113\036\112\037\104\040" +
    "\106\045\107\047\uffbc\050\uffbc\054\120\055\uffbc\057\uffbc" +
    "\060\uffbc\063\110\064\uffbc\065\uffbc\001\002\000\054\015" +
    "\uffb6\016\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6" +
    "\034\uffb6\036\112\037\uffb6\040\uffb6\045\107\047\uffb6\050" +
    "\uffb6\054\120\055\uffb6\057\uffb6\060\uffb6\063\110\064\uffb6" +
    "\065\uffb6\001\002\000\054\015\uffb4\016\uffb4\027\uffb4\030" +
    "\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\036\uffb4\037\uffb4" +
    "\040\uffb4\045\uffb4\047\uffb4\050\uffb4\054\uffb4\055\uffb4\057" +
    "\uffb4\060\uffb4\063\uffb4\064\uffb4\065\uffb4\001\002\000\054" +
    "\015\uffb8\016\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033" +
    "\uffb8\034\uffb8\036\112\037\uffb8\040\uffb8\045\107\047\uffb8" +
    "\050\uffb8\054\120\055\uffb8\057\uffb8\060\uffb8\063\110\064" +
    "\uffb8\065\uffb8\001\002\000\054\015\uffb0\016\uffb0\027\uffb0" +
    "\030\uffb0\031\116\032\111\033\102\034\113\036\112\037" +
    "\uffb0\040\uffb0\045\107\047\uffb0\050\uffb0\054\120\055\uffb0" +
    "\057\uffb0\060\uffb0\063\110\064\uffb0\065\uffb0\001\002\000" +
    "\054\015\uffbf\016\uffbf\027\uffbf\030\uffbf\031\116\032\111" +
    "\033\102\034\113\036\112\037\104\040\106\045\107\047" +
    "\115\050\uffbf\054\120\055\101\057\uffbf\060\uffbf\063\110" +
    "\064\114\065\103\001\002\000\054\015\uffb1\016\uffb1\027" +
    "\uffb1\030\uffb1\031\116\032\111\033\102\034\113\036\112" +
    "\037\uffb1\040\uffb1\045\107\047\uffb1\050\uffb1\054\120\055" +
    "\uffb1\057\uffb1\060\uffb1\063\110\064\uffb1\065\uffb1\001\002" +
    "\000\054\015\uffbd\016\uffbd\027\uffbd\030\uffbd\031\116\032" +
    "\111\033\102\034\113\036\112\037\104\040\106\045\107" +
    "\047\uffbd\050\uffbd\054\120\055\101\057\uffbd\060\uffbd\063" +
    "\110\064\114\065\uffbd\001\002\000\054\015\uffb7\016\uffb7" +
    "\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\036" +
    "\112\037\uffb7\040\uffb7\045\107\047\uffb7\050\uffb7\054\120" +
    "\055\uffb7\057\uffb7\060\uffb7\063\110\064\uffb7\065\uffb7\001" +
    "\002\000\054\015\uffae\016\uffae\027\uffae\030\uffae\031\116" +
    "\032\111\033\102\034\113\036\112\037\104\040\106\045" +
    "\107\047\uffae\050\uffae\054\120\055\uffae\057\uffae\060\uffae" +
    "\063\110\064\uffae\065\uffae\001\002\000\006\011\141\012" +
    "\140\001\002\000\004\014\145\001\002\000\004\014\142" +
    "\001\002\000\032\010\076\014\066\030\072\041\067\042" +
    "\063\052\074\053\073\066\070\067\071\070\075\073\077" +
    "\074\062\001\002\000\004\015\144\001\002\000\054\015" +
    "\uffcd\016\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\036\uffcd\037\uffcd\040\uffcd\045\uffcd\047\uffcd\050" +
    "\uffcd\054\uffcd\055\uffcd\057\uffcd\060\uffcd\063\uffcd\064\uffcd" +
    "\065\uffcd\001\002\000\004\066\146\001\002\000\004\016" +
    "\147\001\002\000\006\006\150\042\151\001\002\000\004" +
    "\014\163\001\002\000\004\014\154\001\002\000\004\015" +
    "\153\001\002\000\054\015\uffcc\016\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\033\uffcc\034\uffcc\036\uffcc\037\uffcc\040" +
    "\uffcc\045\uffcc\047\uffcc\050\uffcc\054\uffcc\055\uffcc\057\uffcc" +
    "\060\uffcc\063\uffcc\064\uffcc\065\uffcc\001\002\000\034\010" +
    "\076\014\066\015\157\030\072\041\067\042\063\052\074" +
    "\053\073\066\070\067\071\070\075\073\077\074\062\001" +
    "\002\000\010\015\uffe2\016\uffe2\057\uffe2\001\002\000\006" +
    "\015\161\016\160\001\002\000\006\015\uffc7\060\uffc7\001" +
    "\002\000\032\010\076\014\066\030\072\041\067\042\063" +
    "\052\074\053\073\066\070\067\071\070\075\073\077\074" +
    "\062\001\002\000\006\015\uffc6\060\uffc6\001\002\000\010" +
    "\015\uffe3\016\uffe3\057\uffe3\001\002\000\004\015\164\001" +
    "\002\000\004\056\165\001\002\000\032\004\024\006\034" +
    "\007\017\010\031\017\026\020\033\022\007\025\011\026" +
    "\032\042\030\046\006\051\010\001\002\000\034\004\024" +
    "\006\034\007\017\010\031\017\026\020\033\022\007\025" +
    "\011\026\032\042\030\046\006\051\010\057\167\001\002" +
    "\000\004\015\170\001\002\000\054\015\uffcb\016\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\036\uffcb" +
    "\037\uffcb\040\uffcb\045\uffcb\047\uffcb\050\uffcb\054\uffcb\055" +
    "\uffcb\057\uffcb\060\uffcb\063\uffcb\064\uffcb\065\uffcb\001\002" +
    "\000\054\015\uffad\016\uffad\027\uffad\030\uffad\031\116\032" +
    "\111\033\102\034\113\036\112\037\104\040\106\045\107" +
    "\047\115\050\uffad\054\120\055\101\057\uffad\060\uffad\063" +
    "\110\064\114\065\103\001\002\000\054\015\uffaf\016\uffaf" +
    "\027\uffaf\030\uffaf\031\116\032\111\033\102\034\113\036" +
    "\112\037\uffaf\040\uffaf\045\107\047\uffaf\050\uffaf\054\120" +
    "\055\uffaf\057\uffaf\060\uffaf\063\110\064\uffaf\065\uffaf\001" +
    "\002\000\044\015\174\027\117\030\105\031\116\032\111" +
    "\033\102\034\113\036\112\037\104\040\106\045\107\047" +
    "\115\054\120\055\101\063\110\064\114\065\103\001\002" +
    "\000\054\015\uffc1\016\uffc1\027\uffc1\030\uffc1\031\uffc1\032" +
    "\uffc1\033\uffc1\034\uffc1\036\uffc1\037\uffc1\040\uffc1\045\uffc1" +
    "\047\uffc1\050\uffc1\054\uffc1\055\uffc1\057\uffc1\060\uffc1\063" +
    "\uffc1\064\uffc1\065\uffc1\001\002\000\010\005\202\012\201" +
    "\072\203\001\002\000\032\010\076\014\066\030\072\041" +
    "\067\042\063\052\074\053\073\066\070\067\071\070\075" +
    "\073\077\074\062\001\002\000\004\057\200\001\002\000" +
    "\054\015\uffc5\016\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5" +
    "\033\uffc5\034\uffc5\036\uffc5\037\uffc5\040\uffc5\045\uffc5\047" +
    "\uffc5\050\uffc5\054\uffc5\055\uffc5\057\uffc5\060\uffc5\063\uffc5" +
    "\064\uffc5\065\uffc5\001\002\000\004\014\204\001\002\000" +
    "\054\015\uffc3\016\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3" +
    "\033\uffc3\034\uffc3\036\uffc3\037\uffc3\040\uffc3\045\uffc3\047" +
    "\uffc3\050\uffc3\054\uffc3\055\uffc3\057\uffc3\060\uffc3\063\uffc3" +
    "\064\uffc3\065\uffc3\001\002\000\054\015\uffc4\016\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\036\uffc4" +
    "\037\uffc4\040\uffc4\045\uffc4\047\uffc4\050\uffc4\054\uffc4\055" +
    "\uffc4\057\uffc4\060\uffc4\063\uffc4\064\uffc4\065\uffc4\001\002" +
    "\000\004\066\205\001\002\000\004\016\206\001\002\000" +
    "\004\042\151\001\002\000\004\015\210\001\002\000\054" +
    "\015\uffca\016\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033" +
    "\uffca\034\uffca\036\uffca\037\uffca\040\uffca\045\uffca\047\uffca" +
    "\050\uffca\054\uffca\055\uffca\057\uffca\060\uffca\063\uffca\064" +
    "\uffca\065\uffca\001\002\000\004\056\212\001\002\000\032" +
    "\004\024\006\034\007\017\010\031\017\026\020\033\022" +
    "\007\025\011\026\032\042\030\046\006\051\010\001\002" +
    "\000\034\004\024\006\034\007\017\010\031\017\026\020" +
    "\033\022\007\025\011\026\032\042\030\046\006\051\010" +
    "\057\214\001\002\000\044\002\uffdc\004\uffdc\006\uffdc\007" +
    "\uffdc\010\uffdc\017\uffdc\020\uffdc\021\215\022\uffdc\023\uffdc" +
    "\024\uffdc\025\uffdc\026\uffdc\042\uffdc\046\uffdc\051\uffdc\057" +
    "\uffdc\001\002\000\004\056\217\001\002\000\042\002\uffdb" +
    "\004\uffdb\006\uffdb\007\uffdb\010\uffdb\017\uffdb\020\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\042\uffdb\046\uffdb" +
    "\051\uffdb\057\uffdb\001\002\000\032\004\024\006\034\007" +
    "\017\010\031\017\026\020\033\022\007\025\011\026\032" +
    "\042\030\046\006\051\010\001\002\000\034\004\024\006" +
    "\034\007\017\010\031\017\026\020\033\022\007\025\011" +
    "\026\032\042\030\046\006\051\010\057\221\001\002\000" +
    "\042\002\uffda\004\uffda\006\uffda\007\uffda\010\uffda\017\uffda" +
    "\020\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\042" +
    "\uffda\046\uffda\051\uffda\057\uffda\001\002\000\042\002\ufff0" +
    "\004\ufff0\006\ufff0\007\ufff0\010\ufff0\017\ufff0\020\ufff0\022" +
    "\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\042\ufff0\046\ufff0" +
    "\051\ufff0\057\ufff0\001\002\000\006\011\224\012\140\001" +
    "\002\000\004\014\225\001\002\000\032\010\076\014\066" +
    "\030\072\041\067\042\063\052\074\053\073\066\070\067" +
    "\071\070\075\073\077\074\062\001\002\000\004\015\227" +
    "\001\002\000\006\060\uffcd\071\230\001\002\000\004\013" +
    "\231\001\002\000\004\014\232\001\002\000\004\066\233" +
    "\001\002\000\004\016\234\001\002\000\032\010\076\014" +
    "\066\030\072\041\067\042\063\052\074\053\073\066\070" +
    "\067\071\070\075\073\077\074\062\001\002\000\004\015" +
    "\236\001\002\000\004\060\237\001\002\000\042\002\uffc9" +
    "\004\uffc9\006\uffc9\007\uffc9\010\uffc9\017\uffc9\020\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\042\uffc9\046\uffc9" +
    "\051\uffc9\057\uffc9\001\002\000\006\012\201\013\255\001" +
    "\002\000\032\010\076\014\066\030\072\041\067\042\063" +
    "\052\074\053\073\066\070\067\071\070\075\073\077\074" +
    "\062\001\002\000\034\010\076\014\066\030\072\041\067" +
    "\042\063\052\074\053\073\056\246\066\070\067\071\070" +
    "\075\073\077\074\062\001\002\000\004\060\244\001\002" +
    "\000\042\002\uffe7\004\uffe7\006\uffe7\007\uffe7\010\uffe7\017" +
    "\uffe7\020\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\042\uffe7\046\uffe7\051\uffe7\057\uffe7\001\002\000\004\060" +
    "\uffe5\001\002\000\032\010\076\014\066\030\072\041\067" +
    "\042\063\052\074\053\073\066\070\067\071\070\075\073" +
    "\077\074\062\001\002\000\006\016\160\057\250\001\002" +
    "\000\004\060\uffe4\001\002\000\004\057\252\001\002\000" +
    "\004\050\242\001\002\000\004\060\254\001\002\000\042" +
    "\002\uffe6\004\uffe6\006\uffe6\007\uffe6\010\uffe6\017\uffe6\020" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\042\uffe6" +
    "\046\uffe6\051\uffe6\057\uffe6\001\002\000\004\014\256\001" +
    "\002\000\004\066\257\001\002\000\004\016\260\001\002" +
    "\000\032\010\076\014\066\030\072\041\067\042\063\052" +
    "\074\053\073\066\070\067\071\070\075\073\077\074\062" +
    "\001\002\000\004\015\262\001\002\000\004\060\263\001" +
    "\002\000\042\002\uffc8\004\uffc8\006\uffc8\007\uffc8\010\uffc8" +
    "\017\uffc8\020\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026" +
    "\uffc8\042\uffc8\046\uffc8\051\uffc8\057\uffc8\001\002\000\004" +
    "\060\266\001\002\000\042\002\uffef\004\uffef\006\uffef\007" +
    "\uffef\010\uffef\017\uffef\020\uffef\022\uffef\023\uffef\024\uffef" +
    "\025\uffef\026\uffef\042\uffef\046\uffef\051\uffef\057\uffef\001" +
    "\002\000\042\002\uffee\004\uffee\006\uffee\007\uffee\010\uffee" +
    "\017\uffee\020\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026" +
    "\uffee\042\uffee\046\uffee\051\uffee\057\uffee\001\002\000\010" +
    "\016\277\050\242\060\300\001\002\000\012\016\uffea\050" +
    "\uffea\056\271\060\uffea\001\002\000\032\010\076\014\066" +
    "\030\072\041\067\042\063\052\074\053\073\066\070\067" +
    "\071\070\075\073\077\074\062\001\002\000\004\057\273" +
    "\001\002\000\006\050\242\060\274\001\002\000\042\002" +
    "\uffe9\004\uffe9\006\uffe9\007\uffe9\010\uffe9\017\uffe9\020\uffe9" +
    "\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\042\uffe9\046" +
    "\uffe9\051\uffe9\057\uffe9\001\002\000\004\060\276\001\002" +
    "\000\042\002\uffe8\004\uffe8\006\uffe8\007\uffe8\010\uffe8\017" +
    "\uffe8\020\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\042\uffe8\046\uffe8\051\uffe8\057\uffe8\001\002\000\004\042" +
    "\303\001\002\000\066\002\uffed\004\uffed\006\uffed\007\uffed" +
    "\010\uffed\014\uffed\017\uffed\020\uffed\022\uffed\023\uffed\024" +
    "\uffed\025\uffed\026\uffed\030\uffed\041\uffed\042\uffed\046\uffed" +
    "\051\uffed\052\uffed\053\uffed\057\uffed\066\uffed\067\uffed\070" +
    "\uffed\073\uffed\074\uffed\001\002\000\004\060\302\001\002" +
    "\000\066\002\uffec\004\uffec\006\uffec\007\uffec\010\uffec\014" +
    "\uffec\017\uffec\020\uffec\022\uffec\023\uffec\024\uffec\025\uffec" +
    "\026\uffec\030\uffec\041\uffec\042\uffec\046\uffec\051\uffec\052" +
    "\uffec\053\uffec\057\uffec\066\uffec\067\uffec\070\uffec\073\uffec" +
    "\074\uffec\001\002\000\010\016\uffeb\050\uffeb\060\uffeb\001" +
    "\002\000\042\002\ufff2\004\ufff2\006\ufff2\007\ufff2\010\ufff2" +
    "\017\ufff2\020\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026" +
    "\ufff2\042\ufff2\046\ufff2\051\ufff2\057\ufff2\001\002\000\032" +
    "\010\076\014\066\030\072\041\067\042\063\052\074\053" +
    "\073\066\070\067\071\070\075\073\077\074\062\001\002" +
    "\000\004\015\307\001\002\000\004\060\310\001\002\000" +
    "\042\002\uffce\004\uffce\006\uffce\007\uffce\010\uffce\017\uffce" +
    "\020\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\042" +
    "\uffce\046\uffce\051\uffce\057\uffce\001\002\000\032\010\076" +
    "\014\066\030\072\041\067\042\063\052\074\053\073\066" +
    "\070\067\071\070\075\073\077\074\062\001\002\000\004" +
    "\015\313\001\002\000\004\056\314\001\002\000\032\004" +
    "\024\006\034\007\017\010\031\017\026\020\033\022\007" +
    "\025\011\026\032\042\030\046\006\051\010\001\002\000" +
    "\034\004\024\006\034\007\017\010\031\017\026\020\033" +
    "\022\007\025\011\026\032\042\030\046\006\051\010\057" +
    "\316\001\002\000\042\002\uffcf\004\uffcf\006\uffcf\007\uffcf" +
    "\010\uffcf\017\uffcf\020\uffcf\022\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\042\uffcf\046\uffcf\051\uffcf\057\uffcf\001\002" +
    "\000\032\010\076\014\066\030\072\041\067\042\063\052" +
    "\074\053\073\066\070\067\071\070\075\073\077\074\062" +
    "\001\002\000\004\015\321\001\002\000\004\060\322\001" +
    "\002\000\042\002\uffdd\004\uffdd\006\uffdd\007\uffdd\010\uffdd" +
    "\017\uffdd\020\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\042\uffdd\046\uffdd\051\uffdd\057\uffdd\001\002\000\032" +
    "\010\076\014\066\030\072\041\067\042\063\052\074\053" +
    "\073\066\070\067\071\070\075\073\077\074\062\001\002" +
    "\000\004\015\325\001\002\000\004\056\326\001\002\000" +
    "\006\023\330\024\331\001\002\000\004\057\347\001\002" +
    "\000\032\010\076\014\066\030\072\041\067\042\063\052" +
    "\074\053\073\066\070\067\071\070\075\073\077\074\062" +
    "\001\002\000\004\050\342\001\002\000\010\023\335\024" +
    "\331\057\333\001\002\000\042\002\uffd9\004\uffd9\006\uffd9" +
    "\007\uffd9\010\uffd9\017\uffd9\020\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\025\uffd9\026\uffd9\042\uffd9\046\uffd9\051\uffd9\057\uffd9" +
    "\001\002\000\004\057\341\001\002\000\032\010\076\014" +
    "\066\030\072\041\067\042\063\052\074\053\073\066\070" +
    "\067\071\070\075\073\077\074\062\001\002\000\004\050" +
    "\337\001\002\000\032\004\024\006\034\007\017\010\031" +
    "\017\026\020\033\022\007\025\011\026\032\042\030\046" +
    "\006\051\010\001\002\000\040\004\024\006\034\007\017" +
    "\010\031\017\026\020\033\022\007\023\uffd6\024\uffd6\025" +
    "\011\026\032\042\030\046\006\051\010\057\uffd6\001\002" +
    "\000\042\002\uffd8\004\uffd8\006\uffd8\007\uffd8\010\uffd8\017" +
    "\uffd8\020\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8" +
    "\042\uffd8\046\uffd8\051\uffd8\057\uffd8\001\002\000\032\004" +
    "\024\006\034\007\017\010\031\017\026\020\033\022\007" +
    "\025\011\026\032\042\030\046\006\051\010\001\002\000" +
    "\034\004\024\006\034\007\017\010\031\017\026\020\033" +
    "\022\007\025\011\026\032\042\030\046\006\051\010\057" +
    "\uffd4\001\002\000\004\050\345\001\002\000\032\004\024" +
    "\006\034\007\017\010\031\017\026\020\033\022\007\025" +
    "\011\026\032\042\030\046\006\051\010\001\002\000\040" +
    "\004\024\006\034\007\017\010\031\017\026\020\033\022" +
    "\007\023\uffd5\024\uffd5\025\011\026\032\042\030\046\006" +
    "\051\010\057\uffd5\001\002\000\042\002\uffd7\004\uffd7\006" +
    "\uffd7\007\uffd7\010\uffd7\017\uffd7\020\uffd7\022\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\042\uffd7\046\uffd7\051\uffd7\057" +
    "\uffd7\001\002\000\006\004\351\042\352\001\002\000\004" +
    "\042\376\001\002\000\004\050\242\001\002\000\032\010" +
    "\076\014\066\030\072\041\067\042\063\052\074\053\073" +
    "\066\070\067\071\070\075\073\077\074\062\001\002\000" +
    "\004\060\355\001\002\000\006\045\357\063\356\001\002" +
    "\000\004\015\uffd1\001\002\000\004\015\uffd0\001\002\000" +
    "\004\015\361\001\002\000\004\056\362\001\002\000\032" +
    "\004\024\006\034\007\017\010\031\017\026\020\033\022" +
    "\007\025\011\026\032\042\030\046\006\051\010\001\002" +
    "\000\034\004\024\006\034\007\017\010\031\017\026\020" +
    "\033\022\007\025\011\026\032\042\030\046\006\051\010" +
    "\057\364\001\002\000\042\002\uffd3\004\uffd3\006\uffd3\007" +
    "\uffd3\010\uffd3\017\uffd3\020\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\042\uffd3\046\uffd3\051\uffd3\057\uffd3\001" +
    "\002\000\004\060\366\001\002\000\032\010\076\014\066" +
    "\030\072\041\067\042\063\052\074\053\073\066\070\067" +
    "\071\070\075\073\077\074\062\001\002\000\004\060\370" +
    "\001\002\000\006\045\357\063\356\001\002\000\004\015" +
    "\372\001\002\000\004\056\373\001\002\000\032\004\024" +
    "\006\034\007\017\010\031\017\026\020\033\022\007\025" +
    "\011\026\032\042\030\046\006\051\010\001\002\000\034" +
    "\004\024\006\034\007\017\010\031\017\026\020\033\022" +
    "\007\025\011\026\032\042\030\046\006\051\010\057\375" +
    "\001\002\000\042\002\uffd2\004\uffd2\006\uffd2\007\uffd2\010" +
    "\uffd2\017\uffd2\020\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\042\uffd2\046\uffd2\051\uffd2\057\uffd2\001\002\000" +
    "\010\016\uffea\050\uffea\060\uffea\001\002\000\042\002\ufff3" +
    "\004\ufff3\006\ufff3\007\ufff3\010\ufff3\017\ufff3\020\ufff3\022" +
    "\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\042\ufff3\046\ufff3" +
    "\051\ufff3\057\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\375\000\042\002\034\004\035\005\003\006\014\010" +
    "\017\011\012\016\011\017\022\020\004\021\020\022\013" +
    "\026\015\027\036\030\021\031\026\033\024\001\001\000" +
    "\002\001\001\000\036\004\035\005\003\006\014\010\017" +
    "\011\012\016\011\017\022\021\047\022\013\026\015\027" +
    "\036\030\021\031\026\033\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\266\001\001\000\002\001\001\000\012\013" +
    "\263\024\077\030\064\032\063\001\001\000\002\001\001" +
    "\000\004\025\242\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\004\035\005" +
    "\003\006\014\010\017\011\012\016\011\017\022\020\046" +
    "\021\020\022\013\026\015\027\036\030\021\031\026\033" +
    "\024\001\001\000\036\004\035\005\003\006\014\010\017" +
    "\011\012\016\011\017\022\021\047\022\013\026\015\027" +
    "\036\030\021\031\026\033\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\004\035\005\003\006\014\010\017\011\012\016\011" +
    "\017\022\020\054\021\020\022\013\026\015\027\036\030" +
    "\021\031\026\033\024\001\001\000\036\004\035\005\003" +
    "\006\014\010\017\011\012\016\011\017\022\021\047\022" +
    "\013\026\015\027\036\030\021\031\026\033\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\060\024" +
    "\077\030\064\032\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\172\030\064\032\063\001\001\000\010" +
    "\024\171\030\064\032\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\024\170\030\064\032\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\024\135\030\064\032\063\001\001\000\010\024\134\030" +
    "\064\032\063\001\001\000\010\024\133\030\064\032\063" +
    "\001\001\000\010\024\132\030\064\032\063\001\001\000" +
    "\010\024\131\030\064\032\063\001\001\000\010\024\130" +
    "\030\064\032\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\127\030\064\032\063\001\001\000\010" +
    "\024\126\030\064\032\063\001\001\000\010\024\125\030" +
    "\064\032\063\001\001\000\010\024\124\030\064\032\063" +
    "\001\001\000\010\024\123\030\064\032\063\001\001\000" +
    "\010\024\122\030\064\032\063\001\001\000\010\024\121" +
    "\030\064\032\063\001\001\000\010\024\120\030\064\032" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\142\024\077\030" +
    "\064\032\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\013\154\015\155\024\077\030" +
    "\064\032\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\161\024\077\030\064\032" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\004\035\005\003\006" +
    "\014\010\017\011\012\016\011\017\022\020\165\021\020" +
    "\022\013\026\015\027\036\030\021\031\026\033\024\001" +
    "\001\000\036\004\035\005\003\006\014\010\017\011\012" +
    "\016\011\017\022\021\047\022\013\026\015\027\036\030" +
    "\021\031\026\033\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\176" +
    "\024\077\030\064\032\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\004\035\005\003\006\014\010\017\011" +
    "\012\016\011\017\022\020\212\021\020\022\013\026\015" +
    "\027\036\030\021\031\026\033\024\001\001\000\036\004" +
    "\035\005\003\006\014\010\017\011\012\016\011\017\022" +
    "\021\047\022\013\026\015\027\036\030\021\031\026\033" +
    "\024\001\001\000\004\007\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\035\005\003\006\014\010" +
    "\017\011\012\016\011\017\022\020\217\021\020\022\013" +
    "\026\015\027\036\030\021\031\026\033\024\001\001\000" +
    "\036\004\035\005\003\006\014\010\017\011\012\016\011" +
    "\017\022\021\047\022\013\026\015\027\036\030\021\031" +
    "\026\033\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\225\024" +
    "\077\030\064\032\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\234\024\077\030\064" +
    "\032\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\250\024\077" +
    "\030\064\032\063\001\001\000\012\013\244\024\077\030" +
    "\064\032\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\013\154\015\246\024\077\030" +
    "\064\032\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\252\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\260\024\077\030\064\032" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\300\001\001\000\002\001\001\000\012" +
    "\013\271\024\077\030\064\032\063\001\001\000\002\001" +
    "\001\000\004\025\274\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\305\024\077\030\064\032" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\013\311\024\077\030\064\032\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\035" +
    "\005\003\006\014\010\017\011\012\016\011\017\022\020" +
    "\314\021\020\022\013\026\015\027\036\030\021\031\026" +
    "\033\024\001\001\000\036\004\035\005\003\006\014\010" +
    "\017\011\012\016\011\017\022\021\047\022\013\026\015" +
    "\027\036\030\021\031\026\033\024\001\001\000\002\001" +
    "\001\000\012\013\317\024\077\030\064\032\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\323\024\077\030\064\032\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\331\023\326\001" +
    "\001\000\002\001\001\000\012\013\343\024\077\030\064" +
    "\032\063\001\001\000\002\001\001\000\004\023\333\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\335" +
    "\024\077\030\064\032\063\001\001\000\002\001\001\000" +
    "\040\004\035\005\003\006\014\010\017\011\012\016\011" +
    "\017\022\020\337\021\020\022\013\026\015\027\036\030" +
    "\021\031\026\033\024\001\001\000\036\004\035\005\003" +
    "\006\014\010\017\011\012\016\011\017\022\021\047\022" +
    "\013\026\015\027\036\030\021\031\026\033\024\001\001" +
    "\000\002\001\001\000\040\004\035\005\003\006\014\010" +
    "\017\011\012\016\011\017\022\020\342\021\020\022\013" +
    "\026\015\027\036\030\021\031\026\033\024\001\001\000" +
    "\036\004\035\005\003\006\014\010\017\011\012\016\011" +
    "\017\022\021\047\022\013\026\015\027\036\030\021\031" +
    "\026\033\024\001\001\000\002\001\001\000\040\004\035" +
    "\005\003\006\014\010\017\011\012\016\011\017\022\020" +
    "\345\021\020\022\013\026\015\027\036\030\021\031\026" +
    "\033\024\001\001\000\036\004\035\005\003\006\014\010" +
    "\017\011\012\016\011\017\022\021\047\022\013\026\015" +
    "\027\036\030\021\031\026\033\024\001\001\000\002\001" +
    "\001\000\004\022\352\001\001\000\004\035\266\001\001" +
    "\000\004\025\364\001\001\000\012\013\353\024\077\030" +
    "\064\032\063\001\001\000\002\001\001\000\004\034\357" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\004\035\005\003\006\014" +
    "\010\017\011\012\016\011\017\022\020\362\021\020\022" +
    "\013\026\015\027\036\030\021\031\026\033\024\001\001" +
    "\000\036\004\035\005\003\006\014\010\017\011\012\016" +
    "\011\017\022\021\047\022\013\026\015\027\036\030\021" +
    "\031\026\033\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\366\024\077\030\064\032\063\001\001" +
    "\000\002\001\001\000\004\034\370\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\004\035\005\003\006\014" +
    "\010\017\011\012\016\011\017\022\020\373\021\020\022" +
    "\013\026\015\027\036\030\021\031\026\033\024\001\001" +
    "\000\036\004\035\005\003\006\014\010\017\011\012\016" +
    "\011\017\022\021\047\022\013\026\015\027\036\030\021" +
    "\031\026\033\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoCJS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoCJS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoCJS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }


// METODOS Y VARIABLES GLOBALES DEL PARSER, PUEDEN SER PUBLICAS O PRIVADAS

public void syntax_error(Symbol s){
/**Metodo al que se llama automaticamente ante algun error sintactico.*/
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
int linea = s.right+1; int columna = s.left; 
String texto = "Identificador " +s.value + " no reconocido.";

}            
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
/**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
        System.out.println("Error Sintactico no recuperable en la Linea " + (s.right+1)+ " Columna "+s.left+". Identificador " + s.value + " no reconocido.");
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoCJS$actions {



  private final SintacticoCJS parser;

  /** Constructor */
  CUP$SintacticoCJS$actions(SintacticoCJS parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoCJS$do_action_part00000000(
    int                        CUP$SintacticoCJS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoCJS$parser,
    java.util.Stack            CUP$SintacticoCJS$stack,
    int                        CUP$SintacticoCJS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoCJS$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoCJS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter start_val = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoCJS$parser.done_parsing();
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCION 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    cjs.NODO = i.nodo;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCION ::= INSTRUCCION OPCION 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoCJS INSTRUCCION = new NodoCJS("INSTRUCCION");
    INSTRUCCION.insertar(i.nodo); INSTRUCCION.insertar(n.nodo);
    RESULT.nodo = INSTRUCCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",14, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCION ::= OPCION 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS INSTRUCCION = new NodoCJS("INSTRUCCION");
    RESULT = new Caracter();
    INSTRUCCION.insertar(n.nodo); 
    RESULT.nodo = INSTRUCCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",14, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OPCION ::= SWITCH 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OPCION ::= CICLO 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OPCION ::= IF 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OPCION ::= VARIABLE 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OPCION ::= VECTOR 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OPCION ::= FUNCION 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // OPCION ::= ASIGNACION 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // OPCION ::= PARA 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OPCION ::= IMPRIMIR 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // OPCION ::= MENSAJE 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS OPCION = new NodoCJS("MENSAJE");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OPCION ::= LLAMADA puntoComa 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OPCION ::= DOCUMENTO puntoComa 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OPCION ::= SET 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(n.nodo);
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OPCION ::= detener puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(new NodoCJS("detener",iright,ileft)); OPCION.insertar(new NodoCJS(";"));
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OPCION ::= retornar puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(new NodoCJS("retornar",iright,ileft)); OPCION.insertar(new NodoCJS(";"));
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OPCION ::= retornar OP puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
    NodoCJS OPCION = new NodoCJS("OPCION");
    RESULT = new Caracter();
    OPCION.insertar(new NodoCJS("retornar",iright,ileft)); OPCION.insertar(n.nodo); OPCION.insertar(new NodoCJS(";"));
    RESULT.nodo = OPCION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPCION",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VARIABLE ::= dimv MasVARIABLE puntoComa 
            {
              Caracter RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		//2
    NodoCJS V = new NodoCJS("VARIABLE");
    RESULT = new Caracter();
    V.insertar(new NodoCJS("dimv",dright,dleft)); V.insertar(i.nodo); 
    RESULT.nodo = V;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("VARIABLE",16, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VARIABLE ::= dimv MasVARIABLE ASIGNAR puntoComa 
            {
              Caracter RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		 //4
    NodoCJS V = new NodoCJS("VARIABLE");
    RESULT = new Caracter();
    V.insertar(new NodoCJS("dimv",dright,dleft)); V.insertar(i.nodo); V.insertar(a.nodo);  
    RESULT.nodo = V;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("VARIABLE",16, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MasVARIABLE ::= MasVARIABLE coma id 
            {
              Caracter RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 //3
    NodoCJS MasVARIABLE = new NodoCJS("MasVARIABLE");
    RESULT = new Caracter();
    MasVARIABLE.insertar(m.nodo);  MasVARIABLE.insertar(new NodoCJS(",")); MasVARIABLE.insertar(new NodoCJS(i,iright,ileft));
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("MasVARIABLE",27, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MasVARIABLE ::= id 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 //1
    NodoCJS MasVARIABLE = new NodoCJS("MasVARIABLE");
    RESULT = new Caracter();
    MasVARIABLE.insertar(new NodoCJS(i,iright,ileft));
    RESULT.nodo = MasVARIABLE;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("MasVARIABLE",27, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VECTOR ::= dimv id llaveA OP llaveC puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		//3
    NodoCJS V = new NodoCJS("VECTOR");
    RESULT = new Caracter();
    V.insertar(new NodoCJS("dimv")); V.insertar(new NodoCJS(i,iright,ileft)); V.insertar(n.nodo); V.insertar(new NodoCJS(";")); 
    RESULT.nodo = V;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("VECTOR",25, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VECTOR ::= dimv id llaveA OP llaveC ASIGNAR puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		 //4
    NodoCJS V = new NodoCJS("VECTOR");
    RESULT = new Caracter();
    V.insertar(new NodoCJS("dimv")); V.insertar(new NodoCJS(i,iright,ileft)); V.insertar(n.nodo); V.insertar(a.nodo);  V.insertar(new NodoCJS(";")); 
    RESULT.nodo = V;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("VECTOR",25, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ASIGNACION ::= id ASIGNAR puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		 //3
    NodoCJS ASIGNACION = new NodoCJS("ASIGNACION");
    RESULT = new Caracter();
    ASIGNACION.insertar(new NodoCJS(i,iright,ileft));  ASIGNACION.insertar(a.nodo); ASIGNACION.insertar(new NodoCJS(";")); 
    RESULT.nodo = ASIGNACION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ASIGNACION",13, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASIGNACION ::= id llaveA OP llaveC ASIGNAR puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		 //2 (?)
    NodoCJS ASIGNACION = new NodoCJS("ASIGNACION");
    RESULT = new Caracter();
    ASIGNACION.insertar(new NodoCJS(i,iright,ileft));  ASIGNACION.insertar(n.nodo); ASIGNACION.insertar(a.nodo); ASIGNACION.insertar(new NodoCJS(";")); 
    RESULT.nodo = ASIGNACION;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ASIGNACION",13, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASIGNAR ::= dosPuntos OP 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS ASIGNAR = new NodoCJS("ASIGNAR");
    RESULT = new Caracter();
    ASIGNAR.insertar(new NodoCJS(":"));  ASIGNAR.insertar(n.nodo);
    RESULT.nodo = ASIGNAR;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ASIGNAR",19, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASIGNAR ::= dosPuntos llaveA VALORES llaveC 
            {
              Caracter RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		//1
    NodoCJS ASIGNAR = new NodoCJS("ASIGNAR");
    RESULT = new Caracter();
    ASIGNAR.insertar(new NodoCJS(":"));  ASIGNAR.insertar(new NodoCJS("{")); ASIGNAR.insertar(v.nodo);  ASIGNAR.insertar(new NodoCJS("}")); 
    RESULT.nodo = ASIGNAR;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ASIGNAR",19, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VALORES ::= VALORES coma OP 
            {
              Caracter RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter v = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS VALORES = new NodoCJS("VALORES");
    RESULT = new Caracter();
    VALORES.insertar(v.nodo); VALORES.insertar(new NodoCJS(",")); VALORES.insertar(n.nodo); 
    RESULT.nodo = VALORES;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("VALORES",11, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VALORES ::= OP 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS VALORES = new NodoCJS("VALORES");
    RESULT = new Caracter();
    VALORES.insertar(n.nodo); 
    RESULT.nodo = VALORES;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("VALORES",11, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNCION ::= funcion id parentesisA PARAMETROS parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Caracter p = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		 //8
    NodoCJS E = new NodoCJS("FUNCION");
    RESULT = new Caracter();
    E.insertar(new NodoCJS("funcion")); E.insertar(new NodoCJS(i,iright,ileft)); E.insertar(new NodoCJS("(")); E.insertar(p.nodo); E.insertar(new NodoCJS(")"));
    E.insertar(new NodoCJS("{")); E.insertar(n.nodo); E.insertar(new NodoCJS("}"));
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("FUNCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNCION ::= funcion id parentesisA parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		//7
    NodoCJS E = new NodoCJS("FUNCION");
    RESULT = new Caracter();
    E.insertar(new NodoCJS("funcion")); E.insertar(new NodoCJS(i,iright,ileft)); E.insertar(new NodoCJS("(")); E.insertar(new NodoCJS(")"));
    E.insertar(new NodoCJS("{")); E.insertar(n.nodo); E.insertar(new NodoCJS("}"));
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("FUNCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAMETROS ::= PARAMETROS coma id 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		  //3
    NodoCJS PARAMETROS = new NodoCJS("PARAMETROS");
    RESULT = new Caracter();
    PARAMETROS.insertar(n.nodo); PARAMETROS.insertar(new NodoCJS(i,iright,ileft)); 
    RESULT.nodo = PARAMETROS;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("PARAMETROS",8, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAMETROS ::= id 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 //2
    NodoCJS PARAMETROS = new NodoCJS("PARAMETROS");
    RESULT = new Caracter();
    PARAMETROS.insertar(new NodoCJS(i,iright,ileft)); 
    RESULT.nodo = PARAMETROS;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("PARAMETROS",8, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IMPRIMIR ::= imprimir parentesisA OP parentesisC puntoComa 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		
    NodoCJS IMPRIMIR = new NodoCJS("IMPRIMIR");
    RESULT = new Caracter();
    IMPRIMIR.insertar(new NodoCJS("imprimir")); IMPRIMIR.insertar(new NodoCJS("(")); IMPRIMIR.insertar(n.nodo);
    IMPRIMIR.insertar(new NodoCJS(")")); IMPRIMIR.insertar(new NodoCJS(";")); 
    RESULT.nodo = IMPRIMIR;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",12, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IF ::= si parentesisA OP parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		//7
    NodoCJS IF = new NodoCJS("IF");
    RESULT = new Caracter();
    IF.insertar(new NodoCJS("if")); IF.insertar(new NodoCJS("(")); IF.insertar(n.nodo); IF.insertar(new NodoCJS(")")); IF.insertar(new NodoCJS("{")); 
    IF.insertar(i.nodo); IF.insertar(new NodoCJS("}")); 
    RESULT.nodo = IF;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IF ::= si parentesisA OP parentesisC llaveA INSTRUCCION llaveC ELSE 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter l = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		//8
    NodoCJS IF = new NodoCJS("IF");
    RESULT = new Caracter();
    IF.insertar(new NodoCJS("si")); IF.insertar(new NodoCJS("(")); IF.insertar(n.nodo); IF.insertar(new NodoCJS(")")); IF.insertar(new NodoCJS("{")); 
    IF.insertar((i.nodo)); IF.insertar(new NodoCJS("}"));IF.insertar(l.nodo); 
    RESULT.nodo = IF;    

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ELSE ::= sino llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		 //4
    NodoCJS ELSE = new NodoCJS("ELSE");
    RESULT = new Caracter();
    ELSE.insertar(new NodoCJS("sino")); ELSE.insertar(new NodoCJS("{")); ELSE.insertar((i.nodo)); ELSE.insertar(new NodoCJS("}")); 
    RESULT.nodo = ELSE;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ELSE",5, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SWITCH ::= selecciona parentesisA OP parentesisC llaveA CASO llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter c = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		//7
    NodoCJS SWITCH = new NodoCJS("SWITCH");
    RESULT = new Caracter();
    SWITCH.insertar(new NodoCJS("Selecciona")); SWITCH.insertar(new NodoCJS("(")); SWITCH.insertar(n.nodo); SWITCH.insertar(new NodoCJS(")")); SWITCH.insertar(new NodoCJS("{"));
    SWITCH.insertar(c.nodo); SWITCH.insertar(new NodoCJS("}"));
    RESULT.nodo = SWITCH;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SWITCH",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SWITCH ::= selecciona parentesisA OP parentesisC llaveA CASO DEFECTO llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter c = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter d = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		//8
    NodoCJS SWITCH = new NodoCJS("SWITCH");
    RESULT = new Caracter();
    SWITCH.insertar(new NodoCJS("Selecciona")); SWITCH.insertar(new NodoCJS("(")); SWITCH.insertar(n.nodo); SWITCH.insertar(new NodoCJS(")")); SWITCH.insertar(new NodoCJS("{"));
    SWITCH.insertar(c.nodo); SWITCH.insertar(d.nodo); SWITCH.insertar(new NodoCJS("}"));
    RESULT.nodo = SWITCH;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SWITCH",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SWITCH ::= selecciona parentesisA OP parentesisC llaveA DEFECTO llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter d = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		//7
    NodoCJS SWITCH = new NodoCJS("SWITCH");
    RESULT = new Caracter();
    SWITCH.insertar(new NodoCJS("Selecciona")); SWITCH.insertar(new NodoCJS("(")); SWITCH.insertar(n.nodo); SWITCH.insertar(new NodoCJS(")")); SWITCH.insertar(new NodoCJS("{"));
    SWITCH.insertar(d.nodo); SWITCH.insertar(new NodoCJS("}"));
    RESULT.nodo = SWITCH;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SWITCH",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CASO ::= CASO caso OP dosPuntos INSTRUCCION 
            {
              Caracter RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Caracter c = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS CASO = new NodoCJS("CASO");
    RESULT = new Caracter();
    CASO.insertar(c.nodo); CASO.insertar(new NodoCJS("case")); CASO.insertar(n.nodo); CASO.insertar(new NodoCJS(":")); CASO.insertar(i.nodo);
    RESULT.nodo = CASO;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("CASO",10, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CASO ::= caso OP dosPuntos INSTRUCCION 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS CASO = new NodoCJS("CASO");
    RESULT = new Caracter();
    CASO.insertar(new NodoCJS("case")); CASO.insertar(n.nodo); CASO.insertar(new NodoCJS(":")); CASO.insertar(i.nodo);
    RESULT.nodo = CASO;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("CASO",10, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DEFECTO ::= defecto dosPuntos INSTRUCCION 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS DEFECTO = new NodoCJS("DEFECTO");
    RESULT = new Caracter();
    DEFECTO.insertar(new NodoCJS("default")); DEFECTO.insertar(new NodoCJS(":")); DEFECTO.insertar(i.nodo);
    RESULT.nodo = DEFECTO;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("DEFECTO",17, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PARA ::= para parentesisA VARIABLE OP puntoComa OPERADOR parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).right;
		Caracter n1 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Caracter n2 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		  //10
    NodoCJS PARA = new NodoCJS("PARA");
    RESULT = new Caracter();
    PARA.insertar(new NodoCJS("Para")); PARA.insertar(new NodoCJS("(")); PARA.insertar(a.nodo);  PARA.insertar(n1.nodo); PARA.insertar(new NodoCJS(";"));//5
    PARA.insertar(n2.nodo); PARA.insertar(new NodoCJS(")")); PARA.insertar(new NodoCJS("{"));  PARA.insertar(i.nodo);  PARA.insertar(new NodoCJS("}"));
    RESULT.nodo = PARA;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("PARA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PARA ::= para parentesisA id ASIGNAR puntoComa OP puntoComa OPERADOR parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-9)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-9)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).right;
		Caracter n1 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Caracter n2 = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		  //12
    NodoCJS PARA = new NodoCJS("PARA");
    RESULT = new Caracter();
    PARA.insertar(new NodoCJS("Para")); PARA.insertar(new NodoCJS("("));  PARA.insertar(new NodoCJS(d));  PARA.insertar(a.nodo);PARA.insertar(new NodoCJS(";")); PARA.insertar(n1.nodo);  PARA.insertar(new NodoCJS(";"));
    PARA.insertar(n2.nodo); PARA.insertar(new NodoCJS(")")); PARA.insertar(new NodoCJS("{"));  PARA.insertar(i.nodo);  PARA.insertar(new NodoCJS("}"));
    RESULT.nodo = PARA;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("PARA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-11)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERADOR ::= aumentar 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS OPERADOR = new NodoCJS("OPERADOR");
    RESULT = new Caracter();
    OPERADOR.insertar(new NodoCJS("++",iright,ileft));
    RESULT.nodo = OPERADOR;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPERADOR",26, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERADOR ::= disminuir 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS OPERADOR = new NodoCJS("OPERADOR");
    RESULT = new Caracter();
    OPERADOR.insertar(new NodoCJS("--",iright,ileft));
    RESULT.nodo = OPERADOR;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPERADOR",26, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CICLO ::= mientras parentesisA OP parentesisC llaveA INSTRUCCION llaveC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		//7
    NodoCJS CICLO = new NodoCJS("CICLO");
    RESULT = new Caracter();
    CICLO.insertar(new NodoCJS("while")); CICLO.insertar(new NodoCJS("(")); CICLO.insertar(n.nodo); CICLO.insertar(new NodoCJS(")")); CICLO.insertar(new NodoCJS("{"));
    CICLO.insertar(i.nodo); CICLO.insertar(new NodoCJS("}"));
    RESULT.nodo = CICLO;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("CICLO",6, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MENSAJE ::= mensaje parentesisA OP parentesisC puntoComa 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		
    NodoCJS IMPRIMIR = new NodoCJS("MENSAJE");
    RESULT = new Caracter();
    IMPRIMIR.insertar(new NodoCJS("mensaje")); IMPRIMIR.insertar(new NodoCJS("(")); IMPRIMIR.insertar(n.nodo);
    IMPRIMIR.insertar(new NodoCJS(")")); IMPRIMIR.insertar(new NodoCJS(";")); 
    RESULT.nodo = IMPRIMIR;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("MENSAJE",21, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DOCUMENTO ::= documento punto obtener parentesisA OP parentesisC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		 //2
    NodoCJS A = new NodoCJS("DOCUMENTO");
    RESULT = new Caracter();
    A.insertar(new NodoCJS("documento.obtener(")); A.insertar(n.nodo); 
    RESULT.nodo = A;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("DOCUMENTO",22, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DOCUMENTO ::= documento punto observador parentesisA cadena coma LLAMADA parentesisC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter l = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		 //5
    NodoCJS A = new NodoCJS("DOCUMENTO");
    RESULT = new Caracter();
    A.insertar(new NodoCJS("documento.observador(")); A.insertar(new NodoCJS(n));  A.insertar(new NodoCJS(",")); A.insertar(l.nodo); 
    A.insertar(new NodoCJS(")")); 
    RESULT.nodo = A;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("DOCUMENTO",22, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DOCUMENTO ::= documento punto observador parentesisA cadena coma funcion parentesisA parentesisC llaveA INSTRUCCION llaveC parentesisC 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter l = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		 //5
    NodoCJS A = new NodoCJS("DOCUMENTO");
    RESULT = new Caracter();
    A.insertar(new NodoCJS("documento.observador("));A.insertar(new NodoCJS(n)); A.insertar(new NodoCJS(",funcion(){"));A.insertar(l.nodo); 
    A.insertar(new NodoCJS("})"));
    RESULT.nodo = A;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("DOCUMENTO",22, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DOCUMENTO ::= id punto observador parentesisA cadena coma LLAMADA parentesisC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter l = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		 //6
    NodoCJS A = new NodoCJS("DOCUMENTO");
    RESULT = new Caracter();
    A.insertar(new NodoCJS(i,iright,ileft)); A.insertar(new NodoCJS(".observador(")); A.insertar(new NodoCJS(n));  A.insertar(new NodoCJS(",")); A.insertar(l.nodo); 
    A.insertar(new NodoCJS(")")); 
    RESULT.nodo = A;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("DOCUMENTO",22, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SET ::= documento punto obtener parentesisA OP parentesisC punto set parentesisA cadena coma OP parentesisC puntoComa 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-9)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-9)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-9)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter m = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		 //8
    NodoCJS A = new NodoCJS("SET");
    RESULT = new Caracter();
    A.insertar(new NodoCJS("documento.obtener(")); A.insertar(n.nodo);A.insertar(new NodoCJS(").setElemento("));  A.insertar(new NodoCJS(s)); A.insertar(new NodoCJS(","));A.insertar(m.nodo);
    A.insertar(new NodoCJS(")")); ; A.insertar(new NodoCJS(";"));
    RESULT.nodo = A;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SET",23, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-13)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SET ::= id punto set parentesisA cadena coma OP parentesisC puntoComa 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		 //7
    NodoCJS A = new NodoCJS("SET");
    RESULT = new Caracter();
    A.insertar(new NodoCJS(i,iright,ileft)); A.insertar(new NodoCJS(").setElemento("));  A.insertar(new NodoCJS(s)); A.insertar(new NodoCJS(","));A.insertar(n.nodo); 
    A.insertar(new NodoCJS(")")); ; A.insertar(new NodoCJS(";")); 
    RESULT.nodo = A;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SET",23, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LLAMADA ::= id parentesisA parentesisC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		 //3
    NodoCJS INSTANCIA = new NodoCJS("LLAMADA");
    RESULT = new Caracter();
    INSTANCIA.insertar(new NodoCJS(i,iright,ileft));  INSTANCIA.insertar(new NodoCJS("(")); INSTANCIA.insertar(new NodoCJS(")"));
    RESULT.nodo = INSTANCIA;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",3, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LLAMADA ::= id parentesisA VALORES parentesisC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		 //4
    NodoCJS INSTANCIA = new NodoCJS("LLAMADA");
    RESULT = new Caracter();
    INSTANCIA.insertar(new NodoCJS(i,iright,ileft)); INSTANCIA.insertar(new NodoCJS("(")); INSTANCIA.insertar(n.nodo); INSTANCIA.insertar(new NodoCJS(")")); 
    RESULT.nodo = INSTANCIA;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",3, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ACCESO ::= id llaveA OP llaveC 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter n = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		 
    NodoCJS A = new NodoCJS("ACCESO");
    RESULT = new Caracter();
    A.insertar(new NodoCJS(i,iright,ileft)); A.insertar(new NodoCJS("{")); A.insertar(n.nodo); A.insertar(new NodoCJS("}")); 
    RESULT.nodo = A;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ACCESO",24, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ACCESO ::= id punto conteo 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		 
    NodoCJS A = new NodoCJS("ACCESO");
    RESULT = new Caracter();
    A.insertar(new NodoCJS(i,iright,ileft)); A.insertar(new NodoCJS(".")); A.insertar(new NodoCJS("conteo")); 
    RESULT.nodo = A;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ACCESO",24, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ACCESO ::= id punto atexto 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		 
    NodoCJS A = new NodoCJS("ACCESO");
    RESULT = new Caracter();
    A.insertar(new NodoCJS(i,iright,ileft)); A.insertar(new NodoCJS(".")); A.insertar(new NodoCJS("atexto()")); 
    RESULT.nodo = A;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ACCESO",24, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OP ::= E 
            {
              Caracter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter e = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS OP = new NodoCJS("OP");
    RESULT = new Caracter();
    OP.insertar(e.nodo);
    RESULT.nodo = OP;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OP",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E ::= parentesisA E parentesisC 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(new NodoCJS("(")); E.insertar(a.nodo); E.insertar(new NodoCJS(")"));
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E ::= E mas E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS("+",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E ::= E menos E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS("-",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= E por E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS("*",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= E dividido E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS("/",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E ::= E modulo E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS("%",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E ::= E aumentar 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS("++",iright,ileft));
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= E disminuir 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS("--",iright,ileft));
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E ::= E mayor E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS(">",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= E menor E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS("<",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= E mayorIgual E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS(">=",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= E menorIgual E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS("<=",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= E igualDoble E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS("==",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= E diferente E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS("!=",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E ::= verdadero 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(new NodoCJS("verdadero","bool",iright,ileft));
    RESULT.nodo = E;
 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E ::= falso 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(new NodoCJS("falso","bool",iright,ileft));
    RESULT.nodo = E;
 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E ::= E or E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS("||",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;
 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E ::= E and E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS("&&",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E ::= not E 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(new NodoCJS("!",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E ::= E potencia E 
            {
              Caracter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Caracter a = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(a.nodo); E.insertar(new NodoCJS("^",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E ::= menos E 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter b = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    NodoCJS E = new NodoCJS("E");
    RESULT = new Caracter();
    E.insertar(new NodoCJS("-",iright,ileft)); E.insertar(b.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E ::= cadena 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    RESULT = new Caracter();
    n = n.replace("\"","");
    NodoCJS E = new NodoCJS("E");
    E.insertar(new NodoCJS(n,"cadena",nright,nleft));
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E ::= entero 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoCJS E = new NodoCJS("E");
    E.insertar(new NodoCJS(n,"entero",nright,nleft));
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E ::= decimal 
            {
              Caracter RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoCJS E = new NodoCJS("E");
    E.insertar(new NodoCJS(n,"decimal",nright,nleft));
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E ::= id 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoCJS E = new NodoCJS("E");
    E.insertar(new NodoCJS(i,"id",iright,ileft));
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E ::= fecha 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoCJS E = new NodoCJS("E");
    E.insertar(new NodoCJS(i,"fecha",iright,ileft));
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E ::= hora 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoCJS E = new NodoCJS("E");
    E.insertar(new NodoCJS(i,"hora",iright,ileft));
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E ::= DOCUMENTO 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoCJS E = new NodoCJS("E");
    E.insertar(i.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E ::= ACCESO 
            {
              Caracter RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Caracter i = (Caracter)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
    RESULT = new Caracter();
    NodoCJS E = new NodoCJS("E");
    E.insertar(i.nodo);
    RESULT.nodo = E;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoCJS$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoCJS$do_action(
    int                        CUP$SintacticoCJS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoCJS$parser,
    java.util.Stack            CUP$SintacticoCJS$stack,
    int                        CUP$SintacticoCJS$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoCJS$do_action_part00000000(
                               CUP$SintacticoCJS$act_num,
                               CUP$SintacticoCJS$parser,
                               CUP$SintacticoCJS$stack,
                               CUP$SintacticoCJS$top);
    }
}

}
